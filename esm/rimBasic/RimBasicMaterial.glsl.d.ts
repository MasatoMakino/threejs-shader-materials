/**
 * ジオメトリの縁を強調するマテリアル
 *
 * @see : https://github.com/mrdoob/three.js/blob/master/src/renderers/shaders/ShaderLib/meshbasic.glsl.js
 */
export declare const fragment = "\n//for Rim Effect\nvarying vec2 uvPosition;\n#include <surface_normal_varying_chunk>\nvarying vec3 vViewPosition;\n\nuniform vec3 rimColor;\nuniform float rimStrength;\nuniform float rimPow;\n\nuniform vec3 insideColor;\nuniform float insideStrength;\nuniform float insidePow;\n\n//original\nuniform vec3 diffuse;\nuniform float opacity;\n\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\n    //for Rim Effect\n    vec3 viewDir = normalize(vViewPosition);\n    float rimGlow = 1.0 - max(0.0, dot(surfaceNormal, viewDir));\n    rimGlow = pow(rimGlow, rimPow);\n    diffuseColor.rgb += rimColor * rimGlow * rimStrength;\n  \n    float insideGlow = max(0.0, dot(surfaceNormal, viewDir));\n    insideGlow = pow(insideGlow, insidePow);\n    diffuseColor.rgb += insideColor * insideGlow * insideStrength;\n    \n    #include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n    #include <alphahash_fragment>\n    #include <specularmap_fragment>\n\t\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t// accumulation (baked indirect lighting only)\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\n\t\treflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\n\t// modulation\n\t#include <aomap_fragment>\n\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\n\t#include <envmap_fragment>\n\t\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n\n}\n";
//# sourceMappingURL=RimBasicMaterial.glsl.d.ts.map