/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./demoSrc/Common.js":
/*!***************************!*\
  !*** ./demoSrc/Common.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Common\": () => (/* binding */ Common)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! three */ \"./node_modules/three/build/three.module.js\");\n/* harmony import */ var three_examples_jsm_controls_OrbitControls__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! three/examples/jsm/controls/OrbitControls */ \"./node_modules/three/examples/jsm/controls/OrbitControls.js\");\n/* harmony import */ var three_examples_jsm_objects_Sky__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! three/examples/jsm/objects/Sky */ \"./node_modules/three/examples/jsm/objects/Sky.js\");\n/* harmony import */ var _CommonGUI__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./CommonGUI */ \"./demoSrc/CommonGUI.js\");\n\n\n\n\nclass Common {\n  static initScene() {\n    const scene = new three__WEBPACK_IMPORTED_MODULE_3__.Scene();\n    return scene;\n  }\n\n  static initLight(scene) {\n    const ambientLight = new three__WEBPACK_IMPORTED_MODULE_3__.AmbientLight(0xffffff, 1.0);\n    scene.add(ambientLight);\n    return ambientLight;\n  }\n\n  static initCamera(scene, W, H, far = 400) {\n    const camera = new three__WEBPACK_IMPORTED_MODULE_3__.PerspectiveCamera(45, W / H, 1, far);\n    camera.position.set(0, 0, 100);\n    camera.updateMatrixWorld(false);\n    scene.add(camera);\n    return camera;\n  }\n\n  static initControl(camera, render) {\n    let domElement;\n\n    if (render != null) {\n      domElement = render.domElement;\n    }\n\n    const control = new three_examples_jsm_controls_OrbitControls__WEBPACK_IMPORTED_MODULE_0__.OrbitControls(camera, domElement);\n    control.update();\n    return control;\n  }\n\n  static initRenderer(W, H, color = 0x000000, id = \"webgl-canvas\", antialias = true) {\n    const element = document.getElementById(id);\n    element.style.zIndex = 0;\n    element.style.position = \"absolute\";\n    const renderer = new three__WEBPACK_IMPORTED_MODULE_3__.WebGLRenderer({\n      canvas: element,\n      antialias: antialias\n    });\n    renderer.setClearColor(new three__WEBPACK_IMPORTED_MODULE_3__.Color(color));\n    renderer.setSize(W, H);\n    renderer.setPixelRatio(window.devicePixelRatio);\n    return renderer;\n  }\n\n  static initHelper(scene) {\n    const axesHelper = new three__WEBPACK_IMPORTED_MODULE_3__.AxesHelper(30);\n    scene.add(axesHelper);\n  }\n\n  static initSky(scene, gui, renderer) {\n    renderer.toneMapping = three__WEBPACK_IMPORTED_MODULE_3__.ACESFilmicToneMapping;\n    const sunSphere = new three__WEBPACK_IMPORTED_MODULE_3__.Mesh(new three__WEBPACK_IMPORTED_MODULE_3__.SphereBufferGeometry(20000, 16, 8), new three__WEBPACK_IMPORTED_MODULE_3__.MeshBasicMaterial({\n      color: 0xffffff\n    }));\n    sunSphere.position.y = -700000;\n    sunSphere.visible = false;\n    scene.add(sunSphere);\n    const sky = new three_examples_jsm_objects_Sky__WEBPACK_IMPORTED_MODULE_1__.Sky();\n    sky.scale.setScalar(45000);\n    scene.add(sky);\n    _CommonGUI__WEBPACK_IMPORTED_MODULE_2__.CommonGUI.initSkyGUI(gui, sky, sunSphere, renderer);\n  }\n\n}\n\n//# sourceURL=webpack://threejs-shader-materials/./demoSrc/Common.js?");

/***/ }),

/***/ "./demoSrc/CommonGUI.js":
/*!******************************!*\
  !*** ./demoSrc/CommonGUI.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CommonGUI\": () => (/* binding */ CommonGUI)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! three */ \"./node_modules/three/build/three.module.js\");\n/* harmony import */ var _lib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib */ \"./lib/index.js\");\n/* harmony import */ var _lib__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_lib__WEBPACK_IMPORTED_MODULE_0__);\n\n\nclass CommonGUI {\n  static initColorGUI(folder, mat, propName = \"color\") {\n    const prop = {};\n    const targetColor = mat[propName];\n    prop[propName] = targetColor.getHex();\n    folder.addColor(prop, propName).onChange(val => {\n      targetColor.setHex(val);\n    });\n    return prop;\n  }\n\n  static initMaterialGUI(gui, mat, folderName = \"Material\") {\n    const folder = gui.addFolder(folderName);\n    this.initMaterialFolder(folder, mat);\n    this.initColorGUI(folder, mat, \"emissive\");\n    folder.open();\n  }\n\n  static initMaterialFolder(folder, mat) {\n    this.initColorGUI(folder, mat);\n    folder.add(mat, \"transparent\");\n    folder.add(mat, \"uniformOpacity\", 0.0, 1.0);\n  }\n\n  static initSpriteMaterialGUI(gui, mat, folderName = \"Material\") {\n    const folder = gui.addFolder(folderName);\n    this.initMaterialFolder(folder, mat);\n    folder.open();\n  }\n\n  static initGridMaterialGUI(gui, mat) {\n    this.initMaterialGUI(gui, mat);\n    const prop = {\n      mask: \"\",\n      alphaMap: \"\"\n    };\n    const folder = gui.addFolder(\"WavyGridMaterial\");\n    folder.add(mat, \"isReversed\");\n    folder.add(mat, \"division\", 2.0, 256.0).step(1);\n    folder.add(mat, \"divisionScaleX\", 0.0, 4.0).step(1);\n    folder.add(prop, \"mask\", {\n      none: \"\",\n      earth: \"./textures/landmask.png\"\n    }).onChange(val => {\n      if (val === \"\") {\n        mat.maskTexture = null;\n      } else {\n        mat.maskTexture = new three__WEBPACK_IMPORTED_MODULE_1__.TextureLoader().load(val);\n      }\n    });\n    folder.add(prop, \"alphaMap\", {\n      none: \"\",\n      earth: \"./textures/landmask.png\"\n    }).onChange(val => {\n      if (val === \"\") {\n        mat.alphaMap = null;\n      } else {\n        mat.alphaMap = new three__WEBPACK_IMPORTED_MODULE_1__.TextureLoader().load(val);\n      }\n    });\n    folder.open();\n    return folder;\n  }\n\n  static initWavyMaterialGUI(gui, mat) {\n    const folder = this.initGridMaterialGUI(gui, mat);\n    const animationFolder = folder.addFolder(\"WavyAnimation\");\n    animationFolder.add(mat, \"isAnimate\");\n    animationFolder.add(mat, \"speed\", -2, 2);\n    animationFolder.add(mat, \"waveFrequency\", 0.0, 1.0);\n    animationFolder.add(mat, \"wavePow\", 0.0, 4.0);\n    animationFolder.add(mat, \"direction\", {\n      horizontal: _lib__WEBPACK_IMPORTED_MODULE_0__.Directions.horizontal,\n      vertical: _lib__WEBPACK_IMPORTED_MODULE_0__.Directions.vertical,\n      radial: _lib__WEBPACK_IMPORTED_MODULE_0__.Directions.radial\n    });\n    animationFolder.add(mat, \"raisedBottom\", 0.0, 1.0);\n    animationFolder.open();\n  }\n\n  static initAnimationGUI(gui, mat, folderName = \"Animation\") {\n    const folder = gui.addFolder(folderName);\n    folder.add(mat, \"isAnimate\");\n    folder.add(mat, \"speed\", -2, 2);\n    folder.open();\n  }\n\n  static initRimGUI(gui, mat, folderName = \"Rim Effect Material\") {\n    const folder = gui.addFolder(folderName);\n    CommonGUI.initColorGUI(folder, mat, \"rimColor\");\n    folder.add(mat, \"rimStrength\", 0.0, 4.0).step(0.01);\n    folder.add(mat, \"rimPow\", 0.0, 4.0).step(0.01);\n    CommonGUI.initColorGUI(folder, mat, \"insideColor\");\n    folder.add(mat, \"insideStrength\", 0.0, 4.0).step(0.01);\n    folder.add(mat, \"insidePow\", 0.0, 8.0).step(0.01);\n    folder.open();\n  }\n\n  static initExpansionGUI(gui, mat, folderName = \"ExpansionMaterial\") {\n    const folder = gui.addFolder(\"ExpansionMaterial\");\n    const ampRange = 12.0;\n    folder.add(mat, \"expansionStrength\", -ampRange, ampRange).step(0.01);\n    folder.open();\n  }\n\n  static initFBMTilingGUI(gui, mat, folderName = \"FBM Tiling\") {\n    const folder = gui.addFolder(\"FBM Tiling\");\n    folder.add(mat, \"tiles\", 1.0, 8.0).step(1.0);\n    folder.add(mat, \"hashLoop\", 2.0, 16.0).step(1.0);\n    folder.add(mat, \"amp\", 0.0, 2.0).step(0.01);\n    folder.open();\n  }\n\n  static initSkyGUI(gui, sky, sunSphere, renderer) {\n    const effectController = {\n      turbidity: 10,\n      rayleigh: 0.15,\n      mieCoefficient: 0.005,\n      mieDirectionalG: 0.8,\n      inclination: 0.07,\n      // elevation / inclination\n      azimuth: 0.25,\n      // Facing front,\n      exposure: 0.75\n    };\n    const distance = 400000;\n\n    function guiChanged() {\n      const uniforms = sky.material.uniforms;\n      uniforms[\"turbidity\"].value = effectController.turbidity;\n      uniforms[\"rayleigh\"].value = effectController.rayleigh;\n      uniforms[\"mieCoefficient\"].value = effectController.mieCoefficient;\n      uniforms[\"mieDirectionalG\"].value = effectController.mieDirectionalG;\n      const theta = Math.PI * (effectController.inclination - 0.5);\n      const phi = 2 * Math.PI * (effectController.azimuth - 0.5);\n      sunSphere.position.x = distance * Math.cos(phi);\n      sunSphere.position.y = distance * Math.sin(phi) * Math.sin(theta);\n      sunSphere.position.z = distance * Math.sin(phi) * Math.cos(theta);\n      uniforms[\"sunPosition\"].value.copy(sunSphere.position);\n      renderer.toneMappingExposure = effectController.exposure;\n    }\n\n    guiChanged();\n    const folder = gui.addFolder(\"Sky\");\n    folder.add(effectController, \"turbidity\", 1.0, 20.0, 0.1).onChange(guiChanged);\n    folder.add(effectController, \"rayleigh\", 0.0, 4, 0.001).onChange(guiChanged);\n    folder.add(effectController, \"mieCoefficient\", 0.0, 0.1, 0.001).onChange(guiChanged);\n    folder.add(effectController, \"mieDirectionalG\", 0.0, 1, 0.001).onChange(guiChanged);\n    folder.add(effectController, \"inclination\", 0, 1, 0.0001).onChange(guiChanged);\n    folder.add(effectController, \"azimuth\", 0, 1, 0.0001).onChange(guiChanged);\n    folder.add(effectController, \"exposure\", 0, 1, 0.0001).onChange(guiChanged);\n    folder.open();\n  }\n\n}\n\n//# sourceURL=webpack://threejs-shader-materials/./demoSrc/CommonGUI.js?");

/***/ }),

/***/ "./demoSrc/demoHexGrid.js":
/*!********************************!*\
  !*** ./demoSrc/demoHexGrid.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"StudyHexGrid\": () => (/* binding */ StudyHexGrid)\n/* harmony export */ });\n/* harmony import */ var dat_gui__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! dat.gui */ \"./node_modules/dat.gui/build/dat.gui.module.js\");\n/* harmony import */ var _Common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Common */ \"./demoSrc/Common.js\");\n/* harmony import */ var _CommonGUI__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./CommonGUI */ \"./demoSrc/CommonGUI.js\");\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! three */ \"./node_modules/three/build/three.module.js\");\n/* harmony import */ var _lib__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../lib */ \"./lib/index.js\");\n/* harmony import */ var _lib__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_lib__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var raf_ticker__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! raf-ticker */ \"./node_modules/raf-ticker/esm/index.js\");\n\n\n\n\n\n\n\nclass StudyHexGrid {\n  constructor() {\n    const W = 640;\n    const H = 480;\n    const scene = _Common__WEBPACK_IMPORTED_MODULE_1__.Common.initScene();\n    scene.fog = new three__WEBPACK_IMPORTED_MODULE_5__.Fog(0x000000, 80, 160);\n    _Common__WEBPACK_IMPORTED_MODULE_1__.Common.initLight(scene);\n    const camera = _Common__WEBPACK_IMPORTED_MODULE_1__.Common.initCamera(scene, W, H);\n    const renderer = _Common__WEBPACK_IMPORTED_MODULE_1__.Common.initRenderer(W, H);\n    const control = _Common__WEBPACK_IMPORTED_MODULE_1__.Common.initControl(camera, renderer);\n    _Common__WEBPACK_IMPORTED_MODULE_1__.Common.initHelper(scene);\n    const mat = this.initObject(scene);\n    raf_ticker__WEBPACK_IMPORTED_MODULE_4__.RAFTicker.addEventListener(raf_ticker__WEBPACK_IMPORTED_MODULE_4__.RAFTickerEventType.tick, e => {\n      renderer.render(scene, camera);\n    });\n    this.initGUI(mat);\n  }\n\n  initObject(scene) {\n    const spot = new three__WEBPACK_IMPORTED_MODULE_5__.PointLight(0xffffff, 1, 0, 2);\n    spot.position.set(10, 20, 30);\n    scene.add(spot);\n    const helper = new three__WEBPACK_IMPORTED_MODULE_5__.PointLightHelper(spot);\n    scene.add(helper);\n    const geo = new three__WEBPACK_IMPORTED_MODULE_5__.SphereGeometry(10, 64, 64);\n    const mat = new _lib__WEBPACK_IMPORTED_MODULE_3__.HexGridMaterial({\n      // side:DoubleSide,\n      fog: scene.fog !== undefined\n    });\n    mat.color = new three__WEBPACK_IMPORTED_MODULE_5__.Color(0xff6666);\n    mat.direction = _lib__WEBPACK_IMPORTED_MODULE_3__.Directions.vertical;\n    const mesh = new three__WEBPACK_IMPORTED_MODULE_5__.Mesh(geo, mat);\n    scene.add(mesh);\n    return mat;\n  }\n\n  initGUI(mat) {\n    const gui = new dat_gui__WEBPACK_IMPORTED_MODULE_0__.GUI();\n    _CommonGUI__WEBPACK_IMPORTED_MODULE_2__.CommonGUI.initWavyMaterialGUI(gui, mat);\n    this.initGUIMaterial(gui, mat);\n  }\n\n  initGUIMaterial(gui, mat) {\n    const folder = gui.addFolder(\"HexGridMaterial\");\n    folder.add(mat, \"gridWeight\", 0.0, 0.5);\n    folder.open();\n  }\n\n}\n\nwindow.onload = () => {\n  const study = new StudyHexGrid();\n};\n\n//# sourceURL=webpack://threejs-shader-materials/./demoSrc/demoHexGrid.js?");

/***/ }),

/***/ "./lib/GridMaterial.js":
/*!*****************************!*\
  !*** ./lib/GridMaterial.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.GridMaterial = void 0;\n\nconst three_1 = __webpack_require__(/*! three */ \"./node_modules/three/build/three.module.js\");\n\nconst ShaderPhongMaterial_1 = __webpack_require__(/*! ./ShaderPhongMaterial */ \"./lib/ShaderPhongMaterial.js\");\n\nconst ReversibleChunk_1 = __webpack_require__(/*! ./chunk/ReversibleChunk */ \"./lib/chunk/ReversibleChunk.js\");\n\nconst MaskMapChunk_1 = __webpack_require__(/*! ./chunk/MaskMapChunk */ \"./lib/chunk/MaskMapChunk.js\");\n/**\n * グリッド状に分割されたマテリアル。\n */\n\n\nclass GridMaterial extends ShaderPhongMaterial_1.ShaderPhongMaterial {\n  get division() {\n    return this.uniforms.division.value;\n  }\n\n  set division(value) {\n    this.uniforms.division.value = value;\n  }\n\n  get divisionScaleX() {\n    return this.uniforms.divisionScaleX.value;\n  }\n\n  set divisionScaleX(value) {\n    this.uniforms.divisionScaleX.value = value;\n  }\n\n  get isReversed() {\n    return this.uniforms.isReversed.value;\n  }\n\n  set isReversed(value) {\n    this.uniforms.isReversed.value = value;\n  }\n\n  get maskTexture() {\n    return MaskMapChunk_1.MaskMapChunk.getMaskTexture(this);\n  }\n\n  set maskTexture(val) {\n    MaskMapChunk_1.MaskMapChunk.setMaskTexture(this, val);\n  }\n\n  initChunks() {\n    super.initChunks();\n    MaskMapChunk_1.MaskMapChunk.registerChunk();\n    ReversibleChunk_1.ReversibleChunk.registerChunk();\n  }\n\n  static getBasicUniforms() {\n    return three_1.UniformsUtils.merge([ShaderPhongMaterial_1.ShaderPhongMaterial.getBasicUniforms(), ReversibleChunk_1.ReversibleChunk.getUniform(), MaskMapChunk_1.MaskMapChunk.getUniform()]);\n  }\n\n  initDefaultSetting(parameters) {\n    super.initDefaultSetting(parameters);\n\n    if (parameters.transparent == null) {\n      this.transparent = true;\n    }\n  }\n\n}\n\nexports.GridMaterial = GridMaterial;\n\n//# sourceURL=webpack://threejs-shader-materials/./lib/GridMaterial.js?");

/***/ }),

/***/ "./lib/ShaderPhongMaterial.frag.glsl.js":
/*!**********************************************!*\
  !*** ./lib/ShaderPhongMaterial.frag.glsl.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n/**\n *\n */\n\nexports[\"default\"] = () => {\n  // language=GLSL\n  return `\n#define PHONG\n\n#include <mesh_phong_uniform>\nvarying vec2 uvPosition;\n#include <mesh_position_varying>\n\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n    #include <clipping_planes_fragment>\n  \n    #include <mesh_phong_diffuse_color>\n    \n    #include <logdepthbuf_fragment>\n    #include <__ShaderMaterial__map_fragment_begin_chunk>\n    #include <map_fragment>\n    #include <color_fragment>\n    #include <mesh_phong_switching_alpha_map>\n    \n    #include <alphatest_fragment>\n    #include <specularmap_fragment>\n    #include <normal_fragment_begin>\n    #include <normal_fragment_maps>\n    #include <emissivemap_fragment>\n    \n    // accumulation\n    #include <lights_phong_fragment>\n    #include <lights_fragment_begin>\n    #include <lights_fragment_maps>\n    #include <lights_fragment_end>\n    \n    // modulation\n    #include <aomap_fragment>\n    vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n    #include <envmap_fragment>\n    gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n    #include <tonemapping_fragment>\n    #include <encodings_fragment>\n    #include <fog_fragment>\n    #include <premultiplied_alpha_fragment>\n    #include <dithering_fragment>\n}`;\n};\n\n//# sourceURL=webpack://threejs-shader-materials/./lib/ShaderPhongMaterial.frag.glsl.js?");

/***/ }),

/***/ "./lib/ShaderPhongMaterial.js":
/*!************************************!*\
  !*** ./lib/ShaderPhongMaterial.js ***!
  \************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.ShaderPhongMaterial = void 0;\n\nconst three_1 = __webpack_require__(/*! three */ \"./node_modules/three/build/three.module.js\");\n\nconst ExpansionChunk_1 = __webpack_require__(/*! ./chunk/ExpansionChunk */ \"./lib/chunk/ExpansionChunk.js\");\n\nconst MapChunk_1 = __webpack_require__(/*! ./chunk/MapChunk */ \"./lib/chunk/MapChunk.js\");\n\nconst MeshPhongChunk_1 = __webpack_require__(/*! ./chunk/MeshPhongChunk */ \"./lib/chunk/MeshPhongChunk.js\");\n\nconst SurfaceNormalChunk_1 = __webpack_require__(/*! ./chunk/SurfaceNormalChunk */ \"./lib/chunk/SurfaceNormalChunk.js\");\n\nconst ShaderPhongMaterial_frag_glsl_1 = __importDefault(__webpack_require__(/*! ./ShaderPhongMaterial.frag.glsl */ \"./lib/ShaderPhongMaterial.frag.glsl.js\"));\n\nconst ShaderPhongMaterial_vert_glsl_1 = __importDefault(__webpack_require__(/*! ./ShaderPhongMaterial.vert.glsl */ \"./lib/ShaderPhongMaterial.vert.glsl.js\"));\n/**\n * MeshPhongMaterialに準じるShaderMaterialクラス。\n *\n * @see https://github.com/mrdoob/three.js/blob/76c64b23d422dcfb36a28353f45b1effa1f68c5a/src/renderers/shaders/ShaderLib.js#L53\n */\n\n\nclass ShaderPhongMaterial extends three_1.ShaderMaterial {\n  /**\n   * コンストラクタ。\n   * @param vertexShader\n   * @param fragmentShader\n   * @param parameters\n   */\n  constructor(vertexShader, fragmentShader, parameters) {\n    super(parameters);\n    this._opacity = 1.0;\n    parameters !== null && parameters !== void 0 ? parameters : parameters = {};\n    vertexShader !== null && vertexShader !== void 0 ? vertexShader : vertexShader = (0, ShaderPhongMaterial_vert_glsl_1.default)();\n    fragmentShader !== null && fragmentShader !== void 0 ? fragmentShader : fragmentShader = (0, ShaderPhongMaterial_frag_glsl_1.default)();\n    this.initChunks();\n    this.initUniforms();\n    this.initDefines();\n    this.vertexShader = vertexShader;\n    this.fragmentShader = fragmentShader;\n    this.initDefaultSetting(parameters);\n  }\n  /**\n   * このMaterialに必要なuniformsを生成する。\n   */\n\n\n  static getBasicUniforms() {\n    return three_1.UniformsUtils.merge([three_1.UniformsLib.common, three_1.UniformsLib.specularmap, three_1.UniformsLib.envmap, three_1.UniformsLib.aomap, three_1.UniformsLib.lightmap, three_1.UniformsLib.emissivemap, three_1.UniformsLib.bumpmap, three_1.UniformsLib.normalmap, three_1.UniformsLib.displacementmap, three_1.UniformsLib.gradientmap, three_1.UniformsLib.fog, three_1.UniformsLib.lights, {\n      emissive: {\n        value: new three_1.Color(0x000000)\n      },\n      specular: {\n        value: new three_1.Color(0x111111)\n      },\n      shininess: {\n        value: 30\n      },\n      hasAlphaMap: {\n        value: false\n      }\n    }, SurfaceNormalChunk_1.SurfaceNormalChunk.getUniform(), ExpansionChunk_1.ExpansionChunk.getUniform(), MapChunk_1.MapChunk.getUniform()]);\n  }\n  /**\n   * ShaderChunkにこのマテリアルに必要なChunkを追加する。\n   */\n\n\n  initChunks() {\n    MeshPhongChunk_1.MeshPhongChunk.registerChunk();\n    SurfaceNormalChunk_1.SurfaceNormalChunk.registerChunk();\n    ExpansionChunk_1.ExpansionChunk.registerChunk();\n    MapChunk_1.MapChunk.registerChunk();\n  }\n  /**\n   * uniformsを初期化する。\n   */\n\n\n  initUniforms() {\n    this.uniforms = three_1.UniformsUtils.merge([ShaderPhongMaterial.getBasicUniforms(), ExpansionChunk_1.ExpansionChunk.getUniform(), {}]);\n  }\n  /**\n   * definesを初期化する。\n   */\n\n\n  initDefines() {\n    this.defines = Object.assign({}, MeshPhongChunk_1.MeshPhongChunk.getDefines(), SurfaceNormalChunk_1.SurfaceNormalChunk.getDefines(), ExpansionChunk_1.ExpansionChunk.getDefines(), this.defines);\n  }\n  /**\n   * 1.オプションで指定されなかったパラメーター値を補完する。\n   * 2.uniformsに代入する必要のあるパラメーターを明示的に代入する。\n   *\n   * @param parameters\n   */\n\n\n  initDefaultSetting(parameters) {\n    this.uniformOpacity = this._opacity;\n    this.lights = true; //FIXME シェーダーがエラーを起こすのでlights設定は強制でON\n  }\n  /**\n   * MeshPhongマテリアルと互換性を持つために、colorプロパティはdiffuseへ代入される。\n   */\n\n\n  get color() {\n    return this.uniforms.diffuse.value;\n  }\n\n  set color(value) {\n    this.uniforms.diffuse.value = value;\n  }\n  /**\n   * 透明度\n   * @deprecated Use uniformOpacity, To be removed in version 0.3.0\n   * @see https://github.com/microsoft/TypeScript/pull/37894\n   */\n  //@ts-ignore : これはopacityプロパティとuniforms.opacityプロパティを同期するために利用されます。\n\n\n  get opacity() {\n    return this.uniformOpacity;\n  }\n  /**\n   * 透明度\n   */\n\n\n  get uniformOpacity() {\n    return this._opacity;\n  }\n  /**\n   * 透明度\n   * @param value\n   * @deprecated Use uniformOpacity, To be removed in version 0.3.0\n   * @see https://github.com/microsoft/TypeScript/pull/37894\n   */\n  //@ts-ignore : これはopacityプロパティとuniforms.opacityプロパティを同期するために利用されます。\n\n\n  set opacity(value) {\n    this.uniformOpacity = value;\n  }\n  /**\n   * 透明度\n   * opacityは基底クラスのMaterialのコンストラクタ内で明示的に1.0が代入される。\n   * この段階でuniformsはundefinedなので、そのままでは初期化できない。\n   * このsetterでは受け取った値をprivate変数に保存して、初期化後にuniformsに再代入する。\n   * @param value\n   */\n\n\n  set uniformOpacity(value) {\n    var _a;\n\n    this._opacity = value;\n\n    if ((_a = this.uniforms) === null || _a === void 0 ? void 0 : _a.opacity) {\n      this.uniforms.opacity.value = value;\n    }\n  }\n\n  get emissive() {\n    return this.uniforms.emissive.value;\n  }\n\n  set emissive(value) {\n    this.uniforms.emissive.value = value;\n  }\n\n  get map() {\n    return MapChunk_1.MapChunk.getMap(this);\n  }\n\n  set map(val) {\n    MapChunk_1.MapChunk.setMap(this, val);\n    this.onSetMap(val);\n  }\n\n  onSetMap(val) {}\n\n  get alphaMap() {\n    return this.uniforms.alphaMap.value;\n  }\n\n  set alphaMap(value) {\n    this.uniforms.alphaMap.value = value;\n    this.uniforms.hasAlphaMap.value = value != null;\n    this.onSetAlphaMap(value);\n  }\n\n  onSetAlphaMap(value) {}\n  /**\n   * 発光状態のために、マテリアルの設定をまとめて変更する。\n   * {@link https://stackoverflow.com/questions/37647853/three-js-depthwrite-vs-depthtest-for-transparent-canvas-texture-map-on-three-p}\n   */\n\n\n  startGlow() {\n    this.alphaTest = 0.0;\n    this.depthWrite = false;\n    this.blending = three_1.AdditiveBlending;\n  }\n\n}\n\nexports.ShaderPhongMaterial = ShaderPhongMaterial;\n\n//# sourceURL=webpack://threejs-shader-materials/./lib/ShaderPhongMaterial.js?");

/***/ }),

/***/ "./lib/ShaderPhongMaterial.vert.glsl.js":
/*!**********************************************!*\
  !*** ./lib/ShaderPhongMaterial.vert.glsl.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n/**\n * https://github.com/mrdoob/three.js/blob/dev/src/renderers/shaders/ShaderLib/meshphong_vert.glsl.js\n */\n\nexports[\"default\"] = () => {\n  // language=GLSL\n  return `\n#define PHONG\n\nvarying vec3 vViewPosition;\nvarying vec2 uvPosition;\n#include <mesh_position_varying>\n#include <surface_normal_varying_chunk>\n#include <__expansion_uniform_chunk>\n\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n    #include <mesh_position_vertex>\n    uvPosition = uv;\n\n    #include <uv_vertex>\n    #include <uv2_vertex>\n    #include <color_vertex>\n    \n    #include <beginnormal_vertex>\n    #include <morphnormal_vertex>\n    #include <skinbase_vertex>\n    #include <skinnormal_vertex>\n    #include <defaultnormal_vertex>\n    #include <surface_normal_vertex_chunk>\n    #include <normal_vertex>\n    \n    #include <begin_vertex>\n    \n    #include <__expansion_vertex_chunk>\n    \n    #include <morphtarget_vertex>\n    #include <skinning_vertex>\n    #include <displacementmap_vertex>\n    #include <project_vertex>\n    #include <logdepthbuf_vertex>\n    #include <clipping_planes_vertex>\n    \n    vViewPosition = - mvPosition.xyz;\n\n    #include <worldpos_vertex>\n    #include <envmap_vertex>\n    #include <shadowmap_vertex>\n    #include <fog_vertex>\n}\n`;\n};\n\n//# sourceURL=webpack://threejs-shader-materials/./lib/ShaderPhongMaterial.vert.glsl.js?");

/***/ }),

/***/ "./lib/ShaderSpriteMaterial.frag.glsl.js":
/*!***********************************************!*\
  !*** ./lib/ShaderSpriteMaterial.frag.glsl.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n/**\n * https://github.com/mrdoob/three.js/blob/dev/src/renderers/shaders/ShaderLib/sprite_frag.glsl.js\n */\n\nexports[\"default\"] = () => {\n  // language=GLSL\n  return `\n#include <sprite_fragment_uniform_chunk>\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n    #include <clipping_planes_fragment>\n    #include <sprite_diffuse_color_chunk>\n\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphatest_fragment>\n    outgoingLight = diffuseColor.rgb;\n    gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n`;\n};\n\n//# sourceURL=webpack://threejs-shader-materials/./lib/ShaderSpriteMaterial.frag.glsl.js?");

/***/ }),

/***/ "./lib/ShaderSpriteMaterial.js":
/*!*************************************!*\
  !*** ./lib/ShaderSpriteMaterial.js ***!
  \*************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.ShaderSpriteMaterial = void 0;\n\nconst three_1 = __webpack_require__(/*! three */ \"./node_modules/three/build/three.module.js\");\n\nconst SpriteChunk_1 = __webpack_require__(/*! ./chunk/SpriteChunk */ \"./lib/chunk/SpriteChunk.js\");\n\nconst ShaderSpriteMaterial_frag_glsl_1 = __importDefault(__webpack_require__(/*! ./ShaderSpriteMaterial.frag.glsl */ \"./lib/ShaderSpriteMaterial.frag.glsl.js\"));\n\nconst ShaderSpriteMaterial_vert_glsl_1 = __importDefault(__webpack_require__(/*! ./ShaderSpriteMaterial.vert.glsl */ \"./lib/ShaderSpriteMaterial.vert.glsl.js\"));\n\nclass ShaderSpriteMaterial extends three_1.ShaderMaterial {\n  /**\n   * コンストラクタ。\n   * @param vertexShader\n   * @param fragmentShader\n   * @param parameters\n   */\n  constructor(vertexShader, fragmentShader, parameters) {\n    super(parameters);\n    this._opacity = 1.0;\n    parameters !== null && parameters !== void 0 ? parameters : parameters = {};\n    vertexShader !== null && vertexShader !== void 0 ? vertexShader : vertexShader = (0, ShaderSpriteMaterial_vert_glsl_1.default)();\n    fragmentShader !== null && fragmentShader !== void 0 ? fragmentShader : fragmentShader = (0, ShaderSpriteMaterial_frag_glsl_1.default)();\n    this.initChunks();\n    this.initUniforms();\n    this.initDefines();\n    this.vertexShader = vertexShader;\n    this.fragmentShader = fragmentShader;\n    this.initDefaultSetting(parameters);\n  }\n  /**\n   * ShaderChunkにこのマテリアルに必要なChunkを追加する。\n   */\n\n\n  initChunks() {\n    SpriteChunk_1.SpriteChunk.registerChunk();\n  }\n  /**\n   * uniformsを初期化する。\n   */\n\n\n  initUniforms() {\n    this.uniforms = three_1.UniformsUtils.merge([SpriteChunk_1.SpriteChunk.getUniform(), {}]);\n  }\n  /**\n   * definesを初期化する。\n   */\n\n\n  initDefines() {\n    this.defines = Object.assign({}, SpriteChunk_1.SpriteChunk.getDefines(), this.defines);\n  }\n  /**\n   * 1.オプションで指定されなかったパラメーター値を補完する。\n   * 2.uniformsに代入する必要のあるパラメーターを明示的に代入する。\n   *\n   * @param parameters\n   */\n\n\n  initDefaultSetting(parameters) {\n    this.uniformOpacity = this._opacity;\n  }\n  /**\n   * 透明度\n   * @deprecated Use uniformOpacity, To be removed in version 0.3.0\n   * @see https://github.com/microsoft/TypeScript/pull/37894\n   */\n  //@ts-ignore : これはopacityプロパティとuniforms.opacityプロパティを同期するために利用されます。\n\n\n  get opacity() {\n    return this._opacity;\n  }\n  /**\n   * 透明度\n   */\n\n\n  get uniformOpacity() {\n    return this._opacity;\n  }\n  /**\n   * 透明度\n   * @deprecated Use uniformOpacity, To be removed in version 0.3.0\n   * @param value\n   */\n  //@ts-ignore : これはopacityプロパティとuniforms.opacityプロパティを同期するために利用されます。\n\n\n  set opacity(value) {\n    this.uniformOpacity = value;\n  }\n  /**\n   * 透明度\n   * opacityは基底クラスのMaterialのコンストラクタ内で明示的に1.0が代入される。\n   * この段階でuniformsはundefinedなので、そのままでは初期化できない。\n   * このsetterでは受け取った値をprivate変数に保存して、初期化後にuniformsに再代入する。\n   * @param value\n   */\n\n\n  set uniformOpacity(value) {\n    var _a;\n\n    this._opacity = value;\n\n    if ((_a = this.uniforms) === null || _a === void 0 ? void 0 : _a.opacity) {\n      this.uniforms.opacity.value = value;\n    }\n  }\n  /**\n   * Spriteマテリアルと互換性を持つために、colorプロパティはdiffuseへ代入される。\n   */\n\n\n  get color() {\n    return this.uniforms.diffuse.value;\n  }\n\n  set color(value) {\n    this.uniforms.diffuse.value = value;\n  }\n\n  get center() {\n    return this.uniforms.center.value;\n  }\n\n  set center(value) {\n    this.uniforms.center.value = value;\n  }\n\n  get rotation() {\n    return this.uniforms.rotation.value;\n  }\n\n  set rotation(value) {\n    this.uniforms.rotation.value = value;\n  }\n\n  get uvTransform() {\n    return this.uniforms.uvTransform.value;\n  }\n\n  set uvTransform(value) {\n    this.uniforms.uvTransform.value = value;\n  }\n\n  get map() {\n    return this.uniforms.map.value;\n  }\n\n  set map(value) {\n    this.uniforms.map.value = value;\n  }\n\n}\n\nexports.ShaderSpriteMaterial = ShaderSpriteMaterial;\n\n//# sourceURL=webpack://threejs-shader-materials/./lib/ShaderSpriteMaterial.js?");

/***/ }),

/***/ "./lib/ShaderSpriteMaterial.vert.glsl.js":
/*!***********************************************!*\
  !*** ./lib/ShaderSpriteMaterial.vert.glsl.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n/**\n * https://raw.githubusercontent.com/mrdoob/three.js/dev/src/renderers/shaders/ShaderLib/sprite_vert.glsl.js\n */\n\nexports[\"default\"] = () => {\n  // language=GLSL\n  return `\n#include <sprite_vertex_uniform_chunk>\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n\t#include <uv_vertex>\n\t#include <sprite_mv_position_chunk>\n\n\tgl_Position = projectionMatrix * mvPosition;\n\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}\n`;\n};\n\n//# sourceURL=webpack://threejs-shader-materials/./lib/ShaderSpriteMaterial.vert.glsl.js?");

/***/ }),

/***/ "./lib/WavyGridMaterial.js":
/*!*********************************!*\
  !*** ./lib/WavyGridMaterial.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.WavyGridMaterial = void 0;\n\nconst raf_ticker_1 = __webpack_require__(/*! raf-ticker */ \"./node_modules/raf-ticker/esm/index.js\");\n\nconst three_1 = __webpack_require__(/*! three */ \"./node_modules/three/build/three.module.js\");\n\nconst AnimationChunk_1 = __webpack_require__(/*! ./chunk/AnimationChunk */ \"./lib/chunk/AnimationChunk.js\");\n\nconst MaskMapChunk_1 = __webpack_require__(/*! ./chunk/MaskMapChunk */ \"./lib/chunk/MaskMapChunk.js\");\n\nconst ReversibleChunk_1 = __webpack_require__(/*! ./chunk/ReversibleChunk */ \"./lib/chunk/ReversibleChunk.js\");\n\nconst WavyAnimationChunk_1 = __webpack_require__(/*! ./chunk/WavyAnimationChunk */ \"./lib/chunk/WavyAnimationChunk.js\");\n\nconst GridMaterial_1 = __webpack_require__(/*! ./GridMaterial */ \"./lib/GridMaterial.js\");\n/**\n * グリッド状に分割され、Wavyアニメーションを行うマテリアル。\n */\n\n\nclass WavyGridMaterial extends GridMaterial_1.GridMaterial {\n  constructor(vertexShader, fragmentShader, parameters) {\n    super(vertexShader, fragmentShader, parameters);\n    /**\n     * 波の速度\n     * 0.5にすると1の半分の速度になる。\n     * マイナスを指定すると、波の進行方向が反転する。\n     */\n\n    this.speed = -0.5;\n    /*\n     * IAnimatable implements\n     */\n\n    this.animationListener = e => {\n      this.addTime(e.delta / 1000);\n    };\n\n    this.isAnimate = this.isAnimate; //reset and start animation\n  }\n\n  addTime(delta) {\n    AnimationChunk_1.AnimationChunk.addTime(this, delta);\n  }\n  /**\n   * 波アニメーションを行うか否か。\n   */\n\n\n  get isAnimate() {\n    return this.uniforms.isAnimate.value;\n  }\n\n  set isAnimate(value) {\n    this.uniforms.isAnimate.value = value;\n\n    if (this.isAnimate) {\n      this.startAnimation();\n    } else {\n      this.stopAnimation();\n    }\n  }\n  /**\n   * 波の振幅\n   * 1の場合、幅1ヘックス\n   * 0.5の場合、幅2ヘックスになる\n   */\n\n\n  get waveFrequency() {\n    return this.uniforms.waveFrequency.value;\n  }\n\n  set waveFrequency(value) {\n    this.uniforms.waveFrequency.value = value;\n  }\n\n  get wavePow() {\n    return this.uniforms.wavePow.value;\n  }\n\n  set wavePow(value) {\n    this.uniforms.wavePow.value = value;\n  }\n  /**\n   * 明るさの底上げ\n   */\n\n\n  get raisedBottom() {\n    return this.uniforms.raisedBottom.value;\n  }\n\n  set raisedBottom(value) {\n    this.uniforms.raisedBottom.value = value;\n  }\n  /**\n   * 波が発生する方角\n   */\n\n\n  get direction() {\n    return this.uniforms.direction.value;\n  }\n\n  set direction(value) {\n    this.uniforms.direction.value = value;\n  }\n\n  initChunks() {\n    super.initChunks();\n    WavyAnimationChunk_1.WavyAnimationChunk.registerChunk();\n  }\n\n  static getBasicUniforms() {\n    return three_1.UniformsUtils.merge([super.getBasicUniforms(), ReversibleChunk_1.ReversibleChunk.getUniform(), WavyAnimationChunk_1.WavyAnimationChunk.getUniform(), MaskMapChunk_1.MaskMapChunk.getUniform()]);\n  }\n\n  initDefaultSetting(parameters) {\n    super.initDefaultSetting(parameters);\n  }\n\n  startAnimation() {\n    raf_ticker_1.RAFTicker.on(raf_ticker_1.RAFTickerEventType.onBeforeTick, this.animationListener);\n  }\n\n  stopAnimation() {\n    raf_ticker_1.RAFTicker.off(raf_ticker_1.RAFTickerEventType.onBeforeTick, this.animationListener);\n  }\n\n}\n\nexports.WavyGridMaterial = WavyGridMaterial;\n\n//# sourceURL=webpack://threejs-shader-materials/./lib/WavyGridMaterial.js?");

/***/ }),

/***/ "./lib/cellularNoise/CellularNoiseMaterial.frag.glsl.js":
/*!**************************************************************!*\
  !*** ./lib/cellularNoise/CellularNoiseMaterial.frag.glsl.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n/**\n * Cellular Noise Fragment Shader\n */\n\nexports[\"default\"] = () => {\n  // language=GLSL\n  return `\n#define PHONG\n\n#include <mesh_phong_uniform>\nvarying vec2 uvPosition;\n#include <mesh_position_varying>\n\nuniform float grid;\nuniform float divisionScaleX;\n#include <time_animation_uniform_chunk>\n\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvec2 rand2D(vec2 p, vec2 scale) {\n    p = mod(p, scale);\n    const float a = 12.9898, b = 78.233, c = 43758.5453;\n    const float a2 = 26.7, b2 = 14.879;\n    \n    highp float dt = dot(p, vec2(a, b)), sn = mod(dt, PI);\n    highp float dt2 = dot(p, vec2(a2, b2)), sn2 = mod(dt2, PI);\n    return fract(sin(vec2(dt, dt2)) * c);\n}\n\n/*!\n * Cellular Noise\n *\n * The inherits function is :\n * Author : patriciogv\n * see https://thebookofshaders.com/12/\n * LICENSE : https://github.com/patriciogonzalezvivo/thebookofshaders/issues/235\n */\nfloat cellularNoise(vec2 uv, float grid, float divisionScaleX, float time){\n  \n    vec2 scale = grid * vec2 ( divisionScaleX, 1.0 );\n    uv *= scale;\n    \n    vec2 i_uv = floor(uv);\n    vec2 f_uv = fract(uv);\n    \n    float minDist = 1.;\n    \n    for (int y= -1; y <= 1; y++) {\n        for (int x= -1; x <= 1; x++) {\n            vec2 neighbor = vec2(float(x), float(y));\n            vec2 point = rand2D(i_uv + neighbor, scale);\n            \n            point = 0.5 + 0.5 * sin(time + PI2 * point);\n            \n            vec2 diff = neighbor + point - f_uv;\n            float dist = length(diff);\n            \n            minDist = min(minDist, dist);\n        }\n    }\n    \n    return minDist;\n}\n\nvoid main() {\n    #include <clipping_planes_fragment>\n  \n    #include <mesh_phong_diffuse_color>\n    \n    #include <logdepthbuf_fragment>\n    #include <__ShaderMaterial__map_fragment_begin_chunk>\n    #include <map_fragment>\n    #include <color_fragment>\n\n    float dist = cellularNoise( mapUV, grid, divisionScaleX, time );\n    diffuseColor.rgb *= dist;\n    diffuseColor.a *= dist;\n    \n    #include <mesh_phong_switching_alpha_map>\n    \n    #include <alphatest_fragment>\n    #include <specularmap_fragment>\n    #include <normal_fragment_begin>\n    #include <normal_fragment_maps>\n    #include <emissivemap_fragment>\n    \n    // accumulation\n    #include <lights_phong_fragment>\n    #include <lights_fragment_begin>\n    #include <lights_fragment_maps>\n    #include <lights_fragment_end>\n    \n    // modulation\n    #include <aomap_fragment>\n    vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n    #include <envmap_fragment>\n    gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n    #include <tonemapping_fragment>\n    #include <encodings_fragment>\n    #include <fog_fragment>\n    #include <premultiplied_alpha_fragment>\n    #include <dithering_fragment>\n}`;\n};\n\n//# sourceURL=webpack://threejs-shader-materials/./lib/cellularNoise/CellularNoiseMaterial.frag.glsl.js?");

/***/ }),

/***/ "./lib/cellularNoise/CellularNoiseMaterial.js":
/*!****************************************************!*\
  !*** ./lib/cellularNoise/CellularNoiseMaterial.js ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.CellularNoiseMaterial = void 0;\n\nconst raf_ticker_1 = __webpack_require__(/*! raf-ticker */ \"./node_modules/raf-ticker/esm/index.js\");\n\nconst three_1 = __webpack_require__(/*! three */ \"./node_modules/three/build/three.module.js\");\n\nconst index_1 = __webpack_require__(/*! ../index */ \"./lib/index.js\");\n\nconst CellularNoiseMaterial_frag_glsl_1 = __importDefault(__webpack_require__(/*! ./CellularNoiseMaterial.frag.glsl */ \"./lib/cellularNoise/CellularNoiseMaterial.frag.glsl.js\"));\n\nclass CellularNoiseMaterial extends index_1.ShaderPhongMaterial {\n  constructor(parameters) {\n    super(null, (0, CellularNoiseMaterial_frag_glsl_1.default)(), parameters);\n    /*\n     * implements IAnimatable\n     */\n\n    this.speed = -0.02;\n    /*\n     * IAnimatable implements\n     */\n\n    this.animationListener = e => {\n      this.addTime(e.delta / 1000);\n    };\n\n    this.isAnimate = this.isAnimate;\n  }\n\n  addTime(delta) {\n    if (this.isAnimate) {\n      index_1.AnimationChunk.addTime(this, delta);\n    }\n  }\n\n  get isAnimate() {\n    return this.uniforms.isAnimate.value;\n  }\n\n  set isAnimate(value) {\n    this.uniforms.isAnimate.value = value;\n\n    if (this.isAnimate) {\n      this.startAnimation();\n    } else {\n      this.stopAnimation();\n    }\n  }\n\n  get grid() {\n    return this.uniforms.grid.value;\n  }\n\n  set grid(value) {\n    this.uniforms.grid.value = value;\n  }\n\n  get divisionScaleX() {\n    return this.uniforms.divisionScaleX.value;\n  }\n\n  set divisionScaleX(value) {\n    this.uniforms.divisionScaleX.value = value;\n  }\n\n  initChunks() {\n    super.initChunks();\n    index_1.AnimationChunk.registerChunk();\n  }\n\n  initUniforms() {\n    this.uniforms = three_1.UniformsUtils.merge([index_1.ShaderPhongMaterial.getBasicUniforms(), index_1.AnimationChunk.getUniform(), {\n      grid: {\n        value: 3.0\n      },\n      divisionScaleX: {\n        value: 1.0\n      }\n    }]);\n  }\n\n  startAnimation() {\n    raf_ticker_1.RAFTicker.on(raf_ticker_1.RAFTickerEventType.onBeforeTick, this.animationListener);\n  }\n\n  stopAnimation() {\n    raf_ticker_1.RAFTicker.off(raf_ticker_1.RAFTickerEventType.onBeforeTick, this.animationListener);\n  }\n\n}\n\nexports.CellularNoiseMaterial = CellularNoiseMaterial;\n\n//# sourceURL=webpack://threejs-shader-materials/./lib/cellularNoise/CellularNoiseMaterial.js?");

/***/ }),

/***/ "./lib/chunk/AnimationChunk.js":
/*!*************************************!*\
  !*** ./lib/chunk/AnimationChunk.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.AnimationChunk = void 0;\n\nconst GLSLChunk_1 = __webpack_require__(/*! ./GLSLChunk */ \"./lib/chunk/GLSLChunk.js\");\n/**\n * IAnimatableインターフェースで定義されたアニメーションを実行するGLSLチャンク。\n * uniformのtime値を操作する。\n * time値によってどのように変化するかは実装するShaderによる。\n */\n\n\nclass AnimationChunk extends GLSLChunk_1.GLSLChunk {\n  static registerChunk() {\n    TimeAnimationUniformChunk.registerChunk();\n  }\n\n  static getUniform() {\n    return {\n      time: {\n        value: 0.0\n      },\n      isAnimate: {\n        value: true\n      }\n    };\n  }\n\n  static addTime(self, delta) {\n    self.uniforms.time.value += delta * self.speed;\n  }\n\n}\n\nexports.AnimationChunk = AnimationChunk;\n\nclass TimeAnimationUniformChunk extends GLSLChunk_1.GLSLChunk {\n  static getChunkName() {\n    return \"time_animation_uniform_chunk\";\n  }\n\n  static getChunk() {\n    return `\n    uniform float time;\n    uniform bool isAnimate;\n    `;\n  }\n\n}\n\n//# sourceURL=webpack://threejs-shader-materials/./lib/chunk/AnimationChunk.js?");

/***/ }),

/***/ "./lib/chunk/ExpansionChunk.js":
/*!*************************************!*\
  !*** ./lib/chunk/ExpansionChunk.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.ExpansionVertexChunk = exports.ExpansionUniformChunk = exports.ExpansionChunk = void 0;\n\nconst GLSLChunk_1 = __webpack_require__(/*! ./GLSLChunk */ \"./lib/chunk/GLSLChunk.js\");\n\nclass ExpansionChunk extends GLSLChunk_1.GLSLChunk {\n  static registerChunk() {\n    ExpansionUniformChunk.registerChunk();\n    ExpansionVertexChunk.registerChunk();\n  }\n\n  static getDefines() {\n    return {\n      USE_EXPANSION: false\n    };\n  }\n\n  static getUniform() {\n    return {\n      expansionStrength: {\n        value: 0.0\n      }\n    };\n  }\n\n}\n\nexports.ExpansionChunk = ExpansionChunk;\n\nclass ExpansionUniformChunk extends GLSLChunk_1.GLSLChunk {\n  static getChunkName() {\n    return \"__expansion_uniform_chunk\";\n  }\n\n  static getChunk() {\n    return `\n    #ifdef USE_EXPANSION\n      uniform float expansionStrength;\n    #endif\n    `;\n  }\n\n}\n\nexports.ExpansionUniformChunk = ExpansionUniformChunk;\n\nclass ExpansionVertexChunk extends GLSLChunk_1.GLSLChunk {\n  static getChunkName() {\n    return \"__expansion_vertex_chunk\";\n  }\n\n  static getChunk() {\n    return `\n    #ifdef USE_EXPANSION\n      transformed += normal * expansionStrength;\n    #endif\n    `;\n  }\n\n}\n\nexports.ExpansionVertexChunk = ExpansionVertexChunk;\n\n//# sourceURL=webpack://threejs-shader-materials/./lib/chunk/ExpansionChunk.js?");

/***/ }),

/***/ "./lib/chunk/GLSLChunk.js":
/*!********************************!*\
  !*** ./lib/chunk/GLSLChunk.js ***!
  \********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.GLSLChunk = void 0;\n\nconst three_1 = __webpack_require__(/*! three */ \"./node_modules/three/build/three.module.js\");\n/**\n * ShaderChunkに登録を行うGLSLのコード片を格納するクラス。\n * GLSLコードの共有化を目的とする。\n */\n\n\nclass GLSLChunk {\n  /**\n   * ShaderChunkに登録する名前。\n   */\n  static getChunkName() {\n    return \"\";\n  }\n  /**\n   * ShaderChunkに登録するGLSLコード。\n   */\n\n\n  static getChunk() {\n    return \"\";\n  }\n  /**\n   * Chunkに関連する定数Defineを格納したオブジェクトを取得する。\n   * @see https://threejs.org/docs/#api/en/materials/ShaderMaterial.defines\n   */\n\n\n  static getDefines() {\n    return {};\n  }\n  /**\n   * ShaderChunkにGLSLコードを登録する。\n   */\n\n\n  static registerChunk() {\n    if (three_1.ShaderChunk && three_1.ShaderChunk[this.getChunkName()] == null) {\n      three_1.ShaderChunk[this.getChunkName()] = this.getChunk();\n    }\n  }\n  /**\n   * Chunkに関連する共有変数Uniformsを格納したオブジェクトを取得する。\n   * @see https://threejs.org/docs/#api/en/materials/ShaderMaterial.uniforms\n   */\n\n\n  static getUniform() {\n    return {};\n  }\n\n}\n\nexports.GLSLChunk = GLSLChunk;\n\n//# sourceURL=webpack://threejs-shader-materials/./lib/chunk/GLSLChunk.js?");

/***/ }),

/***/ "./lib/chunk/HexGridChunk.js":
/*!***********************************!*\
  !*** ./lib/chunk/HexGridChunk.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.HexGridChunk = void 0;\n\nconst GLSLChunk_1 = __webpack_require__(/*! ./GLSLChunk */ \"./lib/chunk/GLSLChunk.js\");\n\nclass HexGridChunk extends GLSLChunk_1.GLSLChunk {\n  static registerChunk() {\n    super.registerChunk();\n    HexGridFunctionChunk.registerChunk();\n  }\n\n}\n\nexports.HexGridChunk = HexGridChunk;\n\nclass HexGridFunctionChunk extends GLSLChunk_1.GLSLChunk {\n  static getChunkName() {\n    return \"hex_grid_function_chunk\";\n  }\n\n  static getChunk() {\n    // language=GLSL\n    return `\n    /**\n     * ヘックスの縁までの距離を取得する。\n     */\n    float hexDist(vec2 p)\n    {\n        p = abs(p);\n        float d = dot(p, normalize(vec2(1.0, 1.73)));\n        return max(d, p.x);\n    }\n    \n    /**\n     * uv座標からヘックス固有のxy座標とIDを取得する\n     *\n     * x : ヘックスの中心点からの回転角\n     * y : ヘックスの縁までの距離\n     * zw : ヘックスのID\n     */\n    vec4 hexCoords(vec2 uv)\n    {\n        vec2 r = vec2(1.0, 1.73);\n        vec2 h = r * 0.5;\n        vec2 a = mod(uv, r) - h;\n        vec2 b = mod(uv - h, r) - h;\n    \n        vec2 gv = length(a) < length(b) ? a : b;\n        vec2 id = uv - gv;\n    \n        float x = atan(gv.x, gv.y);\n        float y = 0.5 - hexDist(gv);\n    \n        return vec4(x, y, id);\n    }\n    `;\n  }\n\n}\n\n//# sourceURL=webpack://threejs-shader-materials/./lib/chunk/HexGridChunk.js?");

/***/ }),

/***/ "./lib/chunk/MapChunk.js":
/*!*******************************!*\
  !*** ./lib/chunk/MapChunk.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.MapChunk = void 0;\n\nconst three_1 = __webpack_require__(/*! three */ \"./node_modules/three/build/three.module.js\");\n\nconst GLSLChunk_1 = __webpack_require__(/*! ./GLSLChunk */ \"./lib/chunk/GLSLChunk.js\");\n/**\n * マスクテクスチャを利用するShaderMaterial用Chunk。\n * マスクテクスチャがどのように描画に反映されるかは、各Materialのシェーダー実装による。\n */\n\n\nclass MapChunk extends GLSLChunk_1.GLSLChunk {\n  static registerChunk() {\n    super.registerChunk();\n    MapUniformChunk.registerChunk();\n    MapFragmentChunk.registerChunk();\n    MapFragmentBeginChunk.registerChunk();\n  }\n\n  static getUniform() {\n    return three_1.UniformsUtils.merge([super.getUniform(), {\n      hasMap: {\n        value: false\n      },\n      map: {\n        value: null\n      }\n    }]);\n  }\n\n  static getMap(_self) {\n    return _self.uniforms.map.value;\n  }\n\n  static setMap(_self, val) {\n    _self.uniforms.map.value = val;\n    _self.uniforms.hasMap.value = val != null;\n  }\n\n}\n\nexports.MapChunk = MapChunk;\n\nclass MapUniformChunk extends GLSLChunk_1.GLSLChunk {\n  static getChunkName() {\n    return \"map_uniform_chunk\";\n  }\n\n  static getChunk() {\n    return `\n      uniform bool hasMap;\n      uniform sampler2D map;\n    `;\n  }\n\n}\n\nclass MapFragmentChunk extends GLSLChunk_1.GLSLChunk {\n  static getChunkName() {\n    return \"map_fragment_chunk\";\n  }\n\n  static getChunk() {\n    return `\n      if( hasMap ){\n        vec4 texelColor = texture2D( map, mapUV );\n        diffuseColor *= texelColor;\n      }\n    `;\n  }\n\n}\n\nclass MapFragmentBeginChunk extends GLSLChunk_1.GLSLChunk {\n  static getChunkName() {\n    return \"__ShaderMaterial__map_fragment_begin_chunk\";\n  }\n\n  static getChunk() {\n    return `\n      vec2 mapUV = uvPosition;\n    `;\n  }\n\n}\n\n//# sourceURL=webpack://threejs-shader-materials/./lib/chunk/MapChunk.js?");

/***/ }),

/***/ "./lib/chunk/MaskMapChunk.js":
/*!***********************************!*\
  !*** ./lib/chunk/MaskMapChunk.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.MaskMapChunk = void 0;\n\nconst three_1 = __webpack_require__(/*! three */ \"./node_modules/three/build/three.module.js\");\n\nconst GLSLChunk_1 = __webpack_require__(/*! ./GLSLChunk */ \"./lib/chunk/GLSLChunk.js\");\n\nconst RepeatPatternChunk_1 = __webpack_require__(/*! ./RepeatPatternChunk */ \"./lib/chunk/RepeatPatternChunk.js\");\n/**\n * マスクテクスチャを利用するShaderMaterial用Chunk。\n * マスクテクスチャがどのように描画に反映されるかは、各Materialのシェーダー実装による。\n */\n\n\nclass MaskMapChunk extends RepeatPatternChunk_1.RepeatPatternChunk {\n  static registerChunk() {\n    super.registerChunk();\n    MaskMapUniformChunk.registerChunk();\n    MaskMapFragmentChunk.registerChunk();\n  }\n\n  static getUniform() {\n    return three_1.UniformsUtils.merge([super.getUniform(), {\n      hasMaskTexture: {\n        value: false\n      },\n      maskTexture: {\n        value: null\n      }\n    }]);\n  }\n\n  static getMaskTexture(_self) {\n    return _self.uniforms.maskTexture.value;\n  }\n\n  static setMaskTexture(_self, val) {\n    _self.uniforms.maskTexture.value = val;\n    _self.uniforms.hasMaskTexture.value = val != null;\n  }\n\n}\n\nexports.MaskMapChunk = MaskMapChunk;\n\nclass MaskMapUniformChunk extends GLSLChunk_1.GLSLChunk {\n  static getChunkName() {\n    return \"mask_map_uniform_chunk\";\n  }\n\n  static getChunk() {\n    return `\n      uniform bool hasMaskTexture;\n      uniform sampler2D maskTexture;\n    `;\n  }\n\n}\n\nclass MaskMapFragmentChunk extends GLSLChunk_1.GLSLChunk {\n  static getChunkName() {\n    return \"mask_map_fragment_chunk\";\n  }\n\n  static getChunk() {\n    return `\n      float mask = 1.0;\n      if( hasMaskTexture ){\n        vec2 uVm = id / vec2( division * divisionScaleX, division);\n        mask = texture2D( maskTexture, uVm ).g;\n      }\n    `;\n  }\n\n}\n\n//# sourceURL=webpack://threejs-shader-materials/./lib/chunk/MaskMapChunk.js?");

/***/ }),

/***/ "./lib/chunk/MeshPhongChunk.js":
/*!*************************************!*\
  !*** ./lib/chunk/MeshPhongChunk.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.MeshPhongChunk = void 0;\n\nconst GLSLChunk_1 = __webpack_require__(/*! ./GLSLChunk */ \"./lib/chunk/GLSLChunk.js\");\n/**\n * MeshPhongMaterialと同等の機能を備えたShaderMaterialを実装するために必要なGLSLコードを格納したクラス。\n */\n\n\nclass MeshPhongChunk extends GLSLChunk_1.GLSLChunk {\n  static registerChunk() {\n    MeshPhongUniformChunk.registerChunk();\n    MeshPhongDiffuseColorChunk.registerChunk();\n    MeshPhongSwitchingAlphaMapChunk.registerChunk();\n    MeshPositionVaryingChunk.registerChunk();\n    MeshPositionVertexChunk.registerChunk();\n  }\n\n  static getDefines() {\n    return {\n      USE_MESH_POSITION: false\n    };\n  }\n\n}\n\nexports.MeshPhongChunk = MeshPhongChunk;\n\nclass MeshPhongUniformChunk extends GLSLChunk_1.GLSLChunk {\n  static getChunkName() {\n    return \"mesh_phong_uniform\";\n  }\n\n  static getChunk() {\n    return `\n      uniform vec3 diffuse;\n      uniform vec3 emissive;\n      uniform vec3 specular;\n      uniform float shininess;\n      uniform float opacity;\n      uniform bool hasAlphaMap;\n      uniform sampler2D alphaMap;\n    `;\n  }\n\n}\n\nclass MeshPhongDiffuseColorChunk extends GLSLChunk_1.GLSLChunk {\n  static getChunkName() {\n    return \"mesh_phong_diffuse_color\";\n  }\n\n  static getChunk() {\n    return `\n      vec4 diffuseColor = vec4( diffuse, opacity );\n      ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n      vec3 totalEmissiveRadiance = emissive;\n    `;\n  }\n\n}\n\nclass MeshPhongSwitchingAlphaMapChunk extends GLSLChunk_1.GLSLChunk {\n  static getChunkName() {\n    return \"mesh_phong_switching_alpha_map\";\n  }\n\n  static getChunk() {\n    return `\n      if( hasAlphaMap ){\n        diffuseColor.a *= texture2D( alphaMap, mapUV ).g;\n      }\n    `;\n  }\n\n}\n\nclass MeshPositionVaryingChunk extends GLSLChunk_1.GLSLChunk {\n  static getChunkName() {\n    return \"mesh_position_varying\";\n  }\n\n  static getChunk() {\n    return `\n    #ifdef USE_MESH_POSITION\n    varying vec3 meshPosition;\n    #endif\n    `;\n  }\n\n}\n\nclass MeshPositionVertexChunk extends GLSLChunk_1.GLSLChunk {\n  static getChunkName() {\n    return \"mesh_position_vertex\";\n  }\n\n  static getChunk() {\n    return `\n    #ifdef USE_MESH_POSITION\n    meshPosition = position;\n    #endif\n    `;\n  }\n\n}\n\n//# sourceURL=webpack://threejs-shader-materials/./lib/chunk/MeshPhongChunk.js?");

/***/ }),

/***/ "./lib/chunk/RepeatPatternChunk.js":
/*!*****************************************!*\
  !*** ./lib/chunk/RepeatPatternChunk.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.RepeatPatternChunk = void 0;\n\nconst GLSLChunk_1 = __webpack_require__(/*! ./GLSLChunk */ \"./lib/chunk/GLSLChunk.js\");\n\nclass RepeatPatternChunk extends GLSLChunk_1.GLSLChunk {\n  static registerChunk() {\n    RepeatPatternUniformChunk.registerChunk();\n    RepeatPatternFragmentChunk.registerChunk();\n  }\n\n  static getUniform() {\n    return {\n      division: {\n        value: 32.0\n      },\n      divisionScaleX: {\n        value: 1.0\n      }\n    };\n  }\n\n}\n\nexports.RepeatPatternChunk = RepeatPatternChunk;\n\nclass RepeatPatternUniformChunk extends GLSLChunk_1.GLSLChunk {\n  static getChunkName() {\n    return \"repeat_pattern_uniform_chunk\";\n  }\n\n  static getChunk() {\n    return `\n      uniform float division;\n      uniform float divisionScaleX;\n    `;\n  }\n\n}\n\nclass RepeatPatternFragmentChunk extends GLSLChunk_1.GLSLChunk {\n  static getChunkName() {\n    return \"repeat_pattern_fragment_chunk\";\n  }\n\n  static getChunk() {\n    return `\n      vec2 uv =\n        uvPosition\n        * vec2( division * divisionScaleX, division);\n    `;\n  }\n\n}\n\n//# sourceURL=webpack://threejs-shader-materials/./lib/chunk/RepeatPatternChunk.js?");

/***/ }),

/***/ "./lib/chunk/ReversibleChunk.js":
/*!**************************************!*\
  !*** ./lib/chunk/ReversibleChunk.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.ReversibleChunk = void 0;\n\nconst GLSLChunk_1 = __webpack_require__(/*! ./GLSLChunk */ \"./lib/chunk/GLSLChunk.js\");\n\nclass ReversibleChunk extends GLSLChunk_1.GLSLChunk {\n  static registerChunk() {\n    ReversibleUniformChunk.registerChunk();\n  }\n\n  static getUniform() {\n    return {\n      isReversed: {\n        value: false\n      }\n    };\n  }\n\n}\n\nexports.ReversibleChunk = ReversibleChunk;\n\nclass ReversibleUniformChunk extends GLSLChunk_1.GLSLChunk {\n  static getChunkName() {\n    return \"reversible_uniform_chunk\";\n  }\n\n  static getChunk() {\n    return `\n      uniform bool isReversed;\n    `;\n  }\n\n}\n\n//# sourceURL=webpack://threejs-shader-materials/./lib/chunk/ReversibleChunk.js?");

/***/ }),

/***/ "./lib/chunk/SpriteChunk.js":
/*!**********************************!*\
  !*** ./lib/chunk/SpriteChunk.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.SpriteChunk = void 0;\n\nconst GLSLChunk_1 = __webpack_require__(/*! ./GLSLChunk */ \"./lib/chunk/GLSLChunk.js\");\n\nconst three_1 = __webpack_require__(/*! three */ \"./node_modules/three/build/three.module.js\");\n\nconst three_2 = __webpack_require__(/*! three */ \"./node_modules/three/build/three.module.js\");\n/**\n * SpriteMaterialと同等の機能を備えたShaderMaterialを実装するために必要なGLSLコードを格納したクラス。\n */\n\n\nclass SpriteChunk extends GLSLChunk_1.GLSLChunk {\n  static registerChunk() {\n    SpriteVertexUniformChunk.registerChunk();\n    SpriteFragmentUniformChunk.registerChunk();\n    SpriteDiffuseColorChunk.registerChunk();\n    SpriteMVPositionChunk.registerChunk();\n  }\n\n  static getDefines() {\n    return {\n      USE_SIZEATTENUATION: true\n    };\n  }\n\n  static getUniform() {\n    //TODO : PR, UniformsLib.sprite in UniformsLib.d.ts\n    return three_1.UniformsUtils.merge([three_2.UniformsLib.sprite, three_2.UniformsLib.fog, three_2.UniformsLib.lights]);\n  }\n\n}\n\nexports.SpriteChunk = SpriteChunk;\n\nclass SpriteVertexUniformChunk extends GLSLChunk_1.GLSLChunk {\n  static getChunkName() {\n    return \"sprite_vertex_uniform_chunk\";\n  }\n\n  static getChunk() {\n    return `\n      uniform float rotation;\n      uniform vec2 center;\n    `;\n  }\n\n}\n\nclass SpriteFragmentUniformChunk extends GLSLChunk_1.GLSLChunk {\n  static getChunkName() {\n    return \"sprite_fragment_uniform_chunk\";\n  }\n\n  static getChunk() {\n    return `\n      uniform vec3 diffuse;\n      uniform float opacity;\n    `;\n  }\n\n}\n\nclass SpriteDiffuseColorChunk extends GLSLChunk_1.GLSLChunk {\n  static getChunkName() {\n    return \"sprite_diffuse_color_chunk\";\n  }\n\n  static getChunk() {\n    return `\n      vec3 outgoingLight = vec3( 0.0 );\n      vec4 diffuseColor = vec4( diffuse, opacity );\n    `;\n  }\n\n}\n\nclass SpriteMVPositionChunk extends GLSLChunk_1.GLSLChunk {\n  static getChunkName() {\n    return \"sprite_mv_position_chunk\";\n  }\n\n  static getChunk() {\n    return `\n\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n    `;\n  }\n\n}\n\n//# sourceURL=webpack://threejs-shader-materials/./lib/chunk/SpriteChunk.js?");

/***/ }),

/***/ "./lib/chunk/SurfaceNormalChunk.js":
/*!*****************************************!*\
  !*** ./lib/chunk/SurfaceNormalChunk.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.SurfaceNormalVertexChunk = exports.SurfaceNormalVaryingChunk = exports.SurfaceNormalChunk = void 0;\n\nconst GLSLChunk_1 = __webpack_require__(/*! ./GLSLChunk */ \"./lib/chunk/GLSLChunk.js\");\n\nclass SurfaceNormalChunk extends GLSLChunk_1.GLSLChunk {\n  static registerChunk() {\n    SurfaceNormalVaryingChunk.registerChunk();\n    SurfaceNormalVertexChunk.registerChunk();\n  }\n\n  static getDefines() {\n    return {\n      USE_SURFACE_NORMAL: false\n    };\n  }\n\n  static getUniform() {\n    return {};\n  }\n\n}\n\nexports.SurfaceNormalChunk = SurfaceNormalChunk;\n\nclass SurfaceNormalVaryingChunk extends GLSLChunk_1.GLSLChunk {\n  static getChunkName() {\n    return \"surface_normal_varying_chunk\";\n  }\n\n  static getChunk() {\n    return `\n    #ifdef USE_SURFACE_NORMAL\n      varying vec3 surfaceNormal;\n    #endif\n    `;\n  }\n\n}\n\nexports.SurfaceNormalVaryingChunk = SurfaceNormalVaryingChunk;\n\nclass SurfaceNormalVertexChunk extends GLSLChunk_1.GLSLChunk {\n  static getChunkName() {\n    return \"surface_normal_vertex_chunk\";\n  }\n\n  static getChunk() {\n    return `\n    #ifdef USE_SURFACE_NORMAL\n      surfaceNormal = normalize( transformedNormal );\n    #endif\n    `;\n  }\n\n}\n\nexports.SurfaceNormalVertexChunk = SurfaceNormalVertexChunk;\n\n//# sourceURL=webpack://threejs-shader-materials/./lib/chunk/SurfaceNormalChunk.js?");

/***/ }),

/***/ "./lib/chunk/TilingFBMChunk.js":
/*!*************************************!*\
  !*** ./lib/chunk/TilingFBMChunk.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.TilingFBMChunk = void 0;\n\nconst GLSLChunk_1 = __webpack_require__(/*! ./GLSLChunk */ \"./lib/chunk/GLSLChunk.js\");\n\nclass TilingFBMChunk extends GLSLChunk_1.GLSLChunk {\n  static registerChunk() {\n    TilingFBMFunctionChunk.registerChunk();\n    TilingFBMUniformChunk.registerChunk();\n  }\n\n  static getUniform() {\n    return {\n      tiles: {\n        value: 2.0\n      },\n      hashLoop: {\n        value: 8.0\n      },\n      amp: {\n        value: 0.5\n      }\n    };\n  }\n\n  static getDefines() {\n    return {\n      NUM_OCTAVES: 3.0\n    };\n  }\n\n}\n\nexports.TilingFBMChunk = TilingFBMChunk;\n\nclass TilingFBMFunctionChunk extends GLSLChunk_1.GLSLChunk {\n  static getChunkName() {\n    return \"tiling_fbm_function_chunk\";\n  }\n\n  static getChunk() {\n    //language=GLSL\n    return `\n        // Based On Dave_Hoskins \n        // https://www.shadertoy.com/view/4dlGW2\n        \n        float hash(in vec2 p, in float hashLoop)\n        {\n            p = mod(p, hashLoop);\n            return fract(1e4 * sin(17.0 * p.x + p.y * 0.1) * (0.1 + abs(sin(p.y * 13.0 + p.x))));\n        }\n        \n        float noise(in vec2 p, in float hashLoop)\n        {\n            p *= hashLoop;\n            vec2 f = fract(p);\n            vec2 u = f*f*(3.0-2.0*f);\n        \n            p = floor(p);\n            float a = hash(p, hashLoop);\n            float b = hash(p + vec2(1.0, 0.0), hashLoop);\n            float c = hash(p + vec2(0.0, 1.0), hashLoop);\n            float d = hash(p + vec2(1.0, 1.0), hashLoop);\n        \n            return mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;\n        }\n        \n        // Based On Dave_Hoskins \n        // https://www.shadertoy.com/view/4dlGW2\n        \n        float fbm(in vec2 p)\n        {\n            float v = 0.0;\n            \n            p = mod(p, hashLoop);\n            float a = amp;\n            float hashLoopVal = hashLoop;\n            \n            for (int i = 0; i < NUM_OCTAVES; i++){\n                v += noise(p, hashLoopVal) * a;\n                a *= .5;\n                hashLoopVal *= 2.0;\n            }\n            return v;\n        }\n    `;\n  }\n\n}\n\nclass TilingFBMUniformChunk extends GLSLChunk_1.GLSLChunk {\n  static getChunkName() {\n    return \"tiling_fbm_uniform_chunk\";\n  }\n\n  static getChunk() {\n    //language=GLSL\n    return `\n      uniform float tiles;  \n      uniform float hashLoop;\n      uniform float amp;\n    `;\n  }\n\n}\n\n//# sourceURL=webpack://threejs-shader-materials/./lib/chunk/TilingFBMChunk.js?");

/***/ }),

/***/ "./lib/chunk/WavyAnimationChunk.js":
/*!*****************************************!*\
  !*** ./lib/chunk/WavyAnimationChunk.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.Directions = exports.WavyAnimationChunk = void 0;\n\nconst GLSLChunk_1 = __webpack_require__(/*! ./GLSLChunk */ \"./lib/chunk/GLSLChunk.js\");\n\nconst three_1 = __webpack_require__(/*! three */ \"./node_modules/three/build/three.module.js\");\n\nconst AnimationChunk_1 = __webpack_require__(/*! ./AnimationChunk */ \"./lib/chunk/AnimationChunk.js\");\n/**\n * IWaveAnimatableインターフェースで定義されたアニメーションを実装するためのGLSLチャンク。\n * 実行にはグリッドid値が必要。idはvec2。\n * 結果はdiffuseColor.aに反映される。\n */\n\n\nclass WavyAnimationChunk extends AnimationChunk_1.AnimationChunk {\n  static registerChunk() {\n    super.registerChunk();\n    WavyAnimationFragmentChunk.registerChunk();\n    WavyAnimationUniformChunk.registerChunk();\n  }\n\n  static getUniform() {\n    return three_1.UniformsUtils.merge([super.getUniform(), {\n      raisedBottom: {\n        value: 0.05\n      },\n      waveFrequency: {\n        value: 0.2\n      },\n      wavePow: {\n        value: 4.0\n      },\n      direction: {\n        value: Directions.vertical\n      }\n    }]);\n  }\n\n}\n\nexports.WavyAnimationChunk = WavyAnimationChunk;\n\nclass WavyAnimationFragmentChunk extends GLSLChunk_1.GLSLChunk {\n  static getChunkName() {\n    return \"wavy_animation_fragment_chunk\";\n  }\n\n  static getChunk() {\n    return `\n    float distance = id.y;\n    if( direction == ${Directions.horizontal}){\n      distance = id.x;\n    }else if( direction == ${Directions.radial} ){\n      distance = length(id.xy);\n    }\n\n    float wavy = isAnimate\n      ? pow( sin( (distance * waveFrequency - time) ), wavePow) + raisedBottom\n      : 1.0;\n  \n    diffuseColor.a *= wavy;\n    `;\n  }\n\n}\n\nclass WavyAnimationUniformChunk extends GLSLChunk_1.GLSLChunk {\n  static getChunkName() {\n    return \"wavy_animation_uniform_chunk\";\n  }\n\n  static getChunk() {\n    return `\n    uniform float raisedBottom;\n    uniform float waveFrequency;\n    uniform float wavePow;\n    uniform int direction;\n    `;\n  }\n\n}\n/**\n * Wavyアニメーションの波及方向を示すenum。\n */\n\n\nvar Directions;\n\n(function (Directions) {\n  Directions[Directions[\"vertical\"] = 4] = \"vertical\";\n  Directions[Directions[\"horizontal\"] = 3] = \"horizontal\";\n  /**\n   * id値(0,0)を中心に同心円状に波及する。\n   */\n\n  Directions[Directions[\"radial\"] = 5] = \"radial\";\n})(Directions = exports.Directions || (exports.Directions = {}));\n\n//# sourceURL=webpack://threejs-shader-materials/./lib/chunk/WavyAnimationChunk.js?");

/***/ }),

/***/ "./lib/chunk/index.js":
/*!****************************!*\
  !*** ./lib/chunk/index.js ***!
  \****************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __exportStar = this && this.__exportStar || function (m, exports) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\n__exportStar(__webpack_require__(/*! ./AnimationChunk */ \"./lib/chunk/AnimationChunk.js\"), exports);\n\n__exportStar(__webpack_require__(/*! ./ExpansionChunk */ \"./lib/chunk/ExpansionChunk.js\"), exports);\n\n__exportStar(__webpack_require__(/*! ./GLSLChunk */ \"./lib/chunk/GLSLChunk.js\"), exports);\n\n__exportStar(__webpack_require__(/*! ./HexGridChunk */ \"./lib/chunk/HexGridChunk.js\"), exports);\n\n__exportStar(__webpack_require__(/*! ./MapChunk */ \"./lib/chunk/MapChunk.js\"), exports);\n\n__exportStar(__webpack_require__(/*! ./MaskMapChunk */ \"./lib/chunk/MaskMapChunk.js\"), exports);\n\n__exportStar(__webpack_require__(/*! ./MeshPhongChunk */ \"./lib/chunk/MeshPhongChunk.js\"), exports);\n\n__exportStar(__webpack_require__(/*! ./RepeatPatternChunk */ \"./lib/chunk/RepeatPatternChunk.js\"), exports);\n\n__exportStar(__webpack_require__(/*! ./ReversibleChunk */ \"./lib/chunk/ReversibleChunk.js\"), exports);\n\n__exportStar(__webpack_require__(/*! ./SpriteChunk */ \"./lib/chunk/SpriteChunk.js\"), exports);\n\n__exportStar(__webpack_require__(/*! ./SurfaceNormalChunk */ \"./lib/chunk/SurfaceNormalChunk.js\"), exports);\n\n__exportStar(__webpack_require__(/*! ./TilingFBMChunk */ \"./lib/chunk/TilingFBMChunk.js\"), exports);\n\n__exportStar(__webpack_require__(/*! ./WavyAnimationChunk */ \"./lib/chunk/WavyAnimationChunk.js\"), exports);\n\n//# sourceURL=webpack://threejs-shader-materials/./lib/chunk/index.js?");

/***/ }),

/***/ "./lib/contour/ContourMaterial.frag.glsl.js":
/*!**************************************************!*\
  !*** ./lib/contour/ContourMaterial.frag.glsl.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n/**\n * 等高線状にテクスチャをマッピングするシェーダー\n */\n\nexports[\"default\"] = () => {\n  // language=GLSL\n  return `\n#define PHONG\n\n#include <mesh_phong_uniform>\nvarying vec2 uvPosition;\n#include <mesh_position_varying>\n\nuniform float bottom;\nuniform float top;\n\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n    #include <clipping_planes_fragment>\n  \n    #include <mesh_phong_diffuse_color>\n    \n    #include <logdepthbuf_fragment>\n\n    #include <__ShaderMaterial__map_fragment_begin_chunk>\n    #ifdef USE_MAP\n      float mapY = ( meshPosition.y - bottom ) / ( top - bottom );\n      vec4 texelColor = texture2D( map, vec2(0.5, mapY) );\n      texelColor = mapTexelToLinear( texelColor );\n      diffuseColor *= texelColor;\n    #endif\n    #include <color_fragment>\n    #include <mesh_phong_switching_alpha_map>\n    \n    #include <alphatest_fragment>\n    #include <specularmap_fragment>\n    #include <normal_fragment_begin>\n    #include <normal_fragment_maps>\n    #include <emissivemap_fragment>\n    \n    // accumulation\n    #include <lights_phong_fragment>\n    #include <lights_fragment_begin>\n    #include <lights_fragment_maps>\n    #include <lights_fragment_end>\n    \n    // modulation\n    #include <aomap_fragment>\n    vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n    #include <envmap_fragment>\n    gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n    #include <tonemapping_fragment>\n    #include <encodings_fragment>\n    #include <fog_fragment>\n    #include <premultiplied_alpha_fragment>\n    #include <dithering_fragment>\n}`;\n};\n\n//# sourceURL=webpack://threejs-shader-materials/./lib/contour/ContourMaterial.frag.glsl.js?");

/***/ }),

/***/ "./lib/contour/ContourMaterial.js":
/*!****************************************!*\
  !*** ./lib/contour/ContourMaterial.js ***!
  \****************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.ContourMaterial = void 0;\n\nconst three_1 = __webpack_require__(/*! three */ \"./node_modules/three/build/three.module.js\");\n\nconst ShaderPhongMaterial_1 = __webpack_require__(/*! ../ShaderPhongMaterial */ \"./lib/ShaderPhongMaterial.js\");\n\nconst ContourMaterial_frag_glsl_1 = __importDefault(__webpack_require__(/*! ./ContourMaterial.frag.glsl */ \"./lib/contour/ContourMaterial.frag.glsl.js\"));\n\nconst ShaderPhongMaterial_vert_glsl_1 = __importDefault(__webpack_require__(/*! ../ShaderPhongMaterial.vert.glsl */ \"./lib/ShaderPhongMaterial.vert.glsl.js\"));\n/**\n * テクスチャを等高線状にマップするマテリアル。\n * マッピング以外の機能はMeshPhongMaterialに準じる。\n */\n\n\nclass ContourMaterial extends ShaderPhongMaterial_1.ShaderPhongMaterial {\n  constructor(parameters) {\n    super((0, ShaderPhongMaterial_vert_glsl_1.default)(), (0, ContourMaterial_frag_glsl_1.default)(), parameters);\n  }\n\n  get map() {\n    return this._map;\n  }\n\n  loadMap(url, geo) {\n    this._map = new three_1.TextureLoader().load(url, texture => {\n      if (this.uniforms && this.uniforms.map) {\n        this.uniforms.map.value = texture;\n      }\n    });\n    geo.computeBoundingBox();\n    this.uniforms.top.value = geo.boundingBox.max.y;\n    this.uniforms.bottom.value = geo.boundingBox.min.y;\n  }\n\n  initDefines() {\n    super.initDefines();\n    this.defines.USE_MESH_POSITION = true;\n  }\n\n  initUniforms() {\n    this.uniforms = three_1.UniformsUtils.merge([ShaderPhongMaterial_1.ShaderPhongMaterial.getBasicUniforms(), {\n      top: {\n        value: 1.0\n      },\n      bottom: {\n        value: -1.0\n      }\n    }]);\n  }\n\n  initDefaultSetting(parameters) {\n    super.initDefaultSetting(parameters);\n\n    if (parameters.transparent == null) {\n      this.transparent = true;\n    } else {\n      this.transparent = parameters.transparent;\n    }\n\n    if (this.transparent && parameters.alphaTest == null) {\n      this.alphaTest = 0.5;\n    }\n\n    if (parameters.side == null) {\n      this.side = three_1.DoubleSide;\n    } else {\n      this.side = parameters.side;\n    }\n  }\n\n}\n\nexports.ContourMaterial = ContourMaterial;\n\n//# sourceURL=webpack://threejs-shader-materials/./lib/contour/ContourMaterial.js?");

/***/ }),

/***/ "./lib/crossGrid/CrossGridMaterial.frag.glsl.js":
/*!******************************************************!*\
  !*** ./lib/crossGrid/CrossGridMaterial.frag.glsl.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/**\n * 十字のラインでグリッドを分割するシェーダー\n */\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nexports[\"default\"] = () => {\n  // language=GLSL\n  return `\n#define PHONG\n\n#include <mesh_phong_uniform>\nvarying vec2 uvPosition;\n#include <mesh_position_varying>\n\n//user settings\n#include <time_animation_uniform_chunk>\n#include <wavy_animation_uniform_chunk>\n#include <repeat_pattern_uniform_chunk>\n#include <mask_map_uniform_chunk>\n#include <reversible_uniform_chunk>\nuniform float gridWeight;\nuniform float radius;\n\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n    #include <clipping_planes_fragment>\n  \n    #include <mesh_phong_diffuse_color>\n    \n    #include <logdepthbuf_fragment>\n    #include <__ShaderMaterial__map_fragment_begin_chunk>\n    #include <map_fragment>\n    #include <color_fragment>\n\n    #include <repeat_pattern_fragment_chunk>    \n    vec2 localPos = mod(uv, 1.0) - 0.5;\n    vec2 id = uv - localPos;\n    #include <wavy_animation_fragment_chunk>\n\n    #include <mask_map_fragment_chunk>\n    float w = gridWeight;\n    w = clamp( w, 0.0, 1.0);\n    \n    float margin = clamp ( w * 0.33, 0.00, 0.05 );\n    \n    //十字を描画\n    float gridLine;\n    gridLine  = smoothstep ( -w-margin, -w, localPos.x );\n    gridLine -= smoothstep ( w, w+margin, localPos.x );\n    gridLine += smoothstep ( -w-margin, -w, localPos.y );\n    gridLine -= smoothstep ( w, w+margin, localPos.y );\n    gridLine  = clamp( gridLine, 0.0, 1.0 ); \n\n    //半径でマスク\n    float r = radius - (1.0-mask);\n    gridLine -= smoothstep( r, r+margin, localPos.x);\n    gridLine -= smoothstep( -r, -r-margin, localPos.x);\n    gridLine -= smoothstep( r, r+margin, localPos.y);\n    gridLine -= smoothstep( -r, -r-margin, localPos.y);\n    gridLine = clamp( gridLine, 0.0, 1.0 );\n    \n    gridLine = isReversed\n        ? 1.0 - gridLine\n        : gridLine;\n    diffuseColor.a *= gridLine;\n\n    #include <mesh_phong_switching_alpha_map>\n    \n    #include <alphatest_fragment>\n    #include <specularmap_fragment>\n    #include <normal_fragment_begin>\n    #include <normal_fragment_maps>\n    #include <emissivemap_fragment>\n    \n    // accumulation\n    #include <lights_phong_fragment>\n    #include <lights_fragment_begin>\n    #include <lights_fragment_maps>\n    #include <lights_fragment_end>\n    \n    // modulation\n    #include <aomap_fragment>\n    vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n    #include <envmap_fragment>\n    gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n    #include <tonemapping_fragment>\n    #include <encodings_fragment>\n    #include <fog_fragment>\n    #include <premultiplied_alpha_fragment>\n    #include <dithering_fragment>\n}`;\n};\n\n//# sourceURL=webpack://threejs-shader-materials/./lib/crossGrid/CrossGridMaterial.frag.glsl.js?");

/***/ }),

/***/ "./lib/crossGrid/CrossGridMaterial.js":
/*!********************************************!*\
  !*** ./lib/crossGrid/CrossGridMaterial.js ***!
  \********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.CrossGridMaterial = void 0;\n\nconst three_1 = __webpack_require__(/*! three */ \"./node_modules/three/build/three.module.js\");\n\nconst CrossGridMaterial_frag_glsl_1 = __importDefault(__webpack_require__(/*! ./CrossGridMaterial.frag.glsl */ \"./lib/crossGrid/CrossGridMaterial.frag.glsl.js\"));\n\nconst ShaderPhongMaterial_vert_glsl_1 = __importDefault(__webpack_require__(/*! ../ShaderPhongMaterial.vert.glsl */ \"./lib/ShaderPhongMaterial.vert.glsl.js\"));\n\nconst WavyGridMaterial_1 = __webpack_require__(/*! ../WavyGridMaterial */ \"./lib/WavyGridMaterial.js\");\n/**\n * 十字線を正方形グリッドの中心に描画するマテリアル。\n */\n\n\nclass CrossGridMaterial extends WavyGridMaterial_1.WavyGridMaterial {\n  /**\n   * グリッド線の太さ\n   * 0.0で線なし、0.5でグリッド面なしになる。\n   */\n  get gridWeight() {\n    return this.uniforms.gridWeight.value;\n  }\n\n  set gridWeight(value) {\n    this.uniforms.gridWeight.value = value;\n  }\n\n  get radius() {\n    return this.uniforms.radius.value;\n  }\n\n  set radius(value) {\n    this.uniforms.radius.value = value;\n  }\n\n  constructor(parameters) {\n    super((0, ShaderPhongMaterial_vert_glsl_1.default)(), (0, CrossGridMaterial_frag_glsl_1.default)(), parameters);\n  }\n\n  initUniforms() {\n    this.uniforms = three_1.UniformsUtils.merge([WavyGridMaterial_1.WavyGridMaterial.getBasicUniforms(), {\n      gridWeight: {\n        value: 0.03\n      },\n      radius: {\n        value: 0.15\n      }\n    }]);\n  }\n\n}\n\nexports.CrossGridMaterial = CrossGridMaterial;\n\n//# sourceURL=webpack://threejs-shader-materials/./lib/crossGrid/CrossGridMaterial.js?");

/***/ }),

/***/ "./lib/expansion/ExpansionMaterial.js":
/*!********************************************!*\
  !*** ./lib/expansion/ExpansionMaterial.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.ExpansionMaterial = void 0;\n\nconst ShaderPhongMaterial_1 = __webpack_require__(/*! ../ShaderPhongMaterial */ \"./lib/ShaderPhongMaterial.js\");\n\nclass ExpansionMaterial extends ShaderPhongMaterial_1.ShaderPhongMaterial {\n  get expansionStrength() {\n    return this.uniforms.expansionStrength.value;\n  }\n\n  set expansionStrength(value) {\n    this.uniforms.expansionStrength.value = value;\n  }\n\n  constructor(parameters) {\n    super(null, null, parameters);\n  }\n\n  initDefines() {\n    super.initDefines();\n    this.defines.USE_EXPANSION = true;\n  }\n\n}\n\nexports.ExpansionMaterial = ExpansionMaterial;\n\n//# sourceURL=webpack://threejs-shader-materials/./lib/expansion/ExpansionMaterial.js?");

/***/ }),

/***/ "./lib/expansionDissolve/ExpansionDissolveMaterial.frag.glsl.js":
/*!**********************************************************************!*\
  !*** ./lib/expansionDissolve/ExpansionDissolveMaterial.frag.glsl.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n/**\n * メッシュが膨張しながら消えるエフェクト\n */\n\nexports[\"default\"] = () => {\n  // language=GLSL\n  return `\n#define PHONG\n\n#include <mesh_phong_uniform>\nvarying vec2 uvPosition;\n#include <mesh_position_varying>\n\nvarying float vFbm;\nuniform float progress;\nuniform vec3 dissolveColor;\nuniform vec3 dissolveOutColor;\n\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n    #include <clipping_planes_fragment>\n  \n    #include <mesh_phong_diffuse_color>\n    \n    #include <logdepthbuf_fragment>\n    #include <__ShaderMaterial__map_fragment_begin_chunk>\n    #include <map_fragment>\n    #include <color_fragment>\n    \n    diffuseColor.rgb += dissolveColor.rgb * sin(progress*PI);\n    diffuseColor.rgb = mix (diffuseColor.rgb, dissolveOutColor.rgb, vFbm );\n    diffuseColor.a -= vFbm;\n    \n    #include <mesh_phong_switching_alpha_map>\n    \n    #include <alphatest_fragment>\n    #include <specularmap_fragment>\n    #include <normal_fragment_begin>\n    #include <normal_fragment_maps>\n    #include <emissivemap_fragment>\n    \n    // accumulation\n    #include <lights_phong_fragment>\n    #include <lights_fragment_begin>\n    #include <lights_fragment_maps>\n    #include <lights_fragment_end>\n    \n    // modulation\n    #include <aomap_fragment>\n    vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n    #include <envmap_fragment>\n    gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n    #include <tonemapping_fragment>\n    #include <encodings_fragment>\n    #include <fog_fragment>\n    #include <premultiplied_alpha_fragment>\n    #include <dithering_fragment>\n}`;\n};\n\n//# sourceURL=webpack://threejs-shader-materials/./lib/expansionDissolve/ExpansionDissolveMaterial.frag.glsl.js?");

/***/ }),

/***/ "./lib/expansionDissolve/ExpansionDissolveMaterial.js":
/*!************************************************************!*\
  !*** ./lib/expansionDissolve/ExpansionDissolveMaterial.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.ExpansionDissolveMaterial = void 0;\n\nconst raf_ticker_1 = __webpack_require__(/*! raf-ticker */ \"./node_modules/raf-ticker/esm/index.js\");\n\nconst three_1 = __webpack_require__(/*! three */ \"./node_modules/three/build/three.module.js\");\n\nconst index_1 = __webpack_require__(/*! ../index */ \"./lib/index.js\");\n\nconst ExpansionDissolveMaterial_frag_glsl_1 = __importDefault(__webpack_require__(/*! ./ExpansionDissolveMaterial.frag.glsl */ \"./lib/expansionDissolve/ExpansionDissolveMaterial.frag.glsl.js\"));\n\nconst ExpansionDissolveMaterial_vert_glsl_1 = __importDefault(__webpack_require__(/*! ./ExpansionDissolveMaterial.vert.glsl */ \"./lib/expansionDissolve/ExpansionDissolveMaterial.vert.glsl.js\"));\n/**\n * FBMノイズによるジオメトリの膨張でディゾルブを行うマテリアル。\n * 爆発しながら消滅するような表現になる。\n * 膨張の進行度合いはprogressで制御する。\n */\n\n\nclass ExpansionDissolveMaterial extends index_1.ShaderPhongMaterial {\n  /**\n   *\n   * @param parameters\n   */\n  constructor(parameters) {\n    super((0, ExpansionDissolveMaterial_vert_glsl_1.default)(), (0, ExpansionDissolveMaterial_frag_glsl_1.default)(), parameters); // IAnimatable //\n\n    this.speed = -0.5;\n    /*\n     * IAnimatable implements\n     */\n\n    this.animationListener = e => {\n      this.addTime(e.delta / 1000);\n    };\n\n    this.isAnimate = this.isAnimate;\n  }\n\n  addTime(delta) {\n    if (this.isAnimate) {\n      index_1.AnimationChunk.addTime(this, delta);\n    }\n  }\n\n  get isAnimate() {\n    return this.uniforms.isAnimate.value;\n  }\n\n  set isAnimate(value) {\n    this.uniforms.isAnimate.value = value;\n\n    if (this.isAnimate) {\n      this.startAnimation();\n    } else {\n      this.stopAnimation();\n    }\n  } // ITiledFBM //\n\n\n  get tiles() {\n    return this.uniforms.tiles.value;\n  }\n\n  set tiles(value) {\n    this.uniforms.tiles.value = value;\n  }\n\n  get hashLoop() {\n    return this.uniforms.hashLoop.value;\n  }\n\n  set hashLoop(value) {\n    this.uniforms.hashLoop.value = value;\n  }\n\n  get amp() {\n    return this.uniforms.amp.value;\n  }\n\n  set amp(value) {\n    this.uniforms.amp.value = value;\n  }\n\n  get scaleMax() {\n    return this.uniforms.scaleMax.value;\n  }\n\n  set scaleMax(value) {\n    this.uniforms.scaleMax.value = value;\n  }\n\n  get time() {\n    return this.uniforms.time.value;\n  }\n\n  set time(value) {\n    this.uniforms.time.value = value;\n  }\n\n  get progress() {\n    return this.uniforms.progress.value;\n  }\n\n  set progress(value) {\n    this.uniforms.progress.value = value;\n  }\n\n  get dissolveColor() {\n    return this.uniforms.dissolveColor.value;\n  }\n\n  set dissolveColor(value) {\n    this.uniforms.dissolveColor.value = value;\n  }\n\n  get dissolveOutColor() {\n    return this.uniforms.dissolveOutColor.value;\n  }\n\n  set dissolveOutColor(value) {\n    this.uniforms.dissolveOutColor.value = value;\n  }\n\n  initUniforms() {\n    this.uniforms = three_1.UniformsUtils.merge([index_1.ShaderPhongMaterial.getBasicUniforms(), index_1.TilingFBMChunk.getUniform(), index_1.AnimationChunk.getUniform(), {\n      scaleMax: {\n        value: 20.0\n      },\n      progress: {\n        value: 0.0\n      },\n      dissolveColor: {\n        value: new three_1.Color(1.0, 1.0, 1.0)\n      },\n      dissolveOutColor: {\n        value: new three_1.Color(0.0, 0.0, 0.0)\n      }\n    }]);\n  }\n\n  initChunks() {\n    super.initChunks();\n    index_1.TilingFBMChunk.registerChunk();\n  }\n\n  initDefines() {\n    super.initDefines();\n    this.defines = Object.assign(this.defines, index_1.TilingFBMChunk.getDefines());\n    this.defines.USE_EXPANSION = true;\n  }\n\n  startAnimation() {\n    raf_ticker_1.RAFTicker.on(raf_ticker_1.RAFTickerEventType.onBeforeTick, this.animationListener);\n  }\n\n  stopAnimation() {\n    raf_ticker_1.RAFTicker.off(raf_ticker_1.RAFTickerEventType.onBeforeTick, this.animationListener);\n  }\n\n}\n\nexports.ExpansionDissolveMaterial = ExpansionDissolveMaterial;\n\n//# sourceURL=webpack://threejs-shader-materials/./lib/expansionDissolve/ExpansionDissolveMaterial.js?");

/***/ }),

/***/ "./lib/expansionDissolve/ExpansionDissolveMaterial.vert.glsl.js":
/*!**********************************************************************!*\
  !*** ./lib/expansionDissolve/ExpansionDissolveMaterial.vert.glsl.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n/**\n * https://github.com/mrdoob/three.js/blob/dev/src/renderers/shaders/ShaderLib/meshphong_vert.glsl.js\n */\n\nexports[\"default\"] = () => {\n  // language=GLSL\n  return `\n#define PHONG\n\nvarying vec3 vViewPosition;\nvarying vec2 uvPosition;\n#include <mesh_position_varying>\n#include <surface_normal_varying_chunk>\n#include <__expansion_uniform_chunk>\n#include <tiling_fbm_uniform_chunk>\nuniform float scaleMax;\nuniform float time;\nuniform float progress;\nvarying float vFbm;\n\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\n#include <tiling_fbm_function_chunk>\n\nvoid main() {\n    #include <mesh_position_vertex>\n    uvPosition = uv;\n\n    #include <uv_vertex>\n    #include <uv2_vertex>\n    #include <color_vertex>\n    \n    #include <beginnormal_vertex>\n    #include <morphnormal_vertex>\n    #include <skinbase_vertex>\n    #include <skinnormal_vertex>\n    #include <defaultnormal_vertex>\n    #include <normal_vertex>\n    \n    #include <surface_normal_vertex_chunk>\n\n    #include <begin_vertex>\n    \n    vec2 uvFBM = uvPosition;\n    uvFBM.x = (\n         uvFBM.y > 0.99 \n      || uvFBM.y < 0.01\n    ) \n      ? 0.5\n      : uvFBM.x;\n        \n    vec2 q = vec2(0.0);\n    q.x = fbm( uvFBM + vec2(1.7,9.2) +.16  * time );\n    q.y = fbm( uvFBM + vec2(8.3,2.8) +.356 * time );\n\n    float bottom = clamp(progress-0.5, 0.0, 0.5) *2.0;\n    \n    vec2 pos = uvFBM * tiles;\n    float noise = fbm( pos + q ) * progress;\n    vFbm = clamp( noise + bottom, 0.0, 1.0);\n    vec3 vExpansion = normal * vFbm * scaleMax;\n    transformed += vExpansion;\n    \n    #include <morphtarget_vertex>\n    #include <skinning_vertex>\n    #include <displacementmap_vertex>\n    #include <project_vertex>\n    #include <logdepthbuf_vertex>\n    #include <clipping_planes_vertex>\n    \n    vViewPosition = - mvPosition.xyz;\n\n    #include <worldpos_vertex>\n    #include <envmap_vertex>\n    #include <shadowmap_vertex>\n    #include <fog_vertex>\n\n}\n`;\n};\n\n//# sourceURL=webpack://threejs-shader-materials/./lib/expansionDissolve/ExpansionDissolveMaterial.vert.glsl.js?");

/***/ }),

/***/ "./lib/fbmDissolve/FBMDissolveMaterial.frag.glsl.js":
/*!**********************************************************!*\
  !*** ./lib/fbmDissolve/FBMDissolveMaterial.frag.glsl.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nexports[\"default\"] = () => {\n  // language=GLSL\n  return `\n#define PHONG\n\n#include <mesh_phong_uniform>\nvarying vec2 uvPosition;\n#include <mesh_position_varying>\n\n#include <tiling_fbm_uniform_chunk>\nuniform float progress;\nuniform vec3 edgeColor;\nuniform float edgeWeight;\n\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\n#include <tiling_fbm_function_chunk>\n\nvoid main()\n{\n    #include <clipping_planes_fragment>\n  \n    #include <mesh_phong_diffuse_color>\n    \n    #include <logdepthbuf_fragment>\n    #include <__ShaderMaterial__map_fragment_begin_chunk>\n    #include <map_fragment>\n    #include <color_fragment>\n    \n    vec2 uv = uvPosition * tiles;\n\n    float fbmVal = fbm(uv);\n    float bri = 1.0 - smoothstep( progress-0.01, progress, fbmVal );\n\n    float edge = \n          smoothstep( progress-edgeWeight, progress, fbmVal )\n        - smoothstep( progress, progress+edgeWeight, fbmVal );\n    edge = clamp( edge, 0.0, 1.0 );\n\n    vec3 col = diffuseColor.rgb;\n    col += edgeColor * edge;\n\n    diffuseColor.rgb = col;\n    diffuseColor.a *= bri;\n    \n    #include <mesh_phong_switching_alpha_map>\n    \n    #include <alphatest_fragment>\n    #include <specularmap_fragment>\n    #include <normal_fragment_begin>\n    #include <normal_fragment_maps>\n    #include <emissivemap_fragment>\n    \n    // accumulation\n    #include <lights_phong_fragment>\n    #include <lights_fragment_begin>\n    #include <lights_fragment_maps>\n    #include <lights_fragment_end>\n    \n    // modulation\n    #include <aomap_fragment>\n    vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n    #include <envmap_fragment>\n    gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n    #include <tonemapping_fragment>\n    #include <encodings_fragment>\n    #include <fog_fragment>\n    #include <premultiplied_alpha_fragment>\n    #include <dithering_fragment>\n}`;\n};\n\n//# sourceURL=webpack://threejs-shader-materials/./lib/fbmDissolve/FBMDissolveMaterial.frag.glsl.js?");

/***/ }),

/***/ "./lib/fbmDissolve/FBMDissolveMaterial.js":
/*!************************************************!*\
  !*** ./lib/fbmDissolve/FBMDissolveMaterial.js ***!
  \************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.FBMDissolveMaterial = void 0;\n\nconst three_1 = __webpack_require__(/*! three */ \"./node_modules/three/build/three.module.js\");\n\nconst three_2 = __webpack_require__(/*! three */ \"./node_modules/three/build/three.module.js\");\n\nconst ShaderPhongMaterial_1 = __webpack_require__(/*! ../ShaderPhongMaterial */ \"./lib/ShaderPhongMaterial.js\");\n\nconst TilingFBMChunk_1 = __webpack_require__(/*! ../chunk/TilingFBMChunk */ \"./lib/chunk/TilingFBMChunk.js\");\n\nconst ShaderPhongMaterial_vert_glsl_1 = __importDefault(__webpack_require__(/*! ../ShaderPhongMaterial.vert.glsl */ \"./lib/ShaderPhongMaterial.vert.glsl.js\"));\n\nconst FBMDissolveMaterial_frag_glsl_1 = __importDefault(__webpack_require__(/*! ./FBMDissolveMaterial.frag.glsl */ \"./lib/fbmDissolve/FBMDissolveMaterial.frag.glsl.js\"));\n\nclass FBMDissolveMaterial extends ShaderPhongMaterial_1.ShaderPhongMaterial {\n  get tiles() {\n    return this.uniforms.tiles.value;\n  }\n\n  set tiles(value) {\n    this.uniforms.tiles.value = value;\n  }\n\n  get hashLoop() {\n    return this.uniforms.hashLoop.value;\n  }\n\n  set hashLoop(value) {\n    this.uniforms.hashLoop.value = value;\n  }\n\n  get amp() {\n    return this.uniforms.amp.value;\n  }\n\n  set amp(value) {\n    this.uniforms.amp.value = value;\n  }\n\n  get progress() {\n    return this.uniforms.progress.value;\n  }\n\n  set progress(value) {\n    this.uniforms.progress.value = value;\n  }\n\n  get edgeWeight() {\n    return this.uniforms.edgeWeight.value;\n  }\n\n  set edgeWeight(value) {\n    this.uniforms.edgeWeight.value = value;\n  }\n\n  get edgeColor() {\n    return this.uniforms.edgeColor.value;\n  }\n\n  set edgeColor(value) {\n    this.uniforms.edgeColor.value = value;\n  }\n  /**\n   *\n   * @param parameters\n   */\n\n\n  constructor(parameters) {\n    super((0, ShaderPhongMaterial_vert_glsl_1.default)(), (0, FBMDissolveMaterial_frag_glsl_1.default)(), parameters);\n  }\n\n  initUniforms() {\n    this.uniforms = three_1.UniformsUtils.merge([ShaderPhongMaterial_1.ShaderPhongMaterial.getBasicUniforms(), TilingFBMChunk_1.TilingFBMChunk.getUniform(), {\n      progress: {\n        value: 0.0\n      },\n      edgeWeight: {\n        value: 0.1\n      },\n      edgeColor: {\n        value: new three_2.Color(1.0, 1.0, 1.0)\n      }\n    }]);\n  }\n\n  initChunks() {\n    super.initChunks();\n    TilingFBMChunk_1.TilingFBMChunk.registerChunk();\n  }\n  /**\n   * definesを初期化する。\n   */\n\n\n  initDefines() {\n    super.initDefines();\n    this.defines = Object.assign({}, TilingFBMChunk_1.TilingFBMChunk.getDefines(), this.defines);\n  }\n\n  initDefaultSetting(parameters) {\n    super.initDefaultSetting(parameters);\n\n    if (parameters.transparent == null) {\n      this.transparent = true;\n    } else {\n      this.transparent = parameters.transparent;\n    }\n  }\n\n}\n\nexports.FBMDissolveMaterial = FBMDissolveMaterial;\n\n//# sourceURL=webpack://threejs-shader-materials/./lib/fbmDissolve/FBMDissolveMaterial.js?");

/***/ }),

/***/ "./lib/fbmFire/FBMFireMaterial.frag.glsl.js":
/*!**************************************************!*\
  !*** ./lib/fbmFire/FBMFireMaterial.frag.glsl.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nexports[\"default\"] = () => {\n  // language=GLSL\n  return `\n#define PHONG\n\n#include <mesh_phong_uniform>\nvarying vec2 uvPosition;\n#include <mesh_position_varying>\n\n#include <tiling_fbm_uniform_chunk>\n#include <time_animation_uniform_chunk>\n\nuniform float strength;\nuniform float bloom;\n\n#include <surface_normal_varying_chunk>\nuniform float rimStrength;\nuniform float rimPow;\n\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\n#include <tiling_fbm_function_chunk>\n\nvoid main()\n{\n    #include <clipping_planes_fragment>\n  \n    #include <mesh_phong_diffuse_color>\n    \n    #include <logdepthbuf_fragment>\n    #include <__ShaderMaterial__map_fragment_begin_chunk>\n    #include <map_fragment>\n    #include <color_fragment>\n    \n    vec2 uv = uvPosition;\n    float uVy = uv.y;\n    uv *= tiles;\n\n    vec2 q = vec2(0.0);\n    q.x = fbm( uv + vec2(1.7,9.2) +.16  * time );\n    q.y = fbm( uv + vec2(8.3,2.8) +.356 * time );\n\n    float fbmVal = fbm(uv + q);\n    fbmVal += 1.0-(uVy * 1.0 );\n    fbmVal *= 1.0-uVy;\n    \n    vec3 viewDir = normalize(vViewPosition);    \n    float rimGlow = 1.0 - max(0.0, dot(surfaceNormal, viewDir));\n    rimGlow = pow(rimGlow, rimPow) * rimStrength;\n    rimGlow = clamp( rimGlow, 0.0, 1.0);\n    fbmVal *= 1.0-rimGlow;\n    \n    vec3 color = diffuseColor.rgb;\n    \n    float st = 1.0 - strength;\n    float bri = smoothstep( max( st - 0.4, 0.0 ), st, fbmVal );\n    \n    float blm = 1.0 - bloom;\n    float bloomVal = smoothstep( blm - 0.4, blm, fbmVal );\n    color += bloomVal;\n\n    diffuseColor.rgb = color;\n    diffuseColor.a *= bri;\n    \n    #include <mesh_phong_switching_alpha_map>\n    \n    #include <alphatest_fragment>\n    #include <specularmap_fragment>\n    #include <normal_fragment_begin>\n    #include <normal_fragment_maps>\n    #include <emissivemap_fragment>\n    \n    // accumulation\n    #include <lights_phong_fragment>\n    #include <lights_fragment_begin>\n    #include <lights_fragment_maps>\n    #include <lights_fragment_end>\n    \n    // modulation\n    #include <aomap_fragment>\n    vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n    #include <envmap_fragment>\n    gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n    #include <tonemapping_fragment>\n    #include <encodings_fragment>\n    #include <fog_fragment>\n    #include <premultiplied_alpha_fragment>\n    #include <dithering_fragment>\n}`;\n};\n\n//# sourceURL=webpack://threejs-shader-materials/./lib/fbmFire/FBMFireMaterial.frag.glsl.js?");

/***/ }),

/***/ "./lib/fbmFire/FBMFireMaterial.js":
/*!****************************************!*\
  !*** ./lib/fbmFire/FBMFireMaterial.js ***!
  \****************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.FBMFireMaterial = void 0;\n\nconst raf_ticker_1 = __webpack_require__(/*! raf-ticker */ \"./node_modules/raf-ticker/esm/index.js\");\n\nconst three_1 = __webpack_require__(/*! three */ \"./node_modules/three/build/three.module.js\");\n\nconst AnimationChunk_1 = __webpack_require__(/*! ../chunk/AnimationChunk */ \"./lib/chunk/AnimationChunk.js\");\n\nconst TilingFBMChunk_1 = __webpack_require__(/*! ../chunk/TilingFBMChunk */ \"./lib/chunk/TilingFBMChunk.js\");\n\nconst ShaderPhongMaterial_1 = __webpack_require__(/*! ../ShaderPhongMaterial */ \"./lib/ShaderPhongMaterial.js\");\n\nconst ShaderPhongMaterial_vert_glsl_1 = __importDefault(__webpack_require__(/*! ../ShaderPhongMaterial.vert.glsl */ \"./lib/ShaderPhongMaterial.vert.glsl.js\"));\n\nconst FBMFireMaterial_frag_glsl_1 = __importDefault(__webpack_require__(/*! ./FBMFireMaterial.frag.glsl */ \"./lib/fbmFire/FBMFireMaterial.frag.glsl.js\"));\n\nclass FBMFireMaterial extends ShaderPhongMaterial_1.ShaderPhongMaterial {\n  /**\n   *\n   * @param parameters\n   */\n  constructor(parameters) {\n    super((0, ShaderPhongMaterial_vert_glsl_1.default)(), (0, FBMFireMaterial_frag_glsl_1.default)(), parameters);\n    /**\n     * 波の速度\n     * 0.5にすると1の半分の速度になる。\n     * マイナスを指定すると、波の進行方向が反転する。\n     */\n\n    this.speed = -0.5;\n    /*\n     * IAnimatable implements\n     */\n\n    this.animationListener = e => {\n      this.addTime(e.delta / 1000);\n    };\n\n    this.isAnimate = this.isAnimate; //reset and start animation\n  }\n\n  get tiles() {\n    return this.uniforms.tiles.value;\n  }\n\n  set tiles(value) {\n    this.uniforms.tiles.value = value;\n  }\n\n  get hashLoop() {\n    return this.uniforms.hashLoop.value;\n  }\n\n  set hashLoop(value) {\n    this.uniforms.hashLoop.value = value;\n  }\n\n  get amp() {\n    return this.uniforms.amp.value;\n  }\n\n  set amp(value) {\n    this.uniforms.amp.value = value;\n  }\n  /*\n   * IAnimatable implements\n   */\n\n\n  addTime(delta) {\n    AnimationChunk_1.AnimationChunk.addTime(this, delta);\n  }\n  /**\n   * アニメーションを行うか否か。\n   */\n\n\n  get isAnimate() {\n    return this.uniforms.isAnimate.value;\n  }\n\n  set isAnimate(value) {\n    this.uniforms.isAnimate.value = value;\n\n    if (this.isAnimate) {\n      this.startAnimation();\n    } else {\n      this.stopAnimation();\n    }\n  }\n\n  get strength() {\n    return this.uniforms.strength.value;\n  }\n\n  set strength(value) {\n    this.uniforms.strength.value = value;\n  }\n\n  get bloom() {\n    return this.uniforms.bloom.value;\n  }\n\n  set bloom(value) {\n    this.uniforms.bloom.value = value;\n  }\n\n  get transformSpeed() {\n    return this.uniforms.transformSpeed.value;\n  }\n\n  set transformSpeed(value) {\n    this.uniforms.transformSpeed.value = value;\n  }\n\n  get rimPow() {\n    return this.uniforms.rimPow.value;\n  }\n\n  set rimPow(value) {\n    this.uniforms.rimPow.value = value;\n  }\n\n  get rimStrength() {\n    return this.uniforms.rimStrength.value;\n  }\n\n  set rimStrength(value) {\n    this.uniforms.rimStrength.value = value;\n  }\n\n  initUniforms() {\n    this.uniforms = three_1.UniformsUtils.merge([ShaderPhongMaterial_1.ShaderPhongMaterial.getBasicUniforms(), TilingFBMChunk_1.TilingFBMChunk.getUniform(), AnimationChunk_1.AnimationChunk.getUniform(), {\n      strength: {\n        value: 0.45\n      },\n      bloom: {\n        value: 0.1\n      },\n      rimStrength: {\n        value: 1.0\n      },\n      rimPow: {\n        value: 1.0\n      }\n    }]);\n  }\n\n  initChunks() {\n    super.initChunks();\n    TilingFBMChunk_1.TilingFBMChunk.registerChunk();\n    AnimationChunk_1.AnimationChunk.registerChunk();\n  }\n\n  initDefines() {\n    super.initDefines();\n    this.defines = Object.assign({}, TilingFBMChunk_1.TilingFBMChunk.getDefines(), this.defines);\n    this.defines.USE_SURFACE_NORMAL = true;\n  }\n\n  initDefaultSetting(parameters) {\n    super.initDefaultSetting(parameters);\n\n    if (parameters.transparent == null) {\n      this.transparent = true;\n    } else {\n      this.transparent = parameters.transparent;\n    }\n  }\n\n  startAnimation() {\n    raf_ticker_1.RAFTicker.on(raf_ticker_1.RAFTickerEventType.onBeforeTick, this.animationListener);\n  }\n\n  stopAnimation() {\n    raf_ticker_1.RAFTicker.off(raf_ticker_1.RAFTickerEventType.onBeforeTick, this.animationListener);\n  }\n\n}\n\nexports.FBMFireMaterial = FBMFireMaterial;\n\n//# sourceURL=webpack://threejs-shader-materials/./lib/fbmFire/FBMFireMaterial.js?");

/***/ }),

/***/ "./lib/halftoneGrid/HalftoneGridMaterial.frag.glsl.js":
/*!************************************************************!*\
  !*** ./lib/halftoneGrid/HalftoneGridMaterial.frag.glsl.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n/**\n * ハーフトーンマテリアル\n */\n\nexports[\"default\"] = () => {\n  // language=GLSL\n  return `\n#define PHONG\n\n#include <mesh_phong_uniform>\nvarying vec2 uvPosition;\n#include <mesh_position_varying>\n\n//user settings\n\n#include <time_animation_uniform_chunk>\n#include <wavy_animation_uniform_chunk>\n#include <repeat_pattern_uniform_chunk>\n#include <mask_map_uniform_chunk>\n#include <reversible_uniform_chunk>\nuniform float radius;\n\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n    #include <clipping_planes_fragment>\n  \n    #include <mesh_phong_diffuse_color>\n    \n    #include <logdepthbuf_fragment>\n    #include <__ShaderMaterial__map_fragment_begin_chunk>\n    #include <map_fragment>\n    #include <color_fragment>\n\n    #include <repeat_pattern_fragment_chunk> \n    //\bhex angle\n    vec2 r = normalize(vec2(1.0, 1.73));\n    vec2 halfR = r * 0.5;\n\n    vec2 p1 = mod(uv, r) - halfR;\n    vec2 p2 = mod(uv - halfR, r) - halfR;\n\n    vec2 localPos = length(p1) < length(p2) ? p1 : p2;\n\n    vec2 id = uv - localPos;\n    #include <wavy_animation_fragment_chunk>\n\n    #include <mask_map_fragment_chunk>\n    float ln = length(localPos);\n    float current = 1.0 - ( ln * 4.0 / radius / mask );\n    current = clamp( current, 0.0, 1.0 );\n\n    float alpha = smoothstep ( 0.0, 0.1, current );\n    alpha = isReversed\n        ? 1.0 - alpha\n        : alpha;\n    \n    diffuseColor.a *= alpha;\n\n    #include <mesh_phong_switching_alpha_map>\n    \n    #include <alphatest_fragment>\n    #include <specularmap_fragment>\n    #include <normal_fragment_begin>\n    #include <normal_fragment_maps>\n    #include <emissivemap_fragment>\n    \n    // accumulation\n    #include <lights_phong_fragment>\n    #include <lights_fragment_begin>\n    #include <lights_fragment_maps>\n    #include <lights_fragment_end>\n    \n    // modulation\n    #include <aomap_fragment>\n    vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n    #include <envmap_fragment>\n    gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n    #include <tonemapping_fragment>\n    #include <encodings_fragment>\n    #include <fog_fragment>\n    #include <premultiplied_alpha_fragment>\n    #include <dithering_fragment>\n}`;\n};\n\n//# sourceURL=webpack://threejs-shader-materials/./lib/halftoneGrid/HalftoneGridMaterial.frag.glsl.js?");

/***/ }),

/***/ "./lib/halftoneGrid/HalftoneGridMaterial.js":
/*!**************************************************!*\
  !*** ./lib/halftoneGrid/HalftoneGridMaterial.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.HalftoneGridMaterial = void 0;\n\nconst three_1 = __webpack_require__(/*! three */ \"./node_modules/three/build/three.module.js\");\n\nconst HalftoneGridMaterial_frag_glsl_1 = __importDefault(__webpack_require__(/*! ./HalftoneGridMaterial.frag.glsl */ \"./lib/halftoneGrid/HalftoneGridMaterial.frag.glsl.js\"));\n\nconst ShaderPhongMaterial_vert_glsl_1 = __importDefault(__webpack_require__(/*! ../ShaderPhongMaterial.vert.glsl */ \"./lib/ShaderPhongMaterial.vert.glsl.js\"));\n\nconst WavyGridMaterial_1 = __webpack_require__(/*! ../WavyGridMaterial */ \"./lib/WavyGridMaterial.js\");\n/**\n * MaskMapをハーフトーン分解するマテリアル\n */\n\n\nclass HalftoneGridMaterial extends WavyGridMaterial_1.WavyGridMaterial {\n  get radius() {\n    return this.uniforms.radius.value;\n  }\n\n  set radius(value) {\n    this.uniforms.radius.value = value;\n  }\n\n  constructor(parameters) {\n    super((0, ShaderPhongMaterial_vert_glsl_1.default)(), (0, HalftoneGridMaterial_frag_glsl_1.default)(), parameters);\n  }\n\n  initUniforms() {\n    this.uniforms = three_1.UniformsUtils.merge([WavyGridMaterial_1.WavyGridMaterial.getBasicUniforms(), {\n      radius: {\n        value: 0.75\n      }\n    }]);\n  }\n\n}\n\nexports.HalftoneGridMaterial = HalftoneGridMaterial;\n\n//# sourceURL=webpack://threejs-shader-materials/./lib/halftoneGrid/HalftoneGridMaterial.js?");

/***/ }),

/***/ "./lib/hexDissolve/HexDissolveMaterial.frag.glsl.js":
/*!**********************************************************!*\
  !*** ./lib/hexDissolve/HexDissolveMaterial.frag.glsl.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n/**\n * 6角形グリッドでディゾルブを行うフラグメントシェーダー\n * {@link https://qiita.com/edo_m18/items/37d8773a5295bc6aba3d}\n */\n\nexports[\"default\"] = () => {\n  // language=GLSL\n  return `\n#define PHONG\n\n#include <mesh_phong_uniform>\nvarying vec2 uvPosition;\n#include <mesh_position_varying>\n\n//user settings\n#include <repeat_pattern_uniform_chunk>\n#include <mask_map_uniform_chunk>\n#include <reversible_uniform_chunk>\nuniform float progress;\nuniform float delay;\nuniform float gridWeight;\nuniform bool isAscending;\n\nuniform vec3 gridEmissive;\nuniform float gridEmissiveWeight;\n\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\n#include <hex_grid_function_chunk>\n\nfloat reverse( float val, bool isReversed){\n  return isReversed ? 1.0 - val : val;\n}\n\nvoid main() {\n    #include <clipping_planes_fragment>\n  \n    #include <mesh_phong_diffuse_color>\n    \n    #include <logdepthbuf_fragment>\n    #include <__ShaderMaterial__map_fragment_begin_chunk>\n    #include <map_fragment>\n    #include <color_fragment>\n\n    #include <repeat_pattern_fragment_chunk>    \n    vec4 hc = hexCoords( uv );\n    vec2 id = hc.zw;\n\n    #include <mask_map_fragment_chunk>\n  \n    float range = 1.0 - delay;\n    float rateY = isAscending \n      ? ( division-id.y ) / division\n      : id.y  / division;\n  \n    float currentProgress = progress - (rateY * delay);\n    currentProgress /= range;\n    currentProgress = clamp( currentProgress, 0.0, 1.0);\n  \n    float w = gridWeight + currentProgress / 2.0 + (1.0 - mask);\n    w = clamp( w, 0.0, 1.0);\n    float margin = clamp ( w * 0.33, 0.00, 0.02 );\n  \n    float gridLine = smoothstep(w, w + margin, hc.y);\n    gridLine =  reverse ( gridLine , isReversed);\n    diffuseColor.a *= gridLine ;\n    \n    float emmesiveWeight = currentProgress / 2.0 * gridEmissiveWeight;\n    emmesiveWeight =  reverse ( emmesiveWeight, isReversed );\n    float emissiveVal = smoothstep(emmesiveWeight, emmesiveWeight + margin, hc.y);\n    emissiveVal = 1.0 - emissiveVal;\n    diffuseColor.rgb += gridEmissive * emissiveVal;\n\n    #include <mesh_phong_switching_alpha_map>\n    \n    #include <alphatest_fragment>\n    #include <specularmap_fragment>\n    #include <normal_fragment_begin>\n    #include <normal_fragment_maps>\n    #include <emissivemap_fragment>\n    \n    // accumulation\n    #include <lights_phong_fragment>\n    #include <lights_fragment_begin>\n    #include <lights_fragment_maps>\n    #include <lights_fragment_end>\n    \n    // modulation\n    #include <aomap_fragment>\n    vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n    #include <envmap_fragment>\n    gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n    #include <tonemapping_fragment>\n    #include <encodings_fragment>\n    #include <fog_fragment>\n    #include <premultiplied_alpha_fragment>\n    #include <dithering_fragment>\n}`;\n};\n\n//# sourceURL=webpack://threejs-shader-materials/./lib/hexDissolve/HexDissolveMaterial.frag.glsl.js?");

/***/ }),

/***/ "./lib/hexDissolve/HexDissolveMaterial.js":
/*!************************************************!*\
  !*** ./lib/hexDissolve/HexDissolveMaterial.js ***!
  \************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.HexDissolveMaterial = void 0;\n\nconst three_1 = __webpack_require__(/*! three */ \"./node_modules/three/build/three.module.js\");\n\nconst HexDissolveMaterial_frag_glsl_1 = __importDefault(__webpack_require__(/*! ./HexDissolveMaterial.frag.glsl */ \"./lib/hexDissolve/HexDissolveMaterial.frag.glsl.js\"));\n\nconst index_1 = __webpack_require__(/*! ../index */ \"./lib/index.js\");\n\nconst GridMaterial_1 = __webpack_require__(/*! ../GridMaterial */ \"./lib/GridMaterial.js\");\n\nconst three_2 = __webpack_require__(/*! three */ \"./node_modules/three/build/three.module.js\");\n/**\n * 六角形グリッドマテリアル\n */\n\n\nclass HexDissolveMaterial extends GridMaterial_1.GridMaterial {\n  /**\n   * ディゾルブの進行度を指定する。\n   * 1.0でディゾルブ完了となる。\n   */\n  get progress() {\n    return this.uniforms.progress.value;\n  }\n\n  set progress(value) {\n    this.uniforms.progress.value = value;\n  }\n  /**\n   * ディゾルブの開始ずれを指定する。\n   * 最後にディゾルブが始まるグリッドが、progressのどの値で開始されるかを意味する。\n   * ex)\n   * delay = 0.8の時、最後のグリッドはprogress = 0.8 ~ 1.0でディゾルブする。\n   */\n\n\n  get delay() {\n    return this.uniforms.delay.value;\n  }\n\n  set delay(value) {\n    this.uniforms.delay.value = value;\n  }\n\n  get isAscending() {\n    return this.uniforms.isAscending.value;\n  }\n\n  set isAscending(value) {\n    this.uniforms.isAscending.value = value;\n  }\n  /**\n   * グリッド線の太さ\n   * 0.0で線なし、0.5でグリッド面なしになる。\n   */\n\n\n  get gridWeight() {\n    return this.uniforms.gridWeight.value;\n  }\n\n  set gridWeight(value) {\n    this.uniforms.gridWeight.value = value;\n  }\n\n  get gridEmissive() {\n    return this.uniforms.gridEmissive.value;\n  }\n\n  set gridEmissive(value) {\n    this.uniforms.gridEmissive.value = value;\n  }\n  /**\n   * ディゾルブ中に表示されるグローラインの太さ\n   * 数値はグリッド線の太さの倍率、2.0ならグローアウトラインはディゾルブラインの倍の太さになる。\n   *\n   * 注意 : isReversed = true かつgridEmissiveWeightが2.0以下の場合、グロー線が消えなくなる。\n   * 反転させる場合は、2.0以上を指定すること。\n   */\n\n\n  get gridEmissiveWeight() {\n    return this.uniforms.gridEmissiveWeight.value;\n  }\n\n  set gridEmissiveWeight(value) {\n    this.uniforms.gridEmissiveWeight.value = value;\n  }\n\n  constructor(parameters) {\n    super(null, (0, HexDissolveMaterial_frag_glsl_1.default)(), parameters);\n  }\n\n  initUniforms() {\n    this.uniforms = three_1.UniformsUtils.merge([GridMaterial_1.GridMaterial.getBasicUniforms(), {\n      progress: {\n        value: 0.0\n      },\n      delay: {\n        value: 0.8\n      },\n      gridWeight: {\n        value: 0.0\n      },\n      isAscending: {\n        value: true\n      },\n      gridEmissive: {\n        value: new three_2.Color(0x000000)\n      },\n      gridEmissiveWeight: {\n        value: 2.5\n      }\n    }]);\n  }\n\n  initChunks() {\n    super.initChunks();\n    index_1.HexGridChunk.registerChunk();\n  }\n\n}\n\nexports.HexDissolveMaterial = HexDissolveMaterial;\n\n//# sourceURL=webpack://threejs-shader-materials/./lib/hexDissolve/HexDissolveMaterial.js?");

/***/ }),

/***/ "./lib/hexGrid/HexGridMaterial.frag.glsl.js":
/*!**************************************************!*\
  !*** ./lib/hexGrid/HexGridMaterial.frag.glsl.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n/**\n * 6角形グリッドマテリアルのフラグメントシェーダー\n * {@link https://qiita.com/edo_m18/items/37d8773a5295bc6aba3d}\n */\n\nexports[\"default\"] = () => {\n  // language=GLSL\n  return `\n#define PHONG\n\n#include <mesh_phong_uniform>\nvarying vec2 uvPosition;\n#include <mesh_position_varying>\n\n//user settings\n#include <time_animation_uniform_chunk>\n#include <wavy_animation_uniform_chunk>\n#include <repeat_pattern_uniform_chunk>\n#include <mask_map_uniform_chunk>\n#include <reversible_uniform_chunk>\nuniform float gridWeight;\n\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\n#include <hex_grid_function_chunk>\n\nvoid main() {\n    #include <clipping_planes_fragment>\n  \n    #include <mesh_phong_diffuse_color>\n    \n    #include <logdepthbuf_fragment>\n    #include <__ShaderMaterial__map_fragment_begin_chunk>\n    #include <map_fragment>\n    #include <color_fragment>\n\n    #include <repeat_pattern_fragment_chunk>    \n    vec4 hc = hexCoords( uv );\n    vec2 id = hc.zw;\n    #include <wavy_animation_fragment_chunk>\n\n    #include <mask_map_fragment_chunk>\n    float w = gridWeight + (1.0-mask);\n    w = clamp( w, 0.0, 1.0);\n\n    float margin = clamp ( w * 0.33, 0.00, 0.02 );\n    float stepMax = w + margin;\n\n    float gridLine = smoothstep(w, stepMax, hc.y);\n    gridLine = isReversed\n        ? 1.0 - gridLine\n        : gridLine;\n    diffuseColor.a *= gridLine ;\n\n    #include <mesh_phong_switching_alpha_map>\n    \n    #include <alphatest_fragment>\n    #include <specularmap_fragment>\n    #include <normal_fragment_begin>\n    #include <normal_fragment_maps>\n    #include <emissivemap_fragment>\n    \n    // accumulation\n    #include <lights_phong_fragment>\n    #include <lights_fragment_begin>\n    #include <lights_fragment_maps>\n    #include <lights_fragment_end>\n    \n    // modulation\n    #include <aomap_fragment>\n    vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n    #include <envmap_fragment>\n    gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n    #include <tonemapping_fragment>\n    #include <encodings_fragment>\n    #include <fog_fragment>\n    #include <premultiplied_alpha_fragment>\n    #include <dithering_fragment>\n}`;\n};\n\n//# sourceURL=webpack://threejs-shader-materials/./lib/hexGrid/HexGridMaterial.frag.glsl.js?");

/***/ }),

/***/ "./lib/hexGrid/HexGridMaterial.js":
/*!****************************************!*\
  !*** ./lib/hexGrid/HexGridMaterial.js ***!
  \****************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.HexGridMaterial = void 0;\n\nconst three_1 = __webpack_require__(/*! three */ \"./node_modules/three/build/three.module.js\");\n\nconst WavyGridMaterial_1 = __webpack_require__(/*! ../WavyGridMaterial */ \"./lib/WavyGridMaterial.js\");\n\nconst HexGridMaterial_frag_glsl_1 = __importDefault(__webpack_require__(/*! ./HexGridMaterial.frag.glsl */ \"./lib/hexGrid/HexGridMaterial.frag.glsl.js\"));\n\nconst ShaderPhongMaterial_vert_glsl_1 = __importDefault(__webpack_require__(/*! ../ShaderPhongMaterial.vert.glsl */ \"./lib/ShaderPhongMaterial.vert.glsl.js\"));\n\nconst HexGridChunk_1 = __webpack_require__(/*! ../chunk/HexGridChunk */ \"./lib/chunk/HexGridChunk.js\");\n/**\n * 六角形グリッドマテリアル\n */\n\n\nclass HexGridMaterial extends WavyGridMaterial_1.WavyGridMaterial {\n  /**\n   * グリッド線の太さ\n   * 0.0で線なし、0.5でグリッド面なしになる。\n   */\n  get gridWeight() {\n    return this.uniforms.gridWeight.value;\n  }\n\n  set gridWeight(value) {\n    this.uniforms.gridWeight.value = value;\n  }\n\n  constructor(parameters) {\n    super((0, ShaderPhongMaterial_vert_glsl_1.default)(), (0, HexGridMaterial_frag_glsl_1.default)(), parameters);\n  }\n\n  initUniforms() {\n    this.uniforms = three_1.UniformsUtils.merge([WavyGridMaterial_1.WavyGridMaterial.getBasicUniforms(), {\n      gridWeight: {\n        value: 0.03\n      }\n    }]);\n  }\n\n  initChunks() {\n    super.initChunks();\n    HexGridChunk_1.HexGridChunk.registerChunk();\n  }\n\n}\n\nexports.HexGridMaterial = HexGridMaterial;\n\n//# sourceURL=webpack://threejs-shader-materials/./lib/hexGrid/HexGridMaterial.js?");

/***/ }),

/***/ "./lib/index.js":
/*!**********************!*\
  !*** ./lib/index.js ***!
  \**********************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __exportStar = this && this.__exportStar || function (m, exports) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\n__exportStar(__webpack_require__(/*! ./ShaderPhongMaterial */ \"./lib/ShaderPhongMaterial.js\"), exports);\n\n__exportStar(__webpack_require__(/*! ./ShaderSpriteMaterial */ \"./lib/ShaderSpriteMaterial.js\"), exports);\n\n__exportStar(__webpack_require__(/*! ./chunk/ */ \"./lib/chunk/index.js\"), exports);\n\n__exportStar(__webpack_require__(/*! ./contour/ContourMaterial */ \"./lib/contour/ContourMaterial.js\"), exports);\n\n__exportStar(__webpack_require__(/*! ./crossGrid/CrossGridMaterial */ \"./lib/crossGrid/CrossGridMaterial.js\"), exports);\n\n__exportStar(__webpack_require__(/*! ./halftoneGrid/HalftoneGridMaterial */ \"./lib/halftoneGrid/HalftoneGridMaterial.js\"), exports);\n\n__exportStar(__webpack_require__(/*! ./hexGrid/HexGridMaterial */ \"./lib/hexGrid/HexGridMaterial.js\"), exports);\n\n__exportStar(__webpack_require__(/*! ./squareGrid/SquareGridMaterial */ \"./lib/squareGrid/SquareGridMaterial.js\"), exports);\n\n__exportStar(__webpack_require__(/*! ./skyCloud/SkyCloudMaterial */ \"./lib/skyCloud/SkyCloudMaterial.js\"), exports);\n\n__exportStar(__webpack_require__(/*! ./fbmDissolve/FBMDissolveMaterial */ \"./lib/fbmDissolve/FBMDissolveMaterial.js\"), exports);\n\n__exportStar(__webpack_require__(/*! ./fbmFire/FBMFireMaterial */ \"./lib/fbmFire/FBMFireMaterial.js\"), exports);\n\n__exportStar(__webpack_require__(/*! ./rimEffect/RimEffectMaterial */ \"./lib/rimEffect/RimEffectMaterial.js\"), exports);\n\n__exportStar(__webpack_require__(/*! ./rimEffect/OuterGlowMaterial */ \"./lib/rimEffect/OuterGlowMaterial.js\"), exports);\n\n__exportStar(__webpack_require__(/*! ./expansion/ExpansionMaterial */ \"./lib/expansion/ExpansionMaterial.js\"), exports);\n\n__exportStar(__webpack_require__(/*! ./spriteCloud/SpriteCloudMaterial */ \"./lib/spriteCloud/SpriteCloudMaterial.js\"), exports);\n\n__exportStar(__webpack_require__(/*! ./expansionDissolve/ExpansionDissolveMaterial */ \"./lib/expansionDissolve/ExpansionDissolveMaterial.js\"), exports);\n\n__exportStar(__webpack_require__(/*! ./swirl/SwirlMaterial */ \"./lib/swirl/SwirlMaterial.js\"), exports);\n\n__exportStar(__webpack_require__(/*! ./cellularNoise/CellularNoiseMaterial */ \"./lib/cellularNoise/CellularNoiseMaterial.js\"), exports);\n\n__exportStar(__webpack_require__(/*! ./solidClipping/SolidClippingMaterial */ \"./lib/solidClipping/SolidClippingMaterial.js\"), exports);\n\n__exportStar(__webpack_require__(/*! ./hexDissolve/HexDissolveMaterial */ \"./lib/hexDissolve/HexDissolveMaterial.js\"), exports);\n\n//# sourceURL=webpack://threejs-shader-materials/./lib/index.js?");

/***/ }),

/***/ "./lib/rimEffect/OuterGlowMaterial.js":
/*!********************************************!*\
  !*** ./lib/rimEffect/OuterGlowMaterial.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.OuterGlowMaterial = void 0;\n\nconst RimEffectMaterial_1 = __webpack_require__(/*! ./RimEffectMaterial */ \"./lib/rimEffect/RimEffectMaterial.js\");\n\nclass OuterGlowMaterial extends RimEffectMaterial_1.RimEffectMaterial {\n  get expansionStrength() {\n    return this.uniforms.expansionStrength.value;\n  }\n\n  set expansionStrength(value) {\n    this.uniforms.expansionStrength.value = value;\n  }\n\n  initDefines() {\n    super.initDefines();\n    this.defines.USE_LIGHT = false;\n    this.defines.USE_EXPANSION = true;\n  }\n\n}\n\nexports.OuterGlowMaterial = OuterGlowMaterial;\n\n//# sourceURL=webpack://threejs-shader-materials/./lib/rimEffect/OuterGlowMaterial.js?");

/***/ }),

/***/ "./lib/rimEffect/RimEffectMaterial.frag.glsl.js":
/*!******************************************************!*\
  !*** ./lib/rimEffect/RimEffectMaterial.frag.glsl.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nexports[\"default\"] = () => {\n  // language=GLSL\n  return `\n#define PHONG\n\n#include <mesh_phong_uniform>\nvarying vec2 uvPosition;\n#include <surface_normal_varying_chunk>\n\nuniform vec3 rimColor;\nuniform float rimStrength;\nuniform float rimPow;\n\nuniform vec3 insideColor;\nuniform float insideStrength;\nuniform float insidePow;\n\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n    #include <clipping_planes_fragment>\n  \n    #include <mesh_phong_diffuse_color>\n    \n    #include <logdepthbuf_fragment>\n    #include <__ShaderMaterial__map_fragment_begin_chunk>\n    #include <map_fragment>\n    \n    vec3 viewDir = normalize(vViewPosition);    \n    \n    float rimGlow = 1.0 - max(0.0, dot(surfaceNormal, viewDir));\n    rimGlow = pow( rimGlow, rimPow);\n    diffuseColor.rgb += rimColor * rimGlow * rimStrength;\n\n    float insideGlow = max(0.0, dot(surfaceNormal, viewDir));\n    insideGlow = pow( insideGlow, insidePow);\n    diffuseColor.rgb += insideColor * insideGlow * insideStrength;\n\n    #include <color_fragment>\n    #include <mesh_phong_switching_alpha_map>\n    \n    #include <alphatest_fragment>\n    #include <specularmap_fragment>\n    #include <normal_fragment_begin>\n    #include <normal_fragment_maps>\n    #include <emissivemap_fragment>\n    \n    // accumulation\n    #include <lights_phong_fragment>\n    #include <lights_fragment_begin>\n    #include <lights_fragment_maps>\n    #include <lights_fragment_end>\n    \n    // modulation\n    #include <aomap_fragment>\n    vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n    #include <envmap_fragment>\n    #ifdef USE_LIGHT\n      gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n    #else\n      gl_FragColor = diffuseColor;\n    #endif\n    #include <tonemapping_fragment>\n    #include <encodings_fragment>\n    #include <fog_fragment>\n    #include <premultiplied_alpha_fragment>\n    #include <dithering_fragment>\n}`;\n};\n\n//# sourceURL=webpack://threejs-shader-materials/./lib/rimEffect/RimEffectMaterial.frag.glsl.js?");

/***/ }),

/***/ "./lib/rimEffect/RimEffectMaterial.js":
/*!********************************************!*\
  !*** ./lib/rimEffect/RimEffectMaterial.js ***!
  \********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.RimEffectMaterial = void 0;\n\nconst ShaderPhongMaterial_1 = __webpack_require__(/*! ../ShaderPhongMaterial */ \"./lib/ShaderPhongMaterial.js\");\n\nconst RimEffectMaterial_frag_glsl_1 = __importDefault(__webpack_require__(/*! ./RimEffectMaterial.frag.glsl */ \"./lib/rimEffect/RimEffectMaterial.frag.glsl.js\"));\n\nconst three_1 = __webpack_require__(/*! three */ \"./node_modules/three/build/three.module.js\");\n\nconst three_2 = __webpack_require__(/*! three */ \"./node_modules/three/build/three.module.js\");\n\nclass RimEffectMaterial extends ShaderPhongMaterial_1.ShaderPhongMaterial {\n  get rimPow() {\n    return this.uniforms.rimPow.value;\n  }\n\n  set rimPow(value) {\n    this.uniforms.rimPow.value = value;\n  }\n\n  get rimStrength() {\n    return this.uniforms.rimStrength.value;\n  }\n\n  set rimStrength(value) {\n    this.uniforms.rimStrength.value = value;\n  }\n\n  get rimColor() {\n    return this.uniforms.rimColor.value;\n  }\n\n  set rimColor(value) {\n    this.uniforms.rimColor.value = value;\n  }\n\n  get insidePow() {\n    return this.uniforms.insidePow.value;\n  }\n\n  set insidePow(value) {\n    this.uniforms.insidePow.value = value;\n  }\n\n  get insideStrength() {\n    return this.uniforms.insideStrength.value;\n  }\n\n  set insideStrength(value) {\n    this.uniforms.insideStrength.value = value;\n  }\n\n  get insideColor() {\n    return this.uniforms.insideColor.value;\n  }\n\n  set insideColor(value) {\n    this.uniforms.insideColor.value = value;\n  }\n  /**\n   *\n   * @param parameters\n   */\n\n\n  constructor(parameters) {\n    super(null, (0, RimEffectMaterial_frag_glsl_1.default)(), parameters);\n  }\n\n  initUniforms() {\n    this.uniforms = three_1.UniformsUtils.merge([ShaderPhongMaterial_1.ShaderPhongMaterial.getBasicUniforms(), {\n      rimColor: {\n        value: new three_2.Color(1.0, 1.0, 1.0)\n      },\n      rimStrength: {\n        value: 1.0\n      },\n      rimPow: {\n        value: 1.0\n      },\n      insideColor: {\n        value: new three_2.Color(0.0, 0.0, 0.0)\n      },\n      insideStrength: {\n        value: 1.0\n      },\n      insidePow: {\n        value: 1.0\n      }\n    }]);\n  }\n\n  initDefines() {\n    super.initDefines();\n    this.defines.USE_LIGHT = true;\n    this.defines.USE_SURFACE_NORMAL = true;\n  }\n\n}\n\nexports.RimEffectMaterial = RimEffectMaterial;\n\n//# sourceURL=webpack://threejs-shader-materials/./lib/rimEffect/RimEffectMaterial.js?");

/***/ }),

/***/ "./lib/skyCloud/SkyCloudMaterial.frag.glsl.js":
/*!****************************************************!*\
  !*** ./lib/skyCloud/SkyCloudMaterial.frag.glsl.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n/**\n * 平面上に雲模様を描画するシェーダー\n */\n\nexports[\"default\"] = () => {\n  // language=GLSL\n  return `\n#define PHONG\n\n#include <mesh_phong_uniform>\n\n//varying\nvarying vec2 uvPosition;\n#include <mesh_position_varying>\n\n//user settings\n#include <time_animation_uniform_chunk>\nuniform float scale;\nuniform float cloudVolume;\nuniform float cloudTransformSpeed;\nuniform vec3 skyColor;\nuniform float cloudBottomVolume;\nuniform float cloudBottomSaturation;\n\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\n// <https://www.shadertoy.com/view/4dS3Wd>\n// <https://gist.github.com/patriciogonzalezvivo/670c22f3966e662d2f83>\n// By Morgan McGuire @morgan3d, http://graphicscodex.com\n// Reuse permitted under the BSD license.\nfloat hash(vec2 p)\n{\n  return fract(1e4 * sin(17.0 * p.x + p.y * 0.1) * (0.1 + abs(sin(p.y * 13.0 + p.x))));\n}\n\n/**\n * Based on Morgan McGuire @morgan3d\n * https://www.shadertoy.com/view/4dS3Wd\n */ \nfloat noise (in vec2 _st) {\n    vec2 i = floor(_st);\n    vec2 f = fract(_st);\n\n    // Four corners in 2D of a tile\n    float a = hash(i);\n    float b = hash(i + vec2(1.0, 0.0));\n    float c = hash(i + vec2(0.0, 1.0));\n    float d = hash(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\n#define NUM_OCTAVES 7\n\nfloat fbm ( in vec2 _st) {\n    float v = 0.0;\n    float a = 0.5;\n    vec2 shift = vec2(100.0);\n    // Rotate to reduce axial bias\n    mat2 rot = mat2(cos(0.5), sin(0.5),\n                    -sin(0.5), cos(0.50));\n    for (int i = 0; i < NUM_OCTAVES; ++i) {\n        v += a * noise(_st);\n        _st = rot * _st * 2.0 + shift;\n        a *= 0.5;\n    }\n    return v;\n}\n\n\n\nvoid main() {\n    #include <clipping_planes_fragment>\n  \n    #include <mesh_phong_diffuse_color>\n    \n    #include <logdepthbuf_fragment>\n    #include <__ShaderMaterial__map_fragment_begin_chunk>\n    #include <map_fragment>\n    #include <color_fragment>\n    \n    vec2 st = uvPosition * scale;\n    st += time;\n\n    vec2 q = vec2(0.);\n    q.x = fbm( st + time);\n    q.y = fbm( st + vec2(1.0));\n\n    vec2 r = vec2(0.0);\n    r.x = fbm( st + q + vec2(1.7,9.2)+ 0.15*time * cloudTransformSpeed);\n    r.y = fbm( st + q + vec2(8.3,2.8)+ 0.126*time * cloudTransformSpeed);\n    float f = fbm(st+r);\n\n    vec3 cloudColor = diffuseColor.rgb;\n    \n    float volume;\n    float alpha = 0.0;\n    volume = (f*f)*cloudVolume*0.03;\n    alpha += volume;\n    volume = (f*f*f*f*f)*cloudVolume;\n    alpha += volume;\n    alpha = clamp(alpha,0.0,1.0);\n    \n    cloudColor = mix(cloudColor,\n                skyColor*cloudBottomSaturation,\n                clamp(volume*cloudBottomVolume,0.0,1.0));\n\n    diffuseColor.rgb = cloudColor;\n    diffuseColor.a *= alpha;\n    \n    #include <mesh_phong_switching_alpha_map>\n    \n    #include <alphatest_fragment>\n    #include <specularmap_fragment>\n    #include <normal_fragment_begin>\n    #include <normal_fragment_maps>\n    #include <emissivemap_fragment>\n    \n    // accumulation\n    #include <lights_phong_fragment>\n    #include <lights_fragment_begin>\n    #include <lights_fragment_maps>\n    #include <lights_fragment_end>\n    \n    // modulation\n    #include <aomap_fragment>\n    vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n    #include <envmap_fragment>\n    gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n    #include <tonemapping_fragment>\n    #include <encodings_fragment>\n    #include <fog_fragment>\n    #include <premultiplied_alpha_fragment>\n    #include <dithering_fragment>\n}`;\n};\n\n//# sourceURL=webpack://threejs-shader-materials/./lib/skyCloud/SkyCloudMaterial.frag.glsl.js?");

/***/ }),

/***/ "./lib/skyCloud/SkyCloudMaterial.js":
/*!******************************************!*\
  !*** ./lib/skyCloud/SkyCloudMaterial.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.SkyCloudMaterial = void 0;\n\nconst raf_ticker_1 = __webpack_require__(/*! raf-ticker */ \"./node_modules/raf-ticker/esm/index.js\");\n\nconst three_1 = __webpack_require__(/*! three */ \"./node_modules/three/build/three.module.js\");\n\nconst AnimationChunk_1 = __webpack_require__(/*! ../chunk/AnimationChunk */ \"./lib/chunk/AnimationChunk.js\");\n\nconst ShaderPhongMaterial_1 = __webpack_require__(/*! ../ShaderPhongMaterial */ \"./lib/ShaderPhongMaterial.js\");\n\nconst ShaderPhongMaterial_vert_glsl_1 = __importDefault(__webpack_require__(/*! ../ShaderPhongMaterial.vert.glsl */ \"./lib/ShaderPhongMaterial.vert.glsl.js\"));\n\nconst SkyCloudMaterial_frag_glsl_1 = __importDefault(__webpack_require__(/*! ./SkyCloudMaterial.frag.glsl */ \"./lib/skyCloud/SkyCloudMaterial.frag.glsl.js\"));\n\nclass SkyCloudMaterial extends ShaderPhongMaterial_1.ShaderPhongMaterial {\n  /**\n   *\n   * @param parameters\n   */\n  constructor(parameters) {\n    super((0, ShaderPhongMaterial_vert_glsl_1.default)(), (0, SkyCloudMaterial_frag_glsl_1.default)(), parameters);\n    /**\n     * 波の速度\n     * 0.5にすると1の半分の速度になる。\n     * マイナスを指定すると、波の進行方向が反転する。\n     */\n\n    this.speed = -0.02;\n    /*\n     * IAnimatable implements\n     */\n\n    this.animationListener = e => {\n      this.addTime(e.delta / 1000);\n    };\n\n    this.isAnimate = this.isAnimate; //reset and start animation\n  }\n\n  get scale() {\n    return this.uniforms.scale.value;\n  }\n\n  set scale(value) {\n    this.uniforms.scale.value = value;\n  }\n\n  addTime(delta) {\n    AnimationChunk_1.AnimationChunk.addTime(this, delta);\n  }\n\n  get isAnimate() {\n    return this.uniforms.isAnimate.value;\n  }\n\n  set isAnimate(value) {\n    this.uniforms.isAnimate.value = value;\n\n    if (this.isAnimate) {\n      this.startAnimation();\n    } else {\n      this.stopAnimation();\n    }\n  }\n\n  get skyColor() {\n    return this.uniforms.skyColor.value;\n  }\n\n  set skyColor(value) {\n    this.uniforms.skyColor.value = value;\n  }\n\n  get cloudVolume() {\n    return this.uniforms.cloudVolume.value;\n  }\n\n  set cloudVolume(value) {\n    this.uniforms.cloudVolume.value = value;\n  }\n\n  get cloudBottomVolume() {\n    return this.uniforms.cloudBottomVolume.value;\n  }\n\n  set cloudBottomVolume(value) {\n    this.uniforms.cloudBottomVolume.value = value;\n  }\n\n  get cloudBottomSaturation() {\n    return this.uniforms.cloudBottomSaturation.value;\n  }\n\n  set cloudBottomSaturation(value) {\n    this.uniforms.cloudBottomSaturation.value = value;\n  }\n\n  get cloudTransformSpeed() {\n    return this.uniforms.cloudTransformSpeed.value;\n  }\n\n  set cloudTransformSpeed(value) {\n    this.uniforms.cloudTransformSpeed.value = value;\n  }\n\n  initChunks() {\n    super.initChunks();\n    AnimationChunk_1.AnimationChunk.registerChunk();\n  }\n\n  initUniforms() {\n    this.uniforms = three_1.UniformsUtils.merge([ShaderPhongMaterial_1.ShaderPhongMaterial.getBasicUniforms(), AnimationChunk_1.AnimationChunk.getUniform(), {\n      scale: {\n        value: 3.0\n      },\n      cloudTransformSpeed: {\n        value: 0.15\n      },\n      cloudVolume: {\n        value: 16.0\n      },\n      cloudBottomVolume: {\n        value: 0.08\n      },\n      cloudBottomSaturation: {\n        value: 0.5\n      },\n      skyColor: {\n        value: new three_1.Color(0.101961, 0.619608, 0.666667)\n      }\n    }]);\n  }\n\n  initDefaultSetting(parameters) {\n    super.initDefaultSetting(parameters);\n\n    if (parameters.transparent == null) {\n      this.transparent = true;\n    } else {\n      this.transparent = parameters.transparent;\n    }\n  }\n\n  startAnimation() {\n    raf_ticker_1.RAFTicker.on(raf_ticker_1.RAFTickerEventType.onBeforeTick, this.animationListener);\n  }\n\n  stopAnimation() {\n    raf_ticker_1.RAFTicker.off(raf_ticker_1.RAFTickerEventType.onBeforeTick, this.animationListener);\n  }\n\n}\n\nexports.SkyCloudMaterial = SkyCloudMaterial;\n\n//# sourceURL=webpack://threejs-shader-materials/./lib/skyCloud/SkyCloudMaterial.js?");

/***/ }),

/***/ "./lib/solidClipping/SolidClippingMaterial.frag.glsl.js":
/*!**************************************************************!*\
  !*** ./lib/solidClipping/SolidClippingMaterial.frag.glsl.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n/**\n * ライトに影響を受けない、ソリッドな切断面をもつマテリアル\n */\n\nexports[\"default\"] = () => {\n  // language=GLSL\n  return `\n#define PHONG\n\n#include <mesh_phong_uniform>\nvarying vec2 uvPosition;\n#include <mesh_position_varying>\n\nuniform vec3 cutSectionColor;\n\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n    #include <clipping_planes_fragment>\n  \n    #include <mesh_phong_diffuse_color>\n    \n    #include <logdepthbuf_fragment>\n    #include <__ShaderMaterial__map_fragment_begin_chunk>\n    #include <map_fragment>\n    #include <color_fragment>\n    #include <mesh_phong_switching_alpha_map>\n    \n    #include <alphatest_fragment>\n    #include <specularmap_fragment>\n    #include <normal_fragment_begin>\n    #include <normal_fragment_maps>\n    #include <emissivemap_fragment>\n    \n    // accumulation\n    #include <lights_phong_fragment>\n    #include <lights_fragment_begin>\n    #include <lights_fragment_maps>\n    #include <lights_fragment_end>\n    \n    // modulation\n    #include <aomap_fragment>\n    vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n    #include <envmap_fragment>\n  \n    outgoingLight = gl_FrontFacing ? outgoingLight : cutSectionColor;\n    gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n    \n    #include <tonemapping_fragment>\n    #include <encodings_fragment>\n    \n    vec4 fragment = vec4(gl_FragColor);\n    #include <fog_fragment>\n    gl_FragColor = gl_FrontFacing ? gl_FragColor : fragment;\n    \n    #include <premultiplied_alpha_fragment>\n    #include <dithering_fragment>\n}`;\n};\n\n//# sourceURL=webpack://threejs-shader-materials/./lib/solidClipping/SolidClippingMaterial.frag.glsl.js?");

/***/ }),

/***/ "./lib/solidClipping/SolidClippingMaterial.js":
/*!****************************************************!*\
  !*** ./lib/solidClipping/SolidClippingMaterial.js ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/**\n * ライトに影響を受けない、ソリッドな切断面をもつマテリアル\n */\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.SolidClippingMaterial = void 0;\n\nconst index_1 = __webpack_require__(/*! ../index */ \"./lib/index.js\");\n\nconst three_1 = __webpack_require__(/*! three */ \"./node_modules/three/build/three.module.js\");\n\nconst SolidClippingMaterial_frag_glsl_1 = __importDefault(__webpack_require__(/*! ./SolidClippingMaterial.frag.glsl */ \"./lib/solidClipping/SolidClippingMaterial.frag.glsl.js\"));\n\nconst three_2 = __webpack_require__(/*! three */ \"./node_modules/three/build/three.module.js\");\n\nclass SolidClippingMaterial extends index_1.ShaderPhongMaterial {\n  get cutSectionColor() {\n    return this.uniforms.cutSectionColor.value;\n  }\n\n  set cutSectionColor(value) {\n    this.uniforms.cutSectionColor.value = value;\n  }\n\n  constructor(parameters) {\n    super(null, (0, SolidClippingMaterial_frag_glsl_1.default)(), parameters);\n  }\n\n  initUniforms() {\n    this.uniforms = three_1.UniformsUtils.merge([index_1.ShaderPhongMaterial.getBasicUniforms(), {\n      cutSectionColor: {\n        value: new three_1.Color(1.0, 1.0, 1.0)\n      }\n    }]);\n  }\n\n  initDefaultSetting(parameters) {\n    super.initDefaultSetting(parameters);\n    this.clipping = true;\n    this.side = three_2.DoubleSide;\n  }\n\n}\n\nexports.SolidClippingMaterial = SolidClippingMaterial;\n\n//# sourceURL=webpack://threejs-shader-materials/./lib/solidClipping/SolidClippingMaterial.js?");

/***/ }),

/***/ "./lib/spriteCloud/SpriteCloudMaterial.frag.glsl.js":
/*!**********************************************************!*\
  !*** ./lib/spriteCloud/SpriteCloudMaterial.frag.glsl.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n/**\n * https://github.com/mrdoob/three.js/blob/dev/src/renderers/shaders/ShaderLib/sprite_frag.glsl.js\n */\n\nexports[\"default\"] = () => {\n  // language=GLSL\n  return `\n\nuniform float rimStrength;\nuniform float bottomStrength;\nuniform vec3 rimColor;\nuniform vec3 skyColor;\n\nuniform float rimCenter;\nuniform float rimRange;\n\n#include <sprite_fragment_uniform_chunk>\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\n    vec3 color = diffuse;\n    #include <clipping_planes_fragment>\n    #include <sprite_diffuse_color_chunk>\n\t#include <logdepthbuf_fragment>\n\t\n\t#include <map_fragment>\n\t#include <alphatest_fragment>\n\t\n\tfloat bottom = 0.0;\t\n\t#ifdef USE_MAP\n      bottom = 1.0 - texture2D( map, vUv ).g;\n      bottom *= bottomStrength;\n    #endif\n    \n    float rim = 0.0;\n    #ifdef USE_MAP\n      float a = texture2D( map, vUv ).a ;\n      float edge = \n          smoothstep( rimCenter-rimRange, rimCenter, a )\n        - smoothstep( rimCenter, rimCenter+rimRange, a );\n    #endif\n    \n    outgoingLight = mix( diffuse, skyColor, bottom);\n    outgoingLight += rimColor * edge * rimStrength;\n    \n    gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n    \n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n`;\n};\n\n//# sourceURL=webpack://threejs-shader-materials/./lib/spriteCloud/SpriteCloudMaterial.frag.glsl.js?");

/***/ }),

/***/ "./lib/spriteCloud/SpriteCloudMaterial.js":
/*!************************************************!*\
  !*** ./lib/spriteCloud/SpriteCloudMaterial.js ***!
  \************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.SpriteCloudMaterial = void 0;\n\nconst three_1 = __webpack_require__(/*! three */ \"./node_modules/three/build/three.module.js\");\n\nconst three_2 = __webpack_require__(/*! three */ \"./node_modules/three/build/three.module.js\");\n\nconst ShaderSpriteMaterial_1 = __webpack_require__(/*! ../ShaderSpriteMaterial */ \"./lib/ShaderSpriteMaterial.js\");\n\nconst SpriteCloudMaterial_frag_glsl_1 = __importDefault(__webpack_require__(/*! ./SpriteCloudMaterial.frag.glsl */ \"./lib/spriteCloud/SpriteCloudMaterial.frag.glsl.js\"));\n\nclass SpriteCloudMaterial extends ShaderSpriteMaterial_1.ShaderSpriteMaterial {\n  constructor(parameters) {\n    super(null, (0, SpriteCloudMaterial_frag_glsl_1.default)(), parameters);\n  }\n  /**\n   * uniformsを初期化する。\n   */\n\n\n  initUniforms() {\n    super.initUniforms();\n    this.uniforms = three_1.UniformsUtils.merge([this.uniforms, {\n      rimStrength: {\n        value: 0.2\n      },\n      bottomStrength: {\n        value: 0.75\n      },\n      rimColor: {\n        value: new three_2.Color(0xffffff)\n      },\n      skyColor: {\n        value: new three_2.Color(0xcccccc)\n      },\n      rimCenter: {\n        value: 0.6\n      },\n      rimRange: {\n        value: 0.15\n      }\n    }]);\n  }\n\n  initDefaultSetting(parameters) {\n    super.initDefaultSetting(parameters);\n  }\n\n  get rimCenter() {\n    return this.uniforms.rimCenter.value;\n  }\n\n  set rimCenter(value) {\n    this.uniforms.rimCenter.value = value;\n  }\n\n  get rimRange() {\n    return this.uniforms.rimRange.value;\n  }\n\n  set rimRange(value) {\n    this.uniforms.rimRange.value = value;\n  }\n\n  get rimStrength() {\n    return this.uniforms.rimStrength.value;\n  }\n\n  set rimStrength(value) {\n    this.uniforms.rimStrength.value = value;\n  }\n\n  get bottomStrength() {\n    return this.uniforms.bottomStrength.value;\n  }\n\n  set bottomStrength(value) {\n    this.uniforms.bottomStrength.value = value;\n  }\n\n  get rimColor() {\n    return this.uniforms.rimColor.value;\n  }\n\n  set rimColor(value) {\n    this.uniforms.rimColor.value = value;\n  }\n\n  get skyColor() {\n    return this.uniforms.skyColor.value;\n  }\n\n  set skyColor(value) {\n    this.uniforms.skyColor.value = value;\n  }\n\n}\n\nexports.SpriteCloudMaterial = SpriteCloudMaterial;\n\n//# sourceURL=webpack://threejs-shader-materials/./lib/spriteCloud/SpriteCloudMaterial.js?");

/***/ }),

/***/ "./lib/squareGrid/SquareGridMaterial.frag.glsl.js":
/*!********************************************************!*\
  !*** ./lib/squareGrid/SquareGridMaterial.frag.glsl.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/**\n * 四角形のグリッドを描画するシェーダー\n */\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n\nexports[\"default\"] = () => {\n  // language=GLSL\n  return `\n#define PHONG\n\n#include <mesh_phong_uniform>\nvarying vec2 uvPosition;\n#include <mesh_position_varying>\n\n//user settings\n#include <time_animation_uniform_chunk>\n#include <wavy_animation_uniform_chunk>\n#include <repeat_pattern_uniform_chunk>\n#include <mask_map_uniform_chunk>\n#include <reversible_uniform_chunk>\nuniform float gridWeight;\n\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n    #include <clipping_planes_fragment>\n  \n    #include <mesh_phong_diffuse_color>\n    \n    #include <logdepthbuf_fragment>\n    #include <__ShaderMaterial__map_fragment_begin_chunk>\n    #include <map_fragment>\n    #include <color_fragment>\n\n    #include <repeat_pattern_fragment_chunk>    \n    vec2 localPos = mod(uv, 1.0) - 0.5;\n    vec2 id = uv - localPos;\n    #include <wavy_animation_fragment_chunk>\n\n    #include <mask_map_fragment_chunk>\n    float w = gridWeight + (1.0-mask);\n    w = clamp( w, 0.0, 1.0);\n    float margin = clamp ( w * 0.33, 0.03, 0.1 );\n    \n    float stepHigh = 0.5-(w+margin);\n    float stepLow = -0.5+w+margin;\n    \n    //float gridLine = smoothstep(w, stepMax, hc.y);\n    float gridLine = smoothstep ( 0.5-w, stepHigh, localPos.x );\n    gridLine *= smoothstep ( 0.5-w, stepHigh, localPos.y );\n    gridLine *= smoothstep ( -0.5+w, stepLow, localPos.x );\n    gridLine *= smoothstep ( -0.5+w, stepLow, localPos.y );\n    \n    gridLine = isReversed\n        ? 1.0 - gridLine\n        : gridLine;\n    diffuseColor.a *= gridLine;\n\n    #include <mesh_phong_switching_alpha_map>\n    \n    #include <alphatest_fragment>\n    #include <specularmap_fragment>\n    #include <normal_fragment_begin>\n    #include <normal_fragment_maps>\n    #include <emissivemap_fragment>\n    \n    // accumulation\n    #include <lights_phong_fragment>\n    #include <lights_fragment_begin>\n    #include <lights_fragment_maps>\n    #include <lights_fragment_end>\n    \n    // modulation\n    #include <aomap_fragment>\n    vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n    #include <envmap_fragment>\n    gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n    #include <tonemapping_fragment>\n    #include <encodings_fragment>\n    #include <fog_fragment>\n    #include <premultiplied_alpha_fragment>\n    #include <dithering_fragment>\n}`;\n};\n\n//# sourceURL=webpack://threejs-shader-materials/./lib/squareGrid/SquareGridMaterial.frag.glsl.js?");

/***/ }),

/***/ "./lib/squareGrid/SquareGridMaterial.js":
/*!**********************************************!*\
  !*** ./lib/squareGrid/SquareGridMaterial.js ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.SquareGridMaterial = void 0;\n\nconst three_1 = __webpack_require__(/*! three */ \"./node_modules/three/build/three.module.js\");\n\nconst SquareGridMaterial_frag_glsl_1 = __importDefault(__webpack_require__(/*! ./SquareGridMaterial.frag.glsl */ \"./lib/squareGrid/SquareGridMaterial.frag.glsl.js\"));\n\nconst ShaderPhongMaterial_vert_glsl_1 = __importDefault(__webpack_require__(/*! ../ShaderPhongMaterial.vert.glsl */ \"./lib/ShaderPhongMaterial.vert.glsl.js\"));\n\nconst WavyGridMaterial_1 = __webpack_require__(/*! ../WavyGridMaterial */ \"./lib/WavyGridMaterial.js\");\n/**\n * 四角形グリッドマテリアル\n */\n\n\nclass SquareGridMaterial extends WavyGridMaterial_1.WavyGridMaterial {\n  /**\n   * グリッド線の太さ\n   * 0.0で線なし、0.5でグリッド面なしになる。\n   */\n  get gridWeight() {\n    return this.uniforms.gridWeight.value;\n  }\n\n  set gridWeight(value) {\n    this.uniforms.gridWeight.value = value;\n  }\n\n  constructor(parameters) {\n    super((0, ShaderPhongMaterial_vert_glsl_1.default)(), (0, SquareGridMaterial_frag_glsl_1.default)(), parameters);\n  }\n\n  initUniforms() {\n    this.uniforms = three_1.UniformsUtils.merge([WavyGridMaterial_1.WavyGridMaterial.getBasicUniforms(), {\n      gridWeight: {\n        value: 0.03\n      }\n    }]);\n  }\n\n}\n\nexports.SquareGridMaterial = SquareGridMaterial;\n\n//# sourceURL=webpack://threejs-shader-materials/./lib/squareGrid/SquareGridMaterial.js?");

/***/ }),

/***/ "./lib/swirl/SwirlMaterial.frag.glsl.js":
/*!**********************************************!*\
  !*** ./lib/swirl/SwirlMaterial.frag.glsl.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\n/**\n * 渦巻き状にUV座標を変形させるシェーダー\n */\n\nexports[\"default\"] = () => {\n  // language=GLSL\n  return `\n#define PHONG\n\n#include <mesh_phong_uniform>\nvarying vec2 uvPosition;\n#include <mesh_position_varying>\n\n#include <time_animation_uniform_chunk>\nuniform float uvRotation;\nuniform float swirlRotation;\nuniform float radius;\nuniform vec2 center;\n#include <map_uniform_chunk>\n\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\n/**\n * UV座標を回転する\n */\nvec2 rotateUV(vec2 uv, float rotation, vec2 center)\n{\n  return vec2(\n    cos(rotation) * (uv.x - center.x) + sin(rotation) * (uv.y - center.y) + center.x,\n    cos(rotation) * (uv.y - center.y) - sin(rotation) * (uv.x - center.x) + center.y\n  );\n}\n\n/**\n * UV座標をツイストする\n */\nvec2 swirl(vec2 uv, float radius, float rotation, vec2 center)\n{\n  vec2 tc = uv - center;\n  float dist = length(tc);\n  if (dist < radius) \n  {\n    float percent = (radius - dist) / radius;\n    float theta = percent * percent * rotation;\n    float s = sin(theta);\n    float c = cos(theta);\n    tc = vec2(dot(tc, vec2(c, -s)), dot(tc, vec2(s, c)));\n  }\n  tc += center;\n  return tc;\n}\n\nvoid main() {\n    #include <clipping_planes_fragment>\n  \n    #include <mesh_phong_diffuse_color>\n    \n    #include <logdepthbuf_fragment>\n    #include <__ShaderMaterial__map_fragment_begin_chunk>\n    #include <map_fragment>\n    mapUV = rotateUV( mapUV, uvRotation , center);\n    mapUV = swirl( mapUV, radius, swirlRotation, center );\n    // offset Texture \n    mapUV += vec2(time);\n    #include <map_fragment_chunk>\n    \n    #include <color_fragment>\n    #include <mesh_phong_switching_alpha_map>\n    \n    #include <alphatest_fragment>\n    #include <specularmap_fragment>\n    #include <normal_fragment_begin>\n    #include <normal_fragment_maps>\n    #include <emissivemap_fragment>\n    \n    // accumulation\n    #include <lights_phong_fragment>\n    #include <lights_fragment_begin>\n    #include <lights_fragment_maps>\n    #include <lights_fragment_end>\n    \n    // modulation\n    #include <aomap_fragment>\n    vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n    #include <envmap_fragment>\n    gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n    #include <tonemapping_fragment>\n    #include <encodings_fragment>\n    #include <fog_fragment>\n    #include <premultiplied_alpha_fragment>\n    #include <dithering_fragment>\n}`;\n};\n\n//# sourceURL=webpack://threejs-shader-materials/./lib/swirl/SwirlMaterial.frag.glsl.js?");

/***/ }),

/***/ "./lib/swirl/SwirlMaterial.js":
/*!************************************!*\
  !*** ./lib/swirl/SwirlMaterial.js ***!
  \************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.SwirlMaterial = void 0;\n\nconst raf_ticker_1 = __webpack_require__(/*! raf-ticker */ \"./node_modules/raf-ticker/esm/index.js\");\n\nconst three_1 = __webpack_require__(/*! three */ \"./node_modules/three/build/three.module.js\");\n\nconst index_1 = __webpack_require__(/*! ../index */ \"./lib/index.js\");\n\nconst SwirlMaterial_frag_glsl_1 = __importDefault(__webpack_require__(/*! ./SwirlMaterial.frag.glsl */ \"./lib/swirl/SwirlMaterial.frag.glsl.js\"));\n\nclass SwirlMaterial extends index_1.ShaderPhongMaterial {\n  constructor(parameters) {\n    super(null, (0, SwirlMaterial_frag_glsl_1.default)(), parameters);\n    /*\n     * implements IAnimatable\n     */\n\n    this.speed = -0.02;\n    /*\n     * IAnimatable implements\n     */\n\n    this.animationListener = e => {\n      this.addTime(e.delta / 1000);\n    };\n\n    this.isAnimate = this.isAnimate;\n  }\n\n  addTime(delta) {\n    if (this.isAnimate) {\n      index_1.AnimationChunk.addTime(this, delta);\n    }\n  }\n\n  get isAnimate() {\n    return this.uniforms.isAnimate.value;\n  }\n\n  set isAnimate(value) {\n    this.uniforms.isAnimate.value = value;\n\n    if (this.isAnimate) {\n      this.startAnimation();\n    } else {\n      this.stopAnimation();\n    }\n  }\n\n  onSetMap(val) {\n    super.onSetMap(val);\n    this.setRepeat(val);\n  }\n\n  onSetAlphaMap(value) {\n    super.onSetAlphaMap(value);\n    this.setRepeat(value);\n  }\n  /**\n   * リピートモードは強制的にRepeatWrappingに\n   * @param value\n   */\n\n\n  setRepeat(value) {\n    if (value) {\n      value.wrapS = three_1.RepeatWrapping;\n      value.wrapT = three_1.RepeatWrapping;\n    }\n  }\n\n  get uvRotation() {\n    return this.uniforms.uvRotation.value;\n  }\n\n  set uvRotation(value) {\n    this.uniforms.uvRotation.value = value;\n  }\n\n  get swirlRotation() {\n    return this.uniforms.swirlRotation.value;\n  }\n\n  set swirlRotation(value) {\n    this.uniforms.swirlRotation.value = value;\n  }\n\n  get radius() {\n    return this.uniforms.radius.value;\n  }\n\n  set radius(value) {\n    this.uniforms.radius.value = value;\n  }\n\n  get center() {\n    return this.uniforms.center.value;\n  }\n\n  set center(value) {\n    this.uniforms.center.value = value;\n  }\n\n  initChunks() {\n    super.initChunks();\n    index_1.AnimationChunk.registerChunk();\n  }\n\n  initUniforms() {\n    this.uniforms = three_1.UniformsUtils.merge([index_1.ShaderPhongMaterial.getBasicUniforms(), index_1.AnimationChunk.getUniform(), {\n      uvRotation: {\n        value: 0.0\n      },\n      swirlRotation: {\n        value: 3.14\n      },\n      radius: {\n        value: 0.5\n      },\n      center: {\n        value: new three_1.Vector2(0.5, 0.5)\n      }\n    }]);\n  }\n\n  startAnimation() {\n    raf_ticker_1.RAFTicker.on(raf_ticker_1.RAFTickerEventType.onBeforeTick, this.animationListener);\n  }\n\n  stopAnimation() {\n    raf_ticker_1.RAFTicker.off(raf_ticker_1.RAFTickerEventType.onBeforeTick, this.animationListener);\n  }\n\n}\n\nexports.SwirlMaterial = SwirlMaterial;\n\n//# sourceURL=webpack://threejs-shader-materials/./lib/swirl/SwirlMaterial.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/chunk loaded */
/******/ 	(() => {
/******/ 		var deferred = [];
/******/ 		__webpack_require__.O = (result, chunkIds, fn, priority) => {
/******/ 			if(chunkIds) {
/******/ 				priority = priority || 0;
/******/ 				for(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];
/******/ 				deferred[i] = [chunkIds, fn, priority];
/******/ 				return;
/******/ 			}
/******/ 			var notFulfilled = Infinity;
/******/ 			for (var i = 0; i < deferred.length; i++) {
/******/ 				var [chunkIds, fn, priority] = deferred[i];
/******/ 				var fulfilled = true;
/******/ 				for (var j = 0; j < chunkIds.length; j++) {
/******/ 					if ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {
/******/ 						chunkIds.splice(j--, 1);
/******/ 					} else {
/******/ 						fulfilled = false;
/******/ 						if(priority < notFulfilled) notFulfilled = priority;
/******/ 					}
/******/ 				}
/******/ 				if(fulfilled) {
/******/ 					deferred.splice(i--, 1)
/******/ 					var r = fn();
/******/ 					if (r !== undefined) result = r;
/******/ 				}
/******/ 			}
/******/ 			return result;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"demoHexGrid": 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
/******/ 			var [chunkIds, moreModules, runtime] = data;
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			if(chunkIds.some((id) => (installedChunks[id] !== 0))) {
/******/ 				for(moduleId in moreModules) {
/******/ 					if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 						__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 					}
/******/ 				}
/******/ 				if(runtime) var result = runtime(__webpack_require__);
/******/ 			}
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkIds[i]] = 0;
/******/ 			}
/******/ 			return __webpack_require__.O(result);
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = self["webpackChunkthreejs_shader_materials"] = self["webpackChunkthreejs_shader_materials"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module depends on other loaded chunks and execution need to be delayed
/******/ 	var __webpack_exports__ = __webpack_require__.O(undefined, ["vendor"], () => (__webpack_require__("./demoSrc/demoHexGrid.js")))
/******/ 	__webpack_exports__ = __webpack_require__.O(__webpack_exports__);
/******/ 	
/******/ })()
;