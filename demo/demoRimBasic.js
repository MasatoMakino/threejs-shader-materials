(()=>{"use strict";var n,e={695:(n,e,i)=>{var t=i(753);class a{static getChunkName(){return""}static getChunk(){return""}static getDefines(){return{}}static registerChunk(){t.vxI&&null==t.vxI[this.getChunkName()]&&(t.vxI[this.getChunkName()]=this.getChunk())}static getUniform(){return{}}}var r,o=i(710);class s extends a{static registerChunk(){l.registerChunk(),d.registerChunk()}static getDefines(){return{USE_SURFACE_NORMAL:!1}}static getUniform(){return{}}}class l extends a{static getChunkName(){return"surface_normal_varying_chunk"}static getChunk(){return"\n    #ifdef USE_SURFACE_NORMAL\n      varying vec3 surfaceNormal;\n    #endif\n    "}}class d extends a{static getChunkName(){return"surface_normal_vertex_chunk"}static getChunk(){return"\n    #ifdef USE_SURFACE_NORMAL\n      surfaceNormal = normalize( transformedNormal );\n    #endif\n    "}}!function(n){n[n.vertical=4]="vertical",n[n.horizontal=3]="horizontal",n[n.radial=5]="radial"}(r||(r={})),o.BKk,o.BKk;class c extends o.BKk{constructor(n,e,i){super(i),this._opacity=1,this.uniforms=c.getBasicUniforms(),this.vertexShader=n??"\n\n#include <surface_normal_varying_chunk>\nvarying vec3 vViewPosition;\nvarying vec2 uvPosition;\n\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n\n\t#include <uv_vertex>\n\tuvPosition = uv;\n\t\n    #include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\n\t#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\n\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinbase_vertex>\n\t\t#include <skinnormal_vertex>\n\t\t#include <defaultnormal_vertex>\n\n\t#endif\n\t\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\n    //For Rim Effect\n    #include <beginnormal_vertex>\n    #include <defaultnormal_vertex>\n    #include <surface_normal_vertex_chunk>\n    vViewPosition = - mvPosition.xyz;\n  \n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n\t\n}",this.fragmentShader=e??"\nuniform vec3 diffuse;\nuniform float opacity;\n\n#ifndef FLAT_SHADED\n\n    varying vec3 vNormal;\n\n#endif\n\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\t\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <specularmap_fragment>\n\t\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\n\t// accumulation (baked indirect lighting only)\n\t#ifdef USE_LIGHTMAP\n\n\t\tvec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n\t\treflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;\n\n\t#else\n\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\n\t#endif\n\n\t// modulation\n\t#include <aomap_fragment>\n\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\t\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t\n\t#include <envmap_fragment>\n\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n\t\n}",s.registerChunk(),this.initDefines(),this.uniformOpacity=this._opacity}static getBasicUniforms(){return o.LlO.merge([t.fCn.common,t.fCn.specularmap,t.fCn.envmap,t.fCn.aomap,t.fCn.lightmap,t.fCn.fog])}get color(){return this.uniforms.diffuse.value}set color(n){this.uniforms.diffuse.value=n}get uniformOpacity(){return this._opacity}set uniformOpacity(n){this._opacity=n,this.uniforms?.opacity&&(this.uniforms.opacity.value=n)}initDefines(){this.defines=Object.assign({},s.getDefines(),this.defines)}}o.BKk;var u=i(603);class m extends c{get rimPow(){return this.uniforms.rimPow.value}set rimPow(n){this.uniforms.rimPow.value=n}get rimStrength(){return this.uniforms.rimStrength.value}set rimStrength(n){this.uniforms.rimStrength.value=n}get rimColor(){return this.uniforms.rimColor.value}set rimColor(n){this.uniforms.rimColor.value=n}get insidePow(){return this.uniforms.insidePow.value}set insidePow(n){this.uniforms.insidePow.value=n}get insideStrength(){return this.uniforms.insideStrength.value}set insideStrength(n){this.uniforms.insideStrength.value=n}get insideColor(){return this.uniforms.insideColor.value}set insideColor(n){this.uniforms.insideColor.value=n}constructor(n){super(null,"\n//for Rim Effect\nvarying vec2 uvPosition;\n#include <surface_normal_varying_chunk>\nvarying vec3 vViewPosition;\n\nuniform vec3 rimColor;\nuniform float rimStrength;\nuniform float rimPow;\n\nuniform vec3 insideColor;\nuniform float insideStrength;\nuniform float insidePow;\n\n//original\nuniform vec3 diffuse;\nuniform float opacity;\n\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\t#include <clipping_planes_fragment>\n\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\n    //for Rim Effect\n    vec3 viewDir = normalize(vViewPosition);\n    float rimGlow = 1.0 - max(0.0, dot(surfaceNormal, viewDir));\n    rimGlow = pow(rimGlow, rimPow);\n    diffuseColor.rgb += rimColor * rimGlow * rimStrength;\n  \n    float insideGlow = max(0.0, dot(surfaceNormal, viewDir));\n    insideGlow = pow(insideGlow, insidePow);\n    diffuseColor.rgb += insideColor * insideGlow * insideStrength;\n    \n    #include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n    #include <alphahash_fragment>\n    #include <specularmap_fragment>\n\t\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t// accumulation (baked indirect lighting only)\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\n\t\treflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\n\t// modulation\n\t#include <aomap_fragment>\n\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\n\t#include <envmap_fragment>\n\t\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n\n}\n",n),this.uniforms=o.LlO.merge([c.getBasicUniforms(),m.getRimUniforms()]),this.initDefines()}static getRimUniforms(){return o.LlO.merge([{rimColor:{value:new o.Q1f(1,1,1)},rimStrength:{value:1},rimPow:{value:1},insideColor:{value:new o.Q1f(0,0,0)},insideStrength:{value:1},insidePow:{value:1}}])}initDefines(){super.initDefines(),this.defines.USE_SURFACE_NORMAL=!0}}class f{static initColorGUI(n,e,i="color"){const t={},a=e[i];return t[i]=a.getHex(),n.addColor(t,i).onChange((n=>{a.setHex(n)})),t}static initColorNodeGUI(n,e,i="color"){const t={},a=e[i];return t[i]=a.value.getHex(),n.addColor(t,i).onChange((n=>{a.value.setHex(n)})),t}static initBasicMaterialGUI(n,e,i="Material"){const t=n.addFolder(i);return this.initMaterialFolder(t,e),t.open(),t}static initMaterialGUI(n,e,i="Material"){const t=this.initBasicMaterialGUI(n,e,i);this.initColorGUI(t,e,"emissive")}static initMaterialFolder(n,e,i=!1){this.initColorGUI(n,e),n.add(e,"transparent");const t=i?"opacity":"uniformOpacity";n.add(e,t,0,1)}static initSpriteMaterialGUI(n,e,i="Material"){const t=n.addFolder(i);this.initMaterialFolder(t,e),t.open()}static initGridMaterialGUI(n,e){this.initMaterialGUI(n,e);const i={mask:"",alphaMap:""},t=n.addFolder("WavyGridMaterial");return t.add(e,"isReversed"),t.add(e,"division",2,256).step(1),t.add(e,"divisionScaleX",0,4).step(1),t.add(i,"mask",{none:"",earth:"./textures/landmask.png"}).onChange((n=>{e.maskTexture=""===n?null:(new o.Tap).load(n)})),t.add(i,"alphaMap",{none:"",earth:"./textures/landmask.png"}).onChange((n=>{e.alphaMap=""===n?null:(new o.Tap).load(n)})),t.open(),t}static initWavyMaterialGUI(n,e){const i=this.initGridMaterialGUI(n,e).addFolder("WavyAnimation");i.add(e,"isAnimate"),i.add(e,"speed",-2,2),i.add(e,"waveFrequency",0,1),i.add(e,"wavePow",0,4),i.add(e,"direction",{horizontal:r.horizontal,vertical:r.vertical,radial:r.radial}),i.add(e,"raisedBottom",0,1),i.open()}static initAnimationGUI(n,e,i="Animation"){const t=n.addFolder(i);t.add(e,"isAnimate"),t.add(e,"speed",-2,2),t.open()}static initRimGUI(n,e,i="Rim Effect Material"){const t=n.addFolder(i);f.initColorGUI(t,e,"rimColor"),t.add(e,"rimStrength",0,4).step(.01),t.add(e,"rimPow",0,4).step(.01),f.initColorGUI(t,e,"insideColor"),t.add(e,"insideStrength",0,4).step(.01),t.add(e,"insidePow",0,8).step(.01),t.open()}static initExpansionGUI(n,e,i="ExpansionMaterial"){const t=n.addFolder("ExpansionMaterial");t.add(e,"expansionStrength",-12,12).step(.01),t.open()}static initFBMTilingGUI(n,e,i="FBM Tiling"){const t=n.addFolder("FBM Tiling");t.add(e,"tiles",1,8).step(1),t.add(e,"hashLoop",2,16).step(1),t.add(e,"amp",0,2).step(.01),t.open()}static initSkyGUI(n,e,i,t){const a={turbidity:10,rayleigh:.15,mieCoefficient:.005,mieDirectionalG:.8,inclination:.07,azimuth:.25,exposure:.75},r=4e5;function o(){const n=e.material.uniforms;n.turbidity.value=a.turbidity,n.rayleigh.value=a.rayleigh,n.mieCoefficient.value=a.mieCoefficient,n.mieDirectionalG.value=a.mieDirectionalG;const o=Math.PI*(a.inclination-.5),s=2*Math.PI*(a.azimuth-.5);i.position.x=r*Math.cos(s),i.position.y=r*Math.sin(s)*Math.sin(o),i.position.z=r*Math.sin(s)*Math.cos(o),n.sunPosition.value.copy(i.position),t.toneMappingExposure=a.exposure}o();const s=n.addFolder("Sky");s.add(a,"turbidity",1,20,.1).onChange(o),s.add(a,"rayleigh",0,4,.001).onChange(o),s.add(a,"mieCoefficient",0,.1,.001).onChange(o),s.add(a,"mieDirectionalG",0,1,.001).onChange(o),s.add(a,"inclination",0,1,1e-4).onChange(o),s.add(a,"azimuth",0,1,1e-4).onChange(o),s.add(a,"exposure",0,1,1e-4).onChange(o),s.open()}}var g=i(580),p=i(785);class h{static initScene(){return new o.Z58}static initLight(n){const e=new o.$p8(16777215,Math.PI);return n.add(e),e}static initCamera(n,e,i,t=400){const a=new o.ubm(45,e/i,1,t);return a.position.set(0,0,100),a.updateMatrixWorld(!1),n.add(a),a}static initControl(n,e){let i;null!=e&&(i=e.domElement);const t=new g.N(n,i);return t.update(),t}static initRenderer(n,e,i=0,a=!0){const r=new t.JeP({antialias:a});return r.setClearColor(new o.Q1f(i)),r.setSize(n,e),r.setPixelRatio(window.devicePixelRatio),r.domElement.style.backgroundColor="#"+i.toString(16).padStart(6,"0"),document.body.appendChild(r.domElement),console.log("three.js revision: ",o.sPf),r}static initHelper(n){const e=new o.IzY(30);n.add(e)}static initSky(n,e,i){i.toneMapping=o.FV;const t=new o.eaF(new o.Gu$(2e4,16,8),new o.V9B({color:16777215}));t.position.y=-7e5,t.visible=!1,n.add(t);const a=new p.m;a.scale.setScalar(45e3),n.add(a),f.initSkyGUI(e,a,t,i)}}var _=i(638);class v{constructor(){const n=h.initScene();n.fog=new o.jUj(0,80,160),h.initLight(n);const e=h.initCamera(n,1280,640),i=h.initRenderer(1280,640);h.initControl(e,i),h.initHelper(n);const t=this.initObject(n);u.w.on("tick",(t=>{i.render(n,e)})),this.initGUI(t)}initObject(n){const e=new o.iNn(20,20,20),i=new o.Ho_(6,6,20,32),t=new o.O3Y(12,6,32,32),a=new m({fog:void 0!==n.fog});a.uniformOpacity=.65,a.color=new o.Q1f(13073),a.rimColor=new o.Q1f(3359744),a.insideColor=new o.Q1f(0),a.rimPow=2,a.insidePow=6,a.insideStrength=.5,a.transparent=!0;const r=new o.eaF(e,a);r.position.x=-40;const s=new o.eaF(t,a),l=new o.eaF(i,a);return l.position.x=40,n.add(r,s,l),a}initGUI(n){const e=new _.Ay;f.initBasicMaterialGUI(e,n),f.initRimGUI(e,n)}}window.onload=()=>{new v}}},i={};function t(n){var a=i[n];if(void 0!==a)return a.exports;var r=i[n]={exports:{}};return e[n](r,r.exports,t),r.exports}t.m=e,n=[],t.O=(e,i,a,r)=>{if(!i){var o=1/0;for(c=0;c<n.length;c++){for(var[i,a,r]=n[c],s=!0,l=0;l<i.length;l++)(!1&r||o>=r)&&Object.keys(t.O).every((n=>t.O[n](i[l])))?i.splice(l--,1):(s=!1,r<o&&(o=r));if(s){n.splice(c--,1);var d=a();void 0!==d&&(e=d)}}return e}r=r||0;for(var c=n.length;c>0&&n[c-1][2]>r;c--)n[c]=n[c-1];n[c]=[i,a,r]},t.d=(n,e)=>{for(var i in e)t.o(e,i)&&!t.o(n,i)&&Object.defineProperty(n,i,{enumerable:!0,get:e[i]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.j=732,(()=>{var n={732:0};t.O.j=e=>0===n[e];var e=(e,i)=>{var a,r,[o,s,l]=i,d=0;if(o.some((e=>0!==n[e]))){for(a in s)t.o(s,a)&&(t.m[a]=s[a]);if(l)var c=l(t)}for(e&&e(i);d<o.length;d++)r=o[d],t.o(n,r)&&n[r]&&n[r][0](),n[r]=0;return t.O(c)},i=self.webpackChunk_masatomakino_threejs_shader_materials=self.webpackChunk_masatomakino_threejs_shader_materials||[];i.forEach(e.bind(null,0)),i.push=e.bind(null,i.push.bind(i))})();var a=t.O(void 0,[121],(()=>t(695)));a=t.O(a)})();