(()=>{"use strict";var __webpack_modules__={426:(__unused_webpack___webpack_module__,__unused_webpack___webpack_exports__,__webpack_require__)=>{eval('\n// UNUSED EXPORTS: Study\n\n;// CONCATENATED MODULE: ./esm/ShaderPhongMaterial.glsl.js\n/**\n * MeshPhongMaterialに準じたシェーダー\n *\n * @see : https://github.com/mrdoob/three.js/blob/dev/src/renderers/shaders/ShaderLib/meshphong.glsl.js\n */\n// language=GLSL\nconst ShaderPhongMaterial_glsl_vertex = /* GLSL */`\n#define PHONG\n\nvarying vec3 vViewPosition;\n\n//added by threejs-shader-materials\nvarying vec2 uvPosition;\n#include <mesh_position_varying>\n#include <surface_normal_varying_chunk>\n#include <__expansion_uniform_chunk>\n\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n    #include <mesh_position_vertex>\n    uvPosition = uv;\n\n    #include <uv_vertex>\n    #include <color_vertex>\n    #include <morphcolor_vertex>\n    #include <batching_vertex>\n    \n    #include <beginnormal_vertex>\n    #include <morphnormal_vertex>\n    #include <skinbase_vertex>\n    #include <skinnormal_vertex>\n    #include <defaultnormal_vertex>\n    \n    #include <surface_normal_vertex_chunk>\n\n    #include <normal_vertex>\n    \n    #include <begin_vertex>\n    \n    #include <__expansion_vertex_chunk>\n    \n    #include <morphtarget_vertex>\n    #include <skinning_vertex>\n    #include <displacementmap_vertex>\n    #include <project_vertex>\n    #include <logdepthbuf_vertex>\n    #include <clipping_planes_vertex>\n    \n    vViewPosition = - mvPosition.xyz;\n\n    #include <worldpos_vertex>\n    #include <envmap_vertex>\n    #include <shadowmap_vertex>\n    #include <fog_vertex>\n\n}`;\n// language=GLSL\nconst ShaderPhongMaterial_glsl_fragment = /* GLSL */`\n#define PHONG\n\n#include <mesh_phong_uniform>\n\n//added by threejs-shader-materials\n#include <mesh_position_varying>\nvarying vec2 uvPosition;\n\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n// #include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n    #include <clipping_planes_fragment>\n    \n    #include <mesh_phong_diffuse_color>\n    \n    #include <logdepthbuf_fragment>\n    #include <__ShaderMaterial__map_fragment_begin_chunk>\n    #include <map_fragment>\n    #include <color_fragment>\n    // #include <alphamap_fragment>\n    #include <mesh_phong_switching_alpha_map>\n    #include <alphatest_fragment>\n    #include <alphahash_fragment>\n    #include <specularmap_fragment>\n    #include <normal_fragment_begin>\n    #include <normal_fragment_maps>\n    #include <emissivemap_fragment>\n\n    // accumulation\n    #include <lights_phong_fragment>\n    #include <lights_fragment_begin>\n    #include <lights_fragment_maps>\n    #include <lights_fragment_end>\n\n    // modulation\n    #include <aomap_fragment>\n\n    vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n    \n    #include <envmap_fragment>\n    #include <opaque_fragment>\n    #include <tonemapping_fragment>\n    #include <colorspace_fragment>\n    #include <fog_fragment>\n    #include <premultiplied_alpha_fragment>\n    #include <dithering_fragment>\n\n}`;\n// EXTERNAL MODULE: ./node_modules/three/build/three.module.js\nvar three_module = __webpack_require__(75);\n;// CONCATENATED MODULE: ./esm/chunk/GLSLChunk.js\n\n/**\n * ShaderChunkに登録を行うGLSLのコード片を格納するクラス。\n * GLSLコードの共有化を目的とする。\n */\nclass GLSLChunk_GLSLChunk {\n  /**\n   * ShaderChunkに登録する名前。\n   */\n  static getChunkName() {\n    return "";\n  }\n  /**\n   * ShaderChunkに登録するGLSLコード。\n   */\n  static getChunk() {\n    return "";\n  }\n  /**\n   * Chunkに関連する定数Defineを格納したオブジェクトを取得する。\n   * @see https://threejs.org/docs/#api/en/materials/ShaderMaterial.defines\n   */\n  static getDefines() {\n    return {};\n  }\n  /**\n   * ShaderChunkにGLSLコードを登録する。\n   */\n  static registerChunk() {\n    if (three_module/* ShaderChunk */.WdD && three_module/* ShaderChunk */.WdD[this.getChunkName()] == null) {\n      three_module/* ShaderChunk */.WdD[this.getChunkName()] = this.getChunk();\n    }\n  }\n  /**\n   * Chunkに関連する共有変数Uniformsを格納したオブジェクトを取得する。\n   * @see https://threejs.org/docs/#api/en/materials/ShaderMaterial.uniforms\n   */\n  static getUniform() {\n    return {};\n  }\n}\n;// CONCATENATED MODULE: ./esm/chunk/AnimationChunk.js\n\n/**\n * IAnimatableインターフェースで定義されたアニメーションを実行するGLSLチャンク。\n * uniformのtime値を操作する。\n * time値によってどのように変化するかは実装するShaderによる。\n */\nclass AnimationChunk_AnimationChunk extends GLSLChunk_GLSLChunk {\n  static registerChunk() {\n    TimeAnimationUniformChunk.registerChunk();\n  }\n  static getUniform() {\n    return {\n      time: {\n        value: 0.0\n      },\n      isAnimate: {\n        value: true\n      }\n    };\n  }\n  static addTime(self, delta) {\n    self.uniforms.time.value += delta * self.speed;\n  }\n}\nclass TimeAnimationUniformChunk extends GLSLChunk_GLSLChunk {\n  static getChunkName() {\n    return "time_animation_uniform_chunk";\n  }\n  static getChunk() {\n    return /* GLSL */`\n    uniform float time;\n    uniform bool isAnimate;\n    `;\n  }\n}\n;// CONCATENATED MODULE: ./esm/chunk/ExpansionChunk.js\n\nclass ExpansionChunk extends GLSLChunk_GLSLChunk {\n  static registerChunk() {\n    ExpansionUniformChunk.registerChunk();\n    ExpansionVertexChunk.registerChunk();\n  }\n  static getDefines() {\n    return {\n      USE_EXPANSION: false\n    };\n  }\n  static getUniform() {\n    return {\n      expansionStrength: {\n        value: 0.0\n      }\n    };\n  }\n}\nclass ExpansionUniformChunk extends GLSLChunk_GLSLChunk {\n  static getChunkName() {\n    return "__expansion_uniform_chunk";\n  }\n  static getChunk() {\n    return /* GLSL */`\n    #ifdef USE_EXPANSION\n      uniform float expansionStrength;\n    #endif\n    `;\n  }\n}\nclass ExpansionVertexChunk extends GLSLChunk_GLSLChunk {\n  static getChunkName() {\n    return "__expansion_vertex_chunk";\n  }\n  static getChunk() {\n    return `\n    #ifdef USE_EXPANSION\n      transformed += normal * expansionStrength;\n    #endif\n    `;\n  }\n}\n;// CONCATENATED MODULE: ./esm/chunk/MapChunk.js\n\n\n/**\n * マスクテクスチャを利用するShaderMaterial用Chunk。\n * マスクテクスチャがどのように描画に反映されるかは、各Materialのシェーダー実装による。\n */\nclass MapChunk extends GLSLChunk_GLSLChunk {\n  static registerChunk() {\n    super.registerChunk();\n    MapUniformChunk.registerChunk();\n    MapFragmentChunk.registerChunk();\n    MapFragmentBeginChunk.registerChunk();\n  }\n  static getUniform() {\n    return three_module/* UniformsUtils */.rDY.merge([super.getUniform(), {\n      hasMap: {\n        value: false\n      },\n      map: {\n        value: null\n      }\n    }]);\n  }\n  static getMap(_self) {\n    return _self.uniforms.map.value;\n  }\n  static setMap(_self, val) {\n    _self.uniforms.map.value = val;\n    _self.uniforms.hasMap.value = val != null;\n  }\n}\nclass MapUniformChunk extends GLSLChunk_GLSLChunk {\n  static getChunkName() {\n    return "map_uniform_chunk";\n  }\n  static getChunk() {\n    return /* GLSL */`\n      uniform bool hasMap;\n      uniform sampler2D map;\n    `;\n  }\n}\nclass MapFragmentChunk extends GLSLChunk_GLSLChunk {\n  static getChunkName() {\n    return "map_fragment_chunk";\n  }\n  static getChunk() {\n    return /* GLSL */`\n      if( hasMap ){\n        vec4 texelColor = texture2D( map, mapUV );\n        diffuseColor *= texelColor;\n      }\n    `;\n  }\n}\nclass MapFragmentBeginChunk extends GLSLChunk_GLSLChunk {\n  static getChunkName() {\n    return "__ShaderMaterial__map_fragment_begin_chunk";\n  }\n  static getChunk() {\n    return /* GLSL */`\n      vec2 mapUV = uvPosition;\n    `;\n  }\n}\n;// CONCATENATED MODULE: ./esm/chunk/MeshPhongChunk.js\n\n/**\n * MeshPhongMaterialと同等の機能を備えたShaderMaterialを実装するために必要なGLSLコードを格納したクラス。\n */\nclass MeshPhongChunk extends GLSLChunk_GLSLChunk {\n  static registerChunk() {\n    MeshPhongUniformChunk.registerChunk();\n    MeshPhongDiffuseColorChunk.registerChunk();\n    MeshPhongSwitchingAlphaMapChunk.registerChunk();\n    MeshPositionVaryingChunk.registerChunk();\n    MeshPositionVertexChunk.registerChunk();\n  }\n  static getDefines() {\n    return {\n      USE_MESH_POSITION: false\n    };\n  }\n}\nclass MeshPhongUniformChunk extends GLSLChunk_GLSLChunk {\n  static getChunkName() {\n    return "mesh_phong_uniform";\n  }\n  static getChunk() {\n    return /* GLSL */`\n      uniform vec3 diffuse;\n      uniform vec3 emissive;\n      uniform vec3 specular;\n      uniform float shininess;\n      uniform float opacity;\n      uniform bool hasAlphaMap;\n      uniform sampler2D alphaMap;\n    `;\n  }\n}\nclass MeshPhongDiffuseColorChunk extends GLSLChunk_GLSLChunk {\n  static getChunkName() {\n    return "mesh_phong_diffuse_color";\n  }\n  static getChunk() {\n    return /* GLSL */`\n    vec4 diffuseColor = vec4( diffuse, opacity );\n    ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n    vec3 totalEmissiveRadiance = emissive;\n    `;\n  }\n}\nclass MeshPhongSwitchingAlphaMapChunk extends GLSLChunk_GLSLChunk {\n  static getChunkName() {\n    return "mesh_phong_switching_alpha_map";\n  }\n  static getChunk() {\n    return /* GLSL */`\n      if( hasAlphaMap ){\n        diffuseColor.a *= texture2D( alphaMap, mapUV ).g;\n      }\n    `;\n  }\n}\nclass MeshPositionVaryingChunk extends GLSLChunk_GLSLChunk {\n  static getChunkName() {\n    return "mesh_position_varying";\n  }\n  static getChunk() {\n    return /* GLSL */`\n    #ifdef USE_MESH_POSITION\n    varying vec3 meshPosition;\n    #endif\n    `;\n  }\n}\nclass MeshPositionVertexChunk extends GLSLChunk_GLSLChunk {\n  static getChunkName() {\n    return "mesh_position_vertex";\n  }\n  static getChunk() {\n    return /* GLSL */`\n    #ifdef USE_MESH_POSITION\n    meshPosition = position;\n    #endif\n    `;\n  }\n}\n;// CONCATENATED MODULE: ./esm/chunk/SurfaceNormalChunk.js\n\nclass SurfaceNormalChunk_SurfaceNormalChunk extends GLSLChunk_GLSLChunk {\n  static registerChunk() {\n    SurfaceNormalVaryingChunk.registerChunk();\n    SurfaceNormalVertexChunk.registerChunk();\n  }\n  static getDefines() {\n    return {\n      USE_SURFACE_NORMAL: false\n    };\n  }\n  static getUniform() {\n    return {};\n  }\n}\nclass SurfaceNormalVaryingChunk extends GLSLChunk_GLSLChunk {\n  static getChunkName() {\n    return "surface_normal_varying_chunk";\n  }\n  static getChunk() {\n    return /* GLSL */`\n    #ifdef USE_SURFACE_NORMAL\n      varying vec3 surfaceNormal;\n    #endif\n    `;\n  }\n}\nclass SurfaceNormalVertexChunk extends GLSLChunk_GLSLChunk {\n  static getChunkName() {\n    return "surface_normal_vertex_chunk";\n  }\n  static getChunk() {\n    return /* GLSL */`\n    #ifdef USE_SURFACE_NORMAL\n      surfaceNormal = normalize( transformedNormal );\n    #endif\n    `;\n  }\n}\n;// CONCATENATED MODULE: ./esm/chunk/TilingFBMChunk.js\n\nclass TilingFBMChunk_TilingFBMChunk extends GLSLChunk_GLSLChunk {\n  static registerChunk() {\n    TilingFBMFunctionChunk.registerChunk();\n    TilingFBMUniformChunk.registerChunk();\n  }\n  static getUniform() {\n    return {\n      tiles: {\n        value: 2.0\n      },\n      hashLoop: {\n        value: 8.0\n      },\n      amp: {\n        value: 0.5\n      }\n    };\n  }\n  static getDefines() {\n    return {\n      NUM_OCTAVES: 3.0\n    };\n  }\n}\nclass TilingFBMFunctionChunk extends GLSLChunk_GLSLChunk {\n  static getChunkName() {\n    return "tiling_fbm_function_chunk";\n  }\n  static getChunk() {\n    //language=GLSL\n    return /* GLSL */`\n        // Based On Dave_Hoskins \n        // https://www.shadertoy.com/view/4dlGW2\n        \n        float hash(in vec2 p, in float hashLoop)\n        {\n            p = mod(p, hashLoop);\n            return fract(1e4 * sin(17.0 * p.x + p.y * 0.1) * (0.1 + abs(sin(p.y * 13.0 + p.x))));\n        }\n        \n        float noise(in vec2 p, in float hashLoop)\n        {\n            p *= hashLoop;\n            vec2 f = fract(p);\n            vec2 u = f*f*(3.0-2.0*f);\n        \n            p = floor(p);\n            float a = hash(p, hashLoop);\n            float b = hash(p + vec2(1.0, 0.0), hashLoop);\n            float c = hash(p + vec2(0.0, 1.0), hashLoop);\n            float d = hash(p + vec2(1.0, 1.0), hashLoop);\n        \n            return mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;\n        }\n        \n        // Based On Dave_Hoskins \n        // https://www.shadertoy.com/view/4dlGW2\n        \n        float fbm(in vec2 p)\n        {\n            float v = 0.0;\n            \n            p = mod(p, hashLoop);\n            float a = amp;\n            float hashLoopVal = hashLoop;\n            \n            for (int i = 0; i < NUM_OCTAVES; i++){\n                v += noise(p, hashLoopVal) * a;\n                a *= .5;\n                hashLoopVal *= 2.0;\n            }\n            return v;\n        }\n    `;\n  }\n}\nclass TilingFBMUniformChunk extends GLSLChunk_GLSLChunk {\n  static getChunkName() {\n    return "tiling_fbm_uniform_chunk";\n  }\n  static getChunk() {\n    //language=GLSL\n    return /* GLSL */`\n      uniform float tiles;  \n      uniform float hashLoop;\n      uniform float amp;\n    `;\n  }\n}\n;// CONCATENATED MODULE: ./esm/chunk/WavyAnimationChunk.js\n\n\n/**\n * IWaveAnimatableインターフェースで定義されたアニメーションを実装するためのGLSLチャンク。\n * 実行にはグリッドid値が必要。idはvec2。\n * 結果はdiffuseColor.aに反映される。\n */\nclass WavyAnimationChunk_WavyAnimationChunk extends (/* unused pure expression or super */ null && (AnimationChunk)) {\n  static registerChunk() {\n    super.registerChunk();\n    WavyAnimationFragmentChunk.registerChunk();\n    WavyAnimationUniformChunk.registerChunk();\n  }\n  static getUniform() {\n    const uniforms = {\n      raisedBottom: {\n        value: 0.05\n      },\n      waveFrequency: {\n        value: 0.2\n      },\n      wavePow: {\n        value: 4.0\n      },\n      direction: {\n        value: Directions.vertical\n      }\n    };\n    return {\n      ...super.getUniform(),\n      ...uniforms\n    };\n  }\n}\nclass WavyAnimationFragmentChunk extends (/* unused pure expression or super */ null && (GLSLChunk)) {\n  static getChunkName() {\n    return "wavy_animation_fragment_chunk";\n  }\n  static getChunk() {\n    return /* GLSL */`\n    float distance = id.y;\n    if( direction == ${Directions.horizontal}){\n      distance = id.x;\n    }else if( direction == ${Directions.radial} ){\n      distance = length(id.xy);\n    }\n\n    float wavy = isAnimate\n      ? pow( sin( (distance * waveFrequency - time) ), wavePow) + raisedBottom\n      : 1.0;\n  \n    diffuseColor.a *= wavy;\n    `;\n  }\n}\nclass WavyAnimationUniformChunk extends (/* unused pure expression or super */ null && (GLSLChunk)) {\n  static getChunkName() {\n    return "wavy_animation_uniform_chunk";\n  }\n  static getChunk() {\n    return /* GLSL */`\n    uniform float raisedBottom;\n    uniform float waveFrequency;\n    uniform float wavePow;\n    uniform int direction;\n    `;\n  }\n}\n/**\n * Wavyアニメーションの波及方向を示すenum。\n */\nvar Directions;\n(function (Directions) {\n  Directions[Directions["vertical"] = 4] = "vertical";\n  Directions[Directions["horizontal"] = 3] = "horizontal";\n  /**\n   * id値(0,0)を中心に同心円状に波及する。\n   */\n  Directions[Directions["radial"] = 5] = "radial";\n})(Directions || (Directions = {}));\n;// CONCATENATED MODULE: ./esm/chunk/index.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n;// CONCATENATED MODULE: ./esm/ShaderPhongMaterial.js\n\n\n\n/**\n * MeshPhongMaterialに準じるShaderMaterialクラス。\n *\n * @see https://github.com/mrdoob/three.js/blob/76c64b23d422dcfb36a28353f45b1effa1f68c5a/src/renderers/shaders/ShaderLib.js#L53\n */\nclass ShaderPhongMaterial_ShaderPhongMaterial extends three_module/* ShaderMaterial */.jyz {\n  /**\n   * コンストラクタ。\n   * @param vertexShader\n   * @param fragmentShader\n   * @param parameters\n   */\n  constructor(vertexShader, fragmentShader, parameters) {\n    super(parameters);\n    this._opacity = 1.0;\n    parameters ??= {};\n    vertexShader ??= ShaderPhongMaterial_glsl_vertex;\n    fragmentShader ??= ShaderPhongMaterial_glsl_fragment;\n    this.initChunks();\n    this.initUniforms();\n    this.initDefines();\n    this.vertexShader = vertexShader;\n    this.fragmentShader = fragmentShader;\n    this.initDefaultSetting(parameters);\n  }\n  /**\n   * このMaterialに必要なuniformsを生成する。\n   */\n  static getBasicUniforms() {\n    return three_module/* UniformsUtils */.rDY.merge([three_module/* UniformsLib */.rBU.common, three_module/* UniformsLib */.rBU.specularmap, three_module/* UniformsLib */.rBU.envmap, three_module/* UniformsLib */.rBU.aomap, three_module/* UniformsLib */.rBU.lightmap, three_module/* UniformsLib */.rBU.emissivemap, three_module/* UniformsLib */.rBU.bumpmap, three_module/* UniformsLib */.rBU.normalmap, three_module/* UniformsLib */.rBU.displacementmap, three_module/* UniformsLib */.rBU.gradientmap, three_module/* UniformsLib */.rBU.fog, three_module/* UniformsLib */.rBU.lights, {\n      emissive: {\n        value: new three_module/* Color */.Ilk(0x000000)\n      },\n      specular: {\n        value: new three_module/* Color */.Ilk(0x111111)\n      },\n      shininess: {\n        value: 30\n      },\n      hasAlphaMap: {\n        value: false\n      }\n    }, SurfaceNormalChunk_SurfaceNormalChunk.getUniform(), ExpansionChunk.getUniform(), MapChunk.getUniform()]);\n  }\n  /**\n   * ShaderChunkにこのマテリアルに必要なChunkを追加する。\n   */\n  initChunks() {\n    MeshPhongChunk.registerChunk();\n    SurfaceNormalChunk_SurfaceNormalChunk.registerChunk();\n    ExpansionChunk.registerChunk();\n    MapChunk.registerChunk();\n  }\n  /**\n   * uniformsを初期化する。\n   */\n  initUniforms() {\n    this.uniforms = three_module/* UniformsUtils */.rDY.merge([ShaderPhongMaterial_ShaderPhongMaterial.getBasicUniforms(), ExpansionChunk.getUniform(), {}]);\n  }\n  /**\n   * definesを初期化する。\n   */\n  initDefines() {\n    this.defines = Object.assign({}, MeshPhongChunk.getDefines(), SurfaceNormalChunk_SurfaceNormalChunk.getDefines(), ExpansionChunk.getDefines(), this.defines);\n  }\n  /**\n   * 1.オプションで指定されなかったパラメーター値を補完する。\n   * 2.uniformsに代入する必要のあるパラメーターを明示的に代入する。\n   *\n   * @param parameters\n   */\n  initDefaultSetting(parameters) {\n    this.uniformOpacity = this._opacity;\n    this.lights = true; //FIXME シェーダーがエラーを起こすのでlights設定は強制でON\n    // パラメータでtransparentフラグが指定されていない場合、デフォルトで透明にします。\n    // これは、フラグメントシェーダー内でalphaを利用してパターンの描画を行うためです。\n    if (parameters?.transparent == null) {\n      this.transparent = true;\n    }\n  }\n  /**\n   * MeshPhongマテリアルと互換性を持つために、colorプロパティはdiffuseへ代入される。\n   */\n  get color() {\n    return this.uniforms.diffuse.value;\n  }\n  set color(value) {\n    this.uniforms.diffuse.value = value;\n  }\n  /**\n   * 透明度\n   * @deprecated Use uniformOpacity, To be removed in version 0.3.0\n   * @see https://github.com/microsoft/TypeScript/pull/37894\n   */\n  //@ts-ignore : これはopacityプロパティとuniforms.opacityプロパティを同期するために利用されます。\n  get opacity() {\n    return this.uniformOpacity;\n  }\n  /**\n   * 透明度\n   */\n  get uniformOpacity() {\n    return this._opacity;\n  }\n  /**\n   * 透明度\n   * @param value\n   * @deprecated Use uniformOpacity, To be removed in version 0.3.0\n   * @see https://github.com/microsoft/TypeScript/pull/37894\n   */\n  //@ts-ignore : これはopacityプロパティとuniforms.opacityプロパティを同期するために利用されます。\n  set opacity(value) {\n    this.uniformOpacity = value;\n  }\n  /**\n   * 透明度\n   * opacityは基底クラスのMaterialのコンストラクタ内で明示的に1.0が代入される。\n   * この段階でuniformsはundefinedなので、そのままでは初期化できない。\n   * このsetterでは受け取った値をprivate変数に保存して、初期化後にuniformsに再代入する。\n   * @param value\n   */\n  set uniformOpacity(value) {\n    this._opacity = value;\n    if (this.uniforms?.opacity) {\n      this.uniforms.opacity.value = value;\n    }\n  }\n  get emissive() {\n    return this.uniforms.emissive.value;\n  }\n  set emissive(value) {\n    this.uniforms.emissive.value = value;\n  }\n  get map() {\n    return MapChunk.getMap(this);\n  }\n  set map(val) {\n    MapChunk.setMap(this, val);\n    this.onSetMap(val);\n  }\n  onSetMap(val) {}\n  get alphaMap() {\n    return this.uniforms.alphaMap.value;\n  }\n  set alphaMap(value) {\n    this.uniforms.alphaMap.value = value;\n    this.uniforms.hasAlphaMap.value = value != null;\n    this.onSetAlphaMap(value);\n  }\n  onSetAlphaMap(value) {}\n  /**\n   * 発光状態のために、マテリアルの設定をまとめて変更する。\n   * {@link https://stackoverflow.com/questions/37647853/three-js-depthwrite-vs-depthtest-for-transparent-canvas-texture-map-on-three-p}\n   */\n  startGlow() {\n    this.alphaTest = 0.0;\n    this.depthWrite = false;\n    this.blending = three_module/* AdditiveBlending */.WMw;\n  }\n}\n;// CONCATENATED MODULE: ./esm/ShaderSpriteMaterial.js\n\n\n\nclass ShaderSpriteMaterial_ShaderSpriteMaterial extends (/* unused pure expression or super */ null && (ShaderMaterial)) {\n  /**\n   * コンストラクタ。\n   * @param vertexShader\n   * @param fragmentShader\n   * @param parameters\n   */\n  constructor(vertexShader, fragmentShader, parameters) {\n    super(parameters);\n    /**\n     * @default true\n     */\n    this.sizeAttenuation = true;\n    this._opacity = 1.0;\n    parameters ??= {};\n    vertexShader ??= vertex;\n    fragmentShader ??= fragment;\n    this.initChunks();\n    this.initUniforms();\n    this.initDefines();\n    this.vertexShader = vertexShader;\n    this.fragmentShader = fragmentShader;\n    this.initDefaultSetting(parameters);\n  }\n  /**\n   * ShaderChunkにこのマテリアルに必要なChunkを追加する。\n   */\n  initChunks() {\n    SpriteChunk.registerChunk();\n  }\n  /**\n   * uniformsを初期化する。\n   */\n  initUniforms() {\n    this.uniforms = UniformsUtils.merge([SpriteChunk.getUniform(), {\n      uvTransform: {\n        value: new Matrix3()\n      }\n    }]);\n  }\n  /**\n   * definesを初期化する。\n   */\n  initDefines() {\n    this.defines = Object.assign({}, SpriteChunk.getDefines(), this.defines);\n  }\n  /**\n   * 1.オプションで指定されなかったパラメーター値を補完する。\n   * 2.uniformsに代入する必要のあるパラメーターを明示的に代入する。\n   *\n   * @param parameters\n   */\n  initDefaultSetting(parameters) {\n    this.uniformOpacity = this._opacity;\n  }\n  /**\n   * 透明度\n   * @deprecated Use uniformOpacity, To be removed in version 0.3.0\n   * @see https://github.com/microsoft/TypeScript/pull/37894\n   */\n  //@ts-ignore : これはopacityプロパティとuniforms.opacityプロパティを同期するために利用されます。\n  get opacity() {\n    return this._opacity;\n  }\n  /**\n   * 透明度\n   */\n  get uniformOpacity() {\n    return this._opacity;\n  }\n  /**\n   * 透明度\n   * @deprecated Use uniformOpacity, To be removed in version 0.3.0\n   * @param value\n   */\n  //@ts-ignore : これはopacityプロパティとuniforms.opacityプロパティを同期するために利用されます。\n  set opacity(value) {\n    this.uniformOpacity = value;\n  }\n  /**\n   * 透明度\n   * opacityは基底クラスのMaterialのコンストラクタ内で明示的に1.0が代入される。\n   * この段階でuniformsはundefinedなので、そのままでは初期化できない。\n   * このsetterでは受け取った値をprivate変数に保存して、初期化後にuniformsに再代入する。\n   * @param value\n   */\n  set uniformOpacity(value) {\n    this._opacity = value;\n    if (this.uniforms?.opacity) {\n      this.uniforms.opacity.value = value;\n    }\n  }\n  /**\n   * Spriteマテリアルと互換性を持つために、colorプロパティはdiffuseへ代入される。\n   */\n  get color() {\n    return this.uniforms.diffuse.value;\n  }\n  set color(value) {\n    this.uniforms.diffuse.value = value;\n  }\n  get center() {\n    return this.uniforms.center.value;\n  }\n  set center(value) {\n    this.uniforms.center.value = value;\n  }\n  get rotation() {\n    return this.uniforms.rotation.value;\n  }\n  set rotation(value) {\n    this.uniforms.rotation.value = value;\n  }\n  get uvTransform() {\n    return this.uniforms.uvTransform.value;\n  }\n  set uvTransform(value) {\n    this.uniforms.uvTransform.value = value;\n  }\n  get map() {\n    return this.uniforms.map.value;\n  }\n  set map(value) {\n    this.uniforms.map.value = value;\n  }\n  get alphaMap() {\n    return this.uniforms.alphaMap.value;\n  }\n  set alphaMap(value) {\n    this.uniforms.alphaMap.value = value;\n  }\n}\n;// CONCATENATED MODULE: ./esm/ShaderBasicMaterial.js\n\n\n\n/**\n * MeshBasicMaterialに準じたShaderMaterial\n */\nclass ShaderBasicMaterial_ShaderBasicMaterial extends (/* unused pure expression or super */ null && (ShaderMaterial)) {\n  /**\n   * @param vertexShader\n   * @param fragmentShader\n   * @param parameters\n   */\n  constructor(vertexShader, fragmentShader, parameters) {\n    super(parameters);\n    this._opacity = 1.0;\n    this.uniforms = ShaderBasicMaterial_ShaderBasicMaterial.getBasicUniforms();\n    this.vertexShader = vertexShader ?? vertex;\n    this.fragmentShader = fragmentShader ?? fragment;\n    SurfaceNormalChunk.registerChunk();\n    this.initDefines();\n    this.uniformOpacity = this._opacity;\n  }\n  /**\n   * このMaterialに必要なuniformsを生成する。\n   *\n   * @see https://github.com/mrdoob/three.js/blob/0c26bb4bb8220126447c8373154ac045588441de/src/renderers/shaders/ShaderLib.js#L11\n   */\n  static getBasicUniforms() {\n    return UniformsUtils.merge([UniformsLib.common, UniformsLib.specularmap, UniformsLib.envmap, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.fog]);\n  }\n  get color() {\n    return this.uniforms.diffuse.value;\n  }\n  set color(value) {\n    this.uniforms.diffuse.value = value;\n  }\n  get uniformOpacity() {\n    return this._opacity;\n  }\n  set uniformOpacity(value) {\n    this._opacity = value;\n    if (this.uniforms?.opacity) {\n      this.uniforms.opacity.value = value;\n    }\n  }\n  initDefines() {\n    this.defines = Object.assign({}, SurfaceNormalChunk.getDefines(), this.defines);\n  }\n}\n;// CONCATENATED MODULE: ./esm/contour/ContourMaterial.js\n\n\n\n\n/**\n * テクスチャを等高線状にマップするマテリアル。\n * マッピング以外の機能はMeshPhongMaterialに準じる。\n */\nclass ContourMaterial extends (/* unused pure expression or super */ null && (ShaderPhongMaterial)) {\n  get map() {\n    return this._map;\n  }\n  loadMap(url, geo) {\n    this._map = new TextureLoader().load(url, texture => {\n      if (this.uniforms && this.uniforms.map) {\n        this.uniforms.map.value = texture;\n      }\n    });\n    geo.computeBoundingBox();\n    this.uniforms.top.value = geo.boundingBox.max.y;\n    this.uniforms.bottom.value = geo.boundingBox.min.y;\n  }\n  constructor(parameters) {\n    super(vertex, fragment, parameters);\n  }\n  initDefines() {\n    super.initDefines();\n    this.defines.USE_MESH_POSITION = true;\n  }\n  initUniforms() {\n    this.uniforms = UniformsUtils.merge([ShaderPhongMaterial.getBasicUniforms(), {\n      top: {\n        value: 1.0\n      },\n      bottom: {\n        value: -1.0\n      }\n    }]);\n  }\n  initDefaultSetting(parameters) {\n    super.initDefaultSetting(parameters);\n    if (this.transparent && parameters.alphaTest == null) {\n      this.alphaTest = 0.5;\n    }\n    if (parameters.side == null) {\n      this.side = DoubleSide;\n    } else {\n      this.side = parameters.side;\n    }\n  }\n}\n;// CONCATENATED MODULE: ./esm/GridMaterial.js\n\n\n\n/**\n * グリッド状に分割されたマテリアル。\n */\nclass GridMaterial_GridMaterial extends (/* unused pure expression or super */ null && (ShaderPhongMaterial)) {\n  get division() {\n    return this.uniforms.division.value;\n  }\n  set division(value) {\n    this.uniforms.division.value = value;\n  }\n  get divisionScaleX() {\n    return this.uniforms.divisionScaleX.value;\n  }\n  set divisionScaleX(value) {\n    this.uniforms.divisionScaleX.value = value;\n  }\n  get isReversed() {\n    return this.uniforms.isReversed.value;\n  }\n  set isReversed(value) {\n    this.uniforms.isReversed.value = value;\n  }\n  get maskTexture() {\n    return MaskMapChunk.getMaskTexture(this);\n  }\n  set maskTexture(val) {\n    MaskMapChunk.setMaskTexture(this, val);\n  }\n  initChunks() {\n    super.initChunks();\n    MaskMapChunk.registerChunk();\n    ReversibleChunk.registerChunk();\n  }\n  static getBasicUniforms() {\n    return UniformsUtils.merge([ShaderPhongMaterial.getBasicUniforms(), ReversibleChunk.getUniform(), MaskMapChunk.getUniform(), RepeatPatternChunk.getUniform()]);\n  }\n}\n// EXTERNAL MODULE: ./node_modules/@masatomakino/raf-ticker/esm/index.js + 3 modules\nvar esm = __webpack_require__(429);\n;// CONCATENATED MODULE: ./esm/WavyGridMaterial.js\n\n\n\n\n/**\n * グリッド状に分割され、Wavyアニメーションを行うマテリアル。\n */\nclass WavyGridMaterial_WavyGridMaterial extends (/* unused pure expression or super */ null && (GridMaterial)) {\n  addTime(delta) {\n    AnimationChunk.addTime(this, delta);\n  }\n  /**\n   * 波アニメーションを行うか否か。\n   */\n  get isAnimate() {\n    return this.uniforms.isAnimate.value;\n  }\n  set isAnimate(value) {\n    this.uniforms.isAnimate.value = value;\n    if (this.isAnimate) {\n      this.startAnimation();\n    } else {\n      this.stopAnimation();\n    }\n  }\n  /**\n   * 波の振幅\n   * 1の場合、幅1ヘックス\n   * 0.5の場合、幅2ヘックスになる\n   */\n  get waveFrequency() {\n    return this.uniforms.waveFrequency.value;\n  }\n  set waveFrequency(value) {\n    this.uniforms.waveFrequency.value = value;\n  }\n  get wavePow() {\n    return this.uniforms.wavePow.value;\n  }\n  set wavePow(value) {\n    this.uniforms.wavePow.value = value;\n  }\n  /**\n   * 明るさの底上げ\n   */\n  get raisedBottom() {\n    return this.uniforms.raisedBottom.value;\n  }\n  set raisedBottom(value) {\n    this.uniforms.raisedBottom.value = value;\n  }\n  /**\n   * 波が発生する方角\n   */\n  get direction() {\n    return this.uniforms.direction.value;\n  }\n  set direction(value) {\n    this.uniforms.direction.value = value;\n  }\n  constructor(vertexShader, fragmentShader, parameters) {\n    super(vertexShader, fragmentShader, parameters);\n    /**\n     * 波の速度\n     * 0.5にすると1の半分の速度になる。\n     * マイナスを指定すると、波の進行方向が反転する。\n     */\n    this.speed = -0.5;\n    /*\n     * IAnimatable implements\n     */\n    this.animationListener = e => {\n      this.addTime(e.delta / 1000);\n    };\n    this.isAnimate = this.isAnimate; //reset and start animation\n  }\n  initChunks() {\n    super.initChunks();\n    WavyAnimationChunk.registerChunk();\n  }\n  static getBasicUniforms() {\n    return UniformsUtils.merge([super.getBasicUniforms(), ReversibleChunk.getUniform(), WavyAnimationChunk.getUniform(), MaskMapChunk.getUniform()]);\n  }\n  initDefaultSetting(parameters) {\n    super.initDefaultSetting(parameters);\n  }\n  startAnimation() {\n    RAFTicker.on("onBeforeTick", this.animationListener);\n  }\n  stopAnimation() {\n    RAFTicker.off("onBeforeTick", this.animationListener);\n  }\n}\n;// CONCATENATED MODULE: ./esm/crossGrid/CrossGridMaterial.js\n\n\n\n\n/**\n * 十字線を正方形グリッドの中心に描画するマテリアル。\n */\nclass CrossGridMaterial extends (/* unused pure expression or super */ null && (WavyGridMaterial)) {\n  /**\n   * グリッド線の太さ\n   * 0.0で線なし、0.5でグリッド面なしになる。\n   */\n  get gridWeight() {\n    return this.uniforms.gridWeight.value;\n  }\n  set gridWeight(value) {\n    this.uniforms.gridWeight.value = value;\n  }\n  get radius() {\n    return this.uniforms.radius.value;\n  }\n  set radius(value) {\n    this.uniforms.radius.value = value;\n  }\n  constructor(parameters) {\n    super(vertex, fragment, parameters);\n  }\n  initUniforms() {\n    this.uniforms = UniformsUtils.merge([WavyGridMaterial.getBasicUniforms(), {\n      gridWeight: {\n        value: 0.03\n      },\n      radius: {\n        value: 0.15\n      }\n    }]);\n  }\n}\n;// CONCATENATED MODULE: ./esm/halftoneGrid/HalftoneGridMaterial.js\n\n\n\n\n/**\n * MaskMapをハーフトーン分解するマテリアル\n */\nclass HalftoneGridMaterial extends (/* unused pure expression or super */ null && (WavyGridMaterial)) {\n  get radius() {\n    return this.uniforms.radius.value;\n  }\n  set radius(value) {\n    this.uniforms.radius.value = value;\n  }\n  constructor(parameters) {\n    super(vertex, fragment, parameters);\n  }\n  initUniforms() {\n    this.uniforms = UniformsUtils.merge([WavyGridMaterial.getBasicUniforms(), {\n      radius: {\n        value: 0.75\n      }\n    }]);\n  }\n}\n;// CONCATENATED MODULE: ./esm/hexGrid/HexGridMaterial.js\n\n\n\n\n\n/**\n * 六角形グリッドマテリアル\n */\nclass HexGridMaterial extends (/* unused pure expression or super */ null && (WavyGridMaterial)) {\n  /**\n   * グリッド線の太さ\n   * 0.0で線なし、0.5でグリッド面なしになる。\n   */\n  get gridWeight() {\n    return this.uniforms.gridWeight.value;\n  }\n  set gridWeight(value) {\n    this.uniforms.gridWeight.value = value;\n  }\n  constructor(parameters) {\n    super(vertex, fragment, parameters);\n  }\n  initUniforms() {\n    this.uniforms = UniformsUtils.merge([WavyGridMaterial.getBasicUniforms(), {\n      gridWeight: {\n        value: 0.03\n      }\n    }]);\n  }\n  initChunks() {\n    super.initChunks();\n    HexGridChunk.registerChunk();\n  }\n}\n;// CONCATENATED MODULE: ./esm/squareGrid/SquareGridMaterial.js\n\n\n\n\n/**\n * 四角形グリッドマテリアル\n */\nclass SquareGridMaterial extends (/* unused pure expression or super */ null && (WavyGridMaterial)) {\n  /**\n   * グリッド線の太さ\n   * 0.0で線なし、0.5でグリッド面なしになる。\n   */\n  get gridWeight() {\n    return this.uniforms.gridWeight.value;\n  }\n  set gridWeight(value) {\n    this.uniforms.gridWeight.value = value;\n  }\n  constructor(parameters) {\n    super(vertex, fragment, parameters);\n  }\n  initUniforms() {\n    this.uniforms = UniformsUtils.merge([WavyGridMaterial.getBasicUniforms(), {\n      gridWeight: {\n        value: 0.03\n      }\n    }]);\n  }\n}\n;// CONCATENATED MODULE: ./esm/skyCloud/SkyCloudMaterial.js\n\n\n\n\n\n\nclass SkyCloudMaterial extends (/* unused pure expression or super */ null && (ShaderPhongMaterial)) {\n  get scale() {\n    return this.uniforms.scale.value;\n  }\n  set scale(value) {\n    this.uniforms.scale.value = value;\n  }\n  /*\n   * implements IAnimatable\n   */\n  addTime(delta) {\n    AnimationChunk.addTime(this, delta);\n  }\n  get isAnimate() {\n    return this.uniforms.isAnimate.value;\n  }\n  set isAnimate(value) {\n    this.uniforms.isAnimate.value = value;\n    if (this.isAnimate) {\n      this.startAnimation();\n    } else {\n      this.stopAnimation();\n    }\n  }\n  get skyColor() {\n    return this.uniforms.skyColor.value;\n  }\n  set skyColor(value) {\n    this.uniforms.skyColor.value = value;\n  }\n  get cloudVolume() {\n    return this.uniforms.cloudVolume.value;\n  }\n  set cloudVolume(value) {\n    this.uniforms.cloudVolume.value = value;\n  }\n  get cloudBottomVolume() {\n    return this.uniforms.cloudBottomVolume.value;\n  }\n  set cloudBottomVolume(value) {\n    this.uniforms.cloudBottomVolume.value = value;\n  }\n  get cloudBottomSaturation() {\n    return this.uniforms.cloudBottomSaturation.value;\n  }\n  set cloudBottomSaturation(value) {\n    this.uniforms.cloudBottomSaturation.value = value;\n  }\n  get cloudTransformSpeed() {\n    return this.uniforms.cloudTransformSpeed.value;\n  }\n  set cloudTransformSpeed(value) {\n    this.uniforms.cloudTransformSpeed.value = value;\n  }\n  /**\n   *\n   * @param parameters\n   */\n  constructor(parameters) {\n    super(vertex, fragment, parameters);\n    /**\n     * 波の速度\n     * 0.5にすると1の半分の速度になる。\n     * マイナスを指定すると、波の進行方向が反転する。\n     */\n    this.speed = -0.02;\n    /*\n     * IAnimatable implements\n     */\n    this.animationListener = e => {\n      this.addTime(e.delta / 1000);\n    };\n    this.isAnimate = this.isAnimate; //reset and start animation\n  }\n  initChunks() {\n    super.initChunks();\n    AnimationChunk.registerChunk();\n  }\n  initUniforms() {\n    this.uniforms = UniformsUtils.merge([ShaderPhongMaterial.getBasicUniforms(), AnimationChunk.getUniform(), {\n      scale: {\n        value: 3.0\n      },\n      cloudTransformSpeed: {\n        value: 0.15\n      },\n      cloudVolume: {\n        value: 16.0\n      },\n      cloudBottomVolume: {\n        value: 0.08\n      },\n      cloudBottomSaturation: {\n        value: 0.5\n      },\n      skyColor: {\n        value: new Color(0.101961, 0.619608, 0.666667)\n      }\n    }]);\n  }\n  startAnimation() {\n    RAFTicker.on("onBeforeTick", this.animationListener);\n  }\n  stopAnimation() {\n    RAFTicker.off("onBeforeTick", this.animationListener);\n  }\n}\n;// CONCATENATED MODULE: ./esm/fbmDissolve/FBMDissolveMaterial.js\n\n\n\n\n\nclass FBMDissolveMaterial extends (/* unused pure expression or super */ null && (ShaderPhongMaterial)) {\n  get tiles() {\n    return this.uniforms.tiles.value;\n  }\n  set tiles(value) {\n    this.uniforms.tiles.value = value;\n  }\n  get hashLoop() {\n    return this.uniforms.hashLoop.value;\n  }\n  set hashLoop(value) {\n    this.uniforms.hashLoop.value = value;\n  }\n  get amp() {\n    return this.uniforms.amp.value;\n  }\n  set amp(value) {\n    this.uniforms.amp.value = value;\n  }\n  get progress() {\n    return this.uniforms.progress.value;\n  }\n  set progress(value) {\n    this.uniforms.progress.value = value;\n  }\n  get edgeWeight() {\n    return this.uniforms.edgeWeight.value;\n  }\n  set edgeWeight(value) {\n    this.uniforms.edgeWeight.value = value;\n  }\n  get edgeColor() {\n    return this.uniforms.edgeColor.value;\n  }\n  set edgeColor(value) {\n    this.uniforms.edgeColor.value = value;\n  }\n  /**\n   *\n   * @param parameters\n   */\n  constructor(parameters) {\n    super(vertex, fragment, parameters);\n  }\n  initUniforms() {\n    this.uniforms = UniformsUtils.merge([ShaderPhongMaterial.getBasicUniforms(), TilingFBMChunk.getUniform(), {\n      progress: {\n        value: 0.0\n      },\n      edgeWeight: {\n        value: 0.1\n      },\n      edgeColor: {\n        value: new Color(1.0, 1.0, 1.0)\n      }\n    }]);\n  }\n  initChunks() {\n    super.initChunks();\n    TilingFBMChunk.registerChunk();\n  }\n  /**\n   * definesを初期化する。\n   */\n  initDefines() {\n    super.initDefines();\n    this.defines = Object.assign({}, TilingFBMChunk.getDefines(), this.defines);\n  }\n}\n;// CONCATENATED MODULE: ./esm/fbmFire/FBMFireMaterial.glsl.js\n/**\n * FBMノイズを使った炎の表現\n *\n * @see : https://github.com/mrdoob/three.js/blob/master/src/renderers/shaders/ShaderLib/meshphong.glsl.js\n */\n// language=GLSL\nconst FBMFireMaterial_glsl_fragment = /* GLSL */`\n#define PHONG\n\n#include <mesh_phong_uniform>\nvarying vec2 uvPosition;\n#include <mesh_position_varying>\n\n#include <tiling_fbm_uniform_chunk>\n#include <tiling_fbm_function_chunk>\n#include <time_animation_uniform_chunk>\n\nuniform float strength;\nuniform float bloom;\n\n#include <surface_normal_varying_chunk>\nuniform float rimStrength;\nuniform float rimPow;\n\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n// #include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main()\n{\n    #include <clipping_planes_fragment>\n  \n    #include <mesh_phong_diffuse_color>\n    \n    #include <logdepthbuf_fragment>\n    #include <__ShaderMaterial__map_fragment_begin_chunk>\n    #include <map_fragment>\n    #include <color_fragment>\n    \n    vec2 uv = uvPosition;\n    float uVy = uv.y;\n    uv *= tiles;\n\n    vec2 q = vec2(0.0);\n    q.x = fbm( uv + vec2(1.7,9.2) +.16  * time );\n    q.y = fbm( uv + vec2(8.3,2.8) +.356 * time );\n\n    float fbmVal = fbm(uv + q);\n    fbmVal += 1.0-(uVy * 1.0 );\n    fbmVal *= 1.0-uVy;\n    \n    vec3 viewDir = normalize(vViewPosition);    \n    float rimGlow = 1.0 - max(0.0, dot(surfaceNormal, viewDir));\n    rimGlow = pow(rimGlow, rimPow) * rimStrength;\n    rimGlow = clamp( rimGlow, 0.0, 1.0);\n    fbmVal *= 1.0-rimGlow;\n    \n    vec3 color = diffuseColor.rgb;\n    \n    float st = 1.0 - strength;\n    float bri = smoothstep( max( st - 0.4, 0.0 ), st, fbmVal );\n    \n    float blm = 1.0 - bloom;\n    float bloomVal = smoothstep( blm - 0.4, blm, fbmVal );\n    color += bloomVal;\n\n    diffuseColor.rgb = color;\n    diffuseColor.a *= bri;\n    \n    #include <mesh_phong_switching_alpha_map>\n\n    // #include <alphamap_fragment>\n    #include <alphatest_fragment>\n\t#include <alphahash_fragment>\n    #include <specularmap_fragment>\n    #include <normal_fragment_begin>\n    #include <normal_fragment_maps>\n    #include <emissivemap_fragment>\n\n    // accumulation\n    #include <lights_phong_fragment>\n    #include <lights_fragment_begin>\n    #include <lights_fragment_maps>\n    #include <lights_fragment_end>\n\n    // modulation\n    #include <aomap_fragment>\n\n    vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\n    #include <envmap_fragment>\n    #include <opaque_fragment>\n    #include <tonemapping_fragment>\n    #include <colorspace_fragment>\n    #include <fog_fragment>\n    #include <premultiplied_alpha_fragment>\n    #include <dithering_fragment>\n\n}`;\n;// CONCATENATED MODULE: ./esm/fbmFire/FBMFireMaterial.js\n\n\n\n\n\n\nclass FBMFireMaterial extends ShaderPhongMaterial_ShaderPhongMaterial {\n  get tiles() {\n    return this.uniforms.tiles.value;\n  }\n  set tiles(value) {\n    this.uniforms.tiles.value = value;\n  }\n  get hashLoop() {\n    return this.uniforms.hashLoop.value;\n  }\n  set hashLoop(value) {\n    this.uniforms.hashLoop.value = value;\n  }\n  get amp() {\n    return this.uniforms.amp.value;\n  }\n  set amp(value) {\n    this.uniforms.amp.value = value;\n  }\n  /*\n   * IAnimatable implements\n   */\n  addTime(delta) {\n    AnimationChunk_AnimationChunk.addTime(this, delta);\n  }\n  /**\n   * アニメーションを行うか否か。\n   */\n  get isAnimate() {\n    return this.uniforms.isAnimate.value;\n  }\n  set isAnimate(value) {\n    this.uniforms.isAnimate.value = value;\n    if (this.isAnimate) {\n      this.startAnimation();\n    } else {\n      this.stopAnimation();\n    }\n  }\n  get strength() {\n    return this.uniforms.strength.value;\n  }\n  set strength(value) {\n    this.uniforms.strength.value = value;\n  }\n  get bloom() {\n    return this.uniforms.bloom.value;\n  }\n  set bloom(value) {\n    this.uniforms.bloom.value = value;\n  }\n  get rimPow() {\n    return this.uniforms.rimPow.value;\n  }\n  set rimPow(value) {\n    this.uniforms.rimPow.value = value;\n  }\n  get rimStrength() {\n    return this.uniforms.rimStrength.value;\n  }\n  set rimStrength(value) {\n    this.uniforms.rimStrength.value = value;\n  }\n  /**\n   *\n   * @param parameters\n   */\n  constructor(parameters) {\n    super(ShaderPhongMaterial_glsl_vertex, FBMFireMaterial_glsl_fragment, parameters);\n    /**\n     * 波の速度\n     * 0.5にすると1の半分の速度になる。\n     * マイナスを指定すると、波の進行方向が反転する。\n     */\n    this.speed = -0.5;\n    /*\n     * IAnimatable implements\n     */\n    this.animationListener = e => {\n      this.addTime(e.delta / 1000);\n    };\n    this.isAnimate = this.isAnimate; //reset and start animation\n  }\n  initUniforms() {\n    this.uniforms = three_module/* UniformsUtils */.rDY.merge([ShaderPhongMaterial_ShaderPhongMaterial.getBasicUniforms(), TilingFBMChunk_TilingFBMChunk.getUniform(), AnimationChunk_AnimationChunk.getUniform(), {\n      strength: {\n        value: 0.45\n      },\n      bloom: {\n        value: 0.1\n      },\n      rimStrength: {\n        value: 1.0\n      },\n      rimPow: {\n        value: 1.0\n      }\n    }]);\n  }\n  initChunks() {\n    super.initChunks();\n    TilingFBMChunk_TilingFBMChunk.registerChunk();\n    AnimationChunk_AnimationChunk.registerChunk();\n  }\n  initDefines() {\n    super.initDefines();\n    this.defines = Object.assign({}, TilingFBMChunk_TilingFBMChunk.getDefines(), this.defines);\n    this.defines.USE_SURFACE_NORMAL = true;\n  }\n  initDefaultSetting(parameters) {\n    super.initDefaultSetting(parameters);\n  }\n  startAnimation() {\n    esm/* RAFTicker */.F.on("onBeforeTick", this.animationListener);\n  }\n  stopAnimation() {\n    esm/* RAFTicker */.F.off("onBeforeTick", this.animationListener);\n  }\n}\n;// CONCATENATED MODULE: ./esm/rimBasic/RimBasicMaterial.js\n\n\n\nclass RimBasicMaterial extends (/* unused pure expression or super */ null && (ShaderBasicMaterial)) {\n  get rimPow() {\n    return this.uniforms.rimPow.value;\n  }\n  set rimPow(value) {\n    this.uniforms.rimPow.value = value;\n  }\n  get rimStrength() {\n    return this.uniforms.rimStrength.value;\n  }\n  set rimStrength(value) {\n    this.uniforms.rimStrength.value = value;\n  }\n  get rimColor() {\n    return this.uniforms.rimColor.value;\n  }\n  set rimColor(value) {\n    this.uniforms.rimColor.value = value;\n  }\n  get insidePow() {\n    return this.uniforms.insidePow.value;\n  }\n  set insidePow(value) {\n    this.uniforms.insidePow.value = value;\n  }\n  get insideStrength() {\n    return this.uniforms.insideStrength.value;\n  }\n  set insideStrength(value) {\n    this.uniforms.insideStrength.value = value;\n  }\n  get insideColor() {\n    return this.uniforms.insideColor.value;\n  }\n  set insideColor(value) {\n    this.uniforms.insideColor.value = value;\n  }\n  constructor(param) {\n    super(null, fragment, param);\n    this.uniforms = UniformsUtils.merge([ShaderBasicMaterial.getBasicUniforms(), RimBasicMaterial.getRimUniforms()]);\n    this.initDefines();\n  }\n  static getRimUniforms() {\n    return UniformsUtils.merge([{\n      rimColor: {\n        value: new Color(1.0, 1.0, 1.0)\n      },\n      rimStrength: {\n        value: 1.0\n      },\n      rimPow: {\n        value: 1.0\n      },\n      insideColor: {\n        value: new Color(0.0, 0.0, 0.0)\n      },\n      insideStrength: {\n        value: 1.0\n      },\n      insidePow: {\n        value: 1.0\n      }\n    }]);\n  }\n  initDefines() {\n    super.initDefines();\n    this.defines.USE_SURFACE_NORMAL = true;\n  }\n}\n;// CONCATENATED MODULE: ./esm/rimEffect/RimEffectMaterial.js\n\n\n\nclass RimEffectMaterial_RimEffectMaterial extends (/* unused pure expression or super */ null && (ShaderPhongMaterial)) {\n  get rimPow() {\n    return this.uniforms.rimPow.value;\n  }\n  set rimPow(value) {\n    this.uniforms.rimPow.value = value;\n  }\n  get rimStrength() {\n    return this.uniforms.rimStrength.value;\n  }\n  set rimStrength(value) {\n    this.uniforms.rimStrength.value = value;\n  }\n  get rimColor() {\n    return this.uniforms.rimColor.value;\n  }\n  set rimColor(value) {\n    this.uniforms.rimColor.value = value;\n  }\n  get insidePow() {\n    return this.uniforms.insidePow.value;\n  }\n  set insidePow(value) {\n    this.uniforms.insidePow.value = value;\n  }\n  get insideStrength() {\n    return this.uniforms.insideStrength.value;\n  }\n  set insideStrength(value) {\n    this.uniforms.insideStrength.value = value;\n  }\n  get insideColor() {\n    return this.uniforms.insideColor.value;\n  }\n  set insideColor(value) {\n    this.uniforms.insideColor.value = value;\n  }\n  /**\n   *\n   * @param parameters\n   */\n  constructor(parameters) {\n    super(null, fragment, parameters);\n  }\n  initUniforms() {\n    this.uniforms = UniformsUtils.merge([ShaderPhongMaterial.getBasicUniforms(), {\n      rimColor: {\n        value: new Color(1.0, 1.0, 1.0)\n      },\n      rimStrength: {\n        value: 1.0\n      },\n      rimPow: {\n        value: 1.0\n      },\n      insideColor: {\n        value: new Color(0.0, 0.0, 0.0)\n      },\n      insideStrength: {\n        value: 1.0\n      },\n      insidePow: {\n        value: 1.0\n      }\n    }]);\n  }\n  initDefines() {\n    super.initDefines();\n    this.defines.USE_LIGHT = true;\n    this.defines.USE_SURFACE_NORMAL = true;\n  }\n}\n;// CONCATENATED MODULE: ./esm/rimEffect/OuterGlowMaterial.js\n\n/**\n * モデルの外周を発光させるマテリアル。\n * 縁の発光と膨張を掛け合わせて、元のモデルの周辺を発光させる。\n */\nclass OuterGlowMaterial extends (/* unused pure expression or super */ null && (RimEffectMaterial)) {\n  get expansionStrength() {\n    return this.uniforms.expansionStrength.value;\n  }\n  set expansionStrength(value) {\n    this.uniforms.expansionStrength.value = value;\n  }\n  initDefines() {\n    super.initDefines();\n    this.defines.USE_LIGHT = false;\n    this.defines.USE_EXPANSION = true;\n  }\n}\n;// CONCATENATED MODULE: ./esm/expansion/ExpansionMaterial.js\n\nclass ExpansionMaterial extends (/* unused pure expression or super */ null && (ShaderPhongMaterial)) {\n  get expansionStrength() {\n    return this.uniforms.expansionStrength.value;\n  }\n  set expansionStrength(value) {\n    this.uniforms.expansionStrength.value = value;\n  }\n  constructor(parameters) {\n    super(null, null, parameters);\n  }\n  initDefines() {\n    super.initDefines();\n    this.defines.USE_EXPANSION = true;\n  }\n}\n;// CONCATENATED MODULE: ./esm/spriteCloud/SpriteCloudMaterial.js\n\n\n\n\nclass SpriteCloudMaterial extends (/* unused pure expression or super */ null && (ShaderSpriteMaterial)) {\n  constructor(parameters) {\n    super(null, fragment, parameters);\n  }\n  /**\n   * uniformsを初期化する。\n   */\n  initUniforms() {\n    super.initUniforms();\n    this.uniforms = UniformsUtils.merge([this.uniforms, {\n      rimStrength: {\n        value: 0.2\n      },\n      bottomStrength: {\n        value: 0.75\n      },\n      rimColor: {\n        value: new Color(0xffffff)\n      },\n      skyColor: {\n        value: new Color(0xcccccc)\n      },\n      rimCenter: {\n        value: 0.6\n      },\n      rimRange: {\n        value: 0.15\n      }\n    }]);\n  }\n  initDefines() {\n    this.defines = Object.assign({\n      USE_UV: true\n    }, SpriteChunk.getDefines(), this.defines);\n  }\n  initDefaultSetting(parameters) {\n    super.initDefaultSetting(parameters);\n  }\n  get rimCenter() {\n    return this.uniforms.rimCenter.value;\n  }\n  set rimCenter(value) {\n    this.uniforms.rimCenter.value = value;\n  }\n  get rimRange() {\n    return this.uniforms.rimRange.value;\n  }\n  set rimRange(value) {\n    this.uniforms.rimRange.value = value;\n  }\n  get rimStrength() {\n    return this.uniforms.rimStrength.value;\n  }\n  set rimStrength(value) {\n    this.uniforms.rimStrength.value = value;\n  }\n  get bottomStrength() {\n    return this.uniforms.bottomStrength.value;\n  }\n  set bottomStrength(value) {\n    this.uniforms.bottomStrength.value = value;\n  }\n  get rimColor() {\n    return this.uniforms.rimColor.value;\n  }\n  set rimColor(value) {\n    this.uniforms.rimColor.value = value;\n  }\n  get skyColor() {\n    return this.uniforms.skyColor.value;\n  }\n  set skyColor(value) {\n    this.uniforms.skyColor.value = value;\n  }\n}\n;// CONCATENATED MODULE: ./esm/expansionDissolve/ExpansionDissolveMaterial.js\n\n\n\n\n/**\n * FBMノイズによるジオメトリの膨張でディゾルブを行うマテリアル。\n * 爆発しながら消滅するような表現になる。\n * 膨張の進行度合いはprogressで制御する。\n */\nclass ExpansionDissolveMaterial extends (/* unused pure expression or super */ null && (ShaderPhongMaterial)) {\n  addTime(delta) {\n    if (this.isAnimate) {\n      AnimationChunk.addTime(this, delta);\n    }\n  }\n  get isAnimate() {\n    return this.uniforms.isAnimate.value;\n  }\n  set isAnimate(value) {\n    this.uniforms.isAnimate.value = value;\n    if (this.isAnimate) {\n      this.startAnimation();\n    } else {\n      this.stopAnimation();\n    }\n  }\n  // ITiledFBM //\n  get tiles() {\n    return this.uniforms.tiles.value;\n  }\n  set tiles(value) {\n    this.uniforms.tiles.value = value;\n  }\n  get hashLoop() {\n    return this.uniforms.hashLoop.value;\n  }\n  set hashLoop(value) {\n    this.uniforms.hashLoop.value = value;\n  }\n  get amp() {\n    return this.uniforms.amp.value;\n  }\n  set amp(value) {\n    this.uniforms.amp.value = value;\n  }\n  get scaleMax() {\n    return this.uniforms.scaleMax.value;\n  }\n  set scaleMax(value) {\n    this.uniforms.scaleMax.value = value;\n  }\n  get time() {\n    return this.uniforms.time.value;\n  }\n  set time(value) {\n    this.uniforms.time.value = value;\n  }\n  get progress() {\n    return this.uniforms.progress.value;\n  }\n  set progress(value) {\n    this.uniforms.progress.value = value;\n  }\n  get dissolveColor() {\n    return this.uniforms.dissolveColor.value;\n  }\n  set dissolveColor(value) {\n    this.uniforms.dissolveColor.value = value;\n  }\n  get dissolveOutColor() {\n    return this.uniforms.dissolveOutColor.value;\n  }\n  set dissolveOutColor(value) {\n    this.uniforms.dissolveOutColor.value = value;\n  }\n  /**\n   *\n   * @param parameters\n   */\n  constructor(parameters) {\n    super(vertex, fragment, parameters);\n    // IAnimatable //\n    this.speed = -0.5;\n    /*\n     * IAnimatable implements\n     */\n    this.animationListener = e => {\n      this.addTime(e.delta / 1000);\n    };\n    this.isAnimate = this.isAnimate;\n  }\n  initUniforms() {\n    this.uniforms = UniformsUtils.merge([ShaderPhongMaterial.getBasicUniforms(), TilingFBMChunk.getUniform(), AnimationChunk.getUniform(), {\n      scaleMax: {\n        value: 20.0\n      },\n      progress: {\n        value: 0.0\n      },\n      dissolveColor: {\n        value: new Color(1.0, 1.0, 1.0)\n      },\n      dissolveOutColor: {\n        value: new Color(0.0, 0.0, 0.0)\n      }\n    }]);\n  }\n  initChunks() {\n    super.initChunks();\n    TilingFBMChunk.registerChunk();\n  }\n  initDefines() {\n    super.initDefines();\n    this.defines = Object.assign(this.defines, TilingFBMChunk.getDefines());\n    this.defines.USE_EXPANSION = true;\n  }\n  startAnimation() {\n    RAFTicker.on("onBeforeTick", this.animationListener);\n  }\n  stopAnimation() {\n    RAFTicker.off("onBeforeTick", this.animationListener);\n  }\n}\n;// CONCATENATED MODULE: ./esm/swirl/SwirlMaterial.js\n\n\n\n\nclass SwirlMaterial extends (/* unused pure expression or super */ null && (ShaderPhongMaterial)) {\n  addTime(delta) {\n    if (this.isAnimate) {\n      AnimationChunk.addTime(this, delta);\n    }\n  }\n  get isAnimate() {\n    return this.uniforms.isAnimate.value;\n  }\n  set isAnimate(value) {\n    this.uniforms.isAnimate.value = value;\n    if (this.isAnimate) {\n      this.startAnimation();\n    } else {\n      this.stopAnimation();\n    }\n  }\n  onSetMap(val) {\n    super.onSetMap(val);\n    this.setRepeat(val);\n  }\n  onSetAlphaMap(value) {\n    super.onSetAlphaMap(value);\n    this.setRepeat(value);\n  }\n  /**\n   * リピートモードは強制的にRepeatWrappingに\n   * @param value\n   */\n  setRepeat(value) {\n    if (value) {\n      value.wrapS = RepeatWrapping;\n      value.wrapT = RepeatWrapping;\n    }\n  }\n  get uvRotation() {\n    return this.uniforms.uvRotation.value;\n  }\n  set uvRotation(value) {\n    this.uniforms.uvRotation.value = value;\n  }\n  get swirlRotation() {\n    return this.uniforms.swirlRotation.value;\n  }\n  set swirlRotation(value) {\n    this.uniforms.swirlRotation.value = value;\n  }\n  get radius() {\n    return this.uniforms.radius.value;\n  }\n  set radius(value) {\n    this.uniforms.radius.value = value;\n  }\n  get center() {\n    return this.uniforms.center.value;\n  }\n  set center(value) {\n    this.uniforms.center.value = value;\n  }\n  constructor(parameters) {\n    super(null, fragment, parameters);\n    /*\n     * implements IAnimatable\n     */\n    this.speed = -0.02;\n    /*\n     * IAnimatable implements\n     */\n    this.animationListener = e => {\n      this.addTime(e.delta / 1000);\n    };\n    this.isAnimate = this.isAnimate;\n  }\n  initChunks() {\n    super.initChunks();\n    AnimationChunk.registerChunk();\n  }\n  initUniforms() {\n    this.uniforms = UniformsUtils.merge([ShaderPhongMaterial.getBasicUniforms(), AnimationChunk.getUniform(), {\n      uvRotation: {\n        value: 0.0\n      },\n      swirlRotation: {\n        value: 3.14\n      },\n      radius: {\n        value: 0.5\n      },\n      center: {\n        value: new Vector2(0.5, 0.5)\n      }\n    }]);\n  }\n  startAnimation() {\n    RAFTicker.on("onBeforeTick", this.animationListener);\n  }\n  stopAnimation() {\n    RAFTicker.off("onBeforeTick", this.animationListener);\n  }\n}\n;// CONCATENATED MODULE: ./esm/cellularNoise/CellularNoiseMaterial.js\n\n\n\n\nclass CellularNoiseMaterial extends (/* unused pure expression or super */ null && (ShaderPhongMaterial)) {\n  addTime(delta) {\n    if (this.isAnimate) {\n      AnimationChunk.addTime(this, delta);\n    }\n  }\n  get isAnimate() {\n    return this.uniforms.isAnimate.value;\n  }\n  set isAnimate(value) {\n    this.uniforms.isAnimate.value = value;\n    if (this.isAnimate) {\n      this.startAnimation();\n    } else {\n      this.stopAnimation();\n    }\n  }\n  get grid() {\n    return this.uniforms.grid.value;\n  }\n  set grid(value) {\n    this.uniforms.grid.value = value;\n  }\n  get divisionScaleX() {\n    return this.uniforms.divisionScaleX.value;\n  }\n  set divisionScaleX(value) {\n    this.uniforms.divisionScaleX.value = value;\n  }\n  constructor(parameters) {\n    super(null, fragment, parameters);\n    /*\n     * implements IAnimatable\n     */\n    this.speed = -0.02;\n    /*\n     * IAnimatable implements\n     */\n    this.animationListener = e => {\n      this.addTime(e.delta / 1000);\n    };\n    this.isAnimate = this.isAnimate;\n  }\n  initChunks() {\n    super.initChunks();\n    AnimationChunk.registerChunk();\n  }\n  initUniforms() {\n    this.uniforms = UniformsUtils.merge([ShaderPhongMaterial.getBasicUniforms(), AnimationChunk.getUniform(), {\n      grid: {\n        value: 3.0\n      },\n      divisionScaleX: {\n        value: 1.0\n      }\n    }]);\n  }\n  startAnimation() {\n    RAFTicker.on("onBeforeTick", this.animationListener);\n  }\n  stopAnimation() {\n    RAFTicker.off("onBeforeTick", this.animationListener);\n  }\n}\n;// CONCATENATED MODULE: ./esm/solidClipping/SolidClippingMaterial.js\n/**\n * ライトに影響を受けない、ソリッドな切断面をもつマテリアル\n */\n\n\n\nclass SolidClippingMaterial extends (/* unused pure expression or super */ null && (ShaderPhongMaterial)) {\n  get cutSectionColor() {\n    return this.uniforms.cutSectionColor.value;\n  }\n  set cutSectionColor(value) {\n    this.uniforms.cutSectionColor.value = value;\n  }\n  constructor(parameters) {\n    super(null, fragment, parameters);\n  }\n  initUniforms() {\n    this.uniforms = UniformsUtils.merge([ShaderPhongMaterial.getBasicUniforms(), {\n      cutSectionColor: {\n        value: new Color(1.0, 1.0, 1.0)\n      }\n    }]);\n  }\n  initDefaultSetting(parameters) {\n    super.initDefaultSetting(parameters);\n    this.clipping = true;\n    this.side = DoubleSide;\n  }\n}\n;// CONCATENATED MODULE: ./esm/hexDissolve/HexDissolveMaterial.js\n\n\n\n\n/**\n * 六角形グリッドマテリアル\n */\nclass HexDissolveMaterial extends (/* unused pure expression or super */ null && (GridMaterial)) {\n  /**\n   * ディゾルブの進行度を指定する。\n   * 1.0でディゾルブ完了となる。\n   */\n  get progress() {\n    return this.uniforms.progress.value;\n  }\n  set progress(value) {\n    this.uniforms.progress.value = value;\n  }\n  /**\n   * ディゾルブの開始ずれを指定する。\n   * 最後にディゾルブが始まるグリッドが、progressのどの値で開始されるかを意味する。\n   * ex)\n   * delay = 0.8の時、最後のグリッドはprogress = 0.8 ~ 1.0でディゾルブする。\n   */\n  get delay() {\n    return this.uniforms.delay.value;\n  }\n  set delay(value) {\n    this.uniforms.delay.value = value;\n  }\n  get isAscending() {\n    return this.uniforms.isAscending.value;\n  }\n  set isAscending(value) {\n    this.uniforms.isAscending.value = value;\n  }\n  /**\n   * グリッド線の太さ\n   * 0.0で線なし、0.5でグリッド面なしになる。\n   */\n  get gridWeight() {\n    return this.uniforms.gridWeight.value;\n  }\n  set gridWeight(value) {\n    this.uniforms.gridWeight.value = value;\n  }\n  get gridEmissive() {\n    return this.uniforms.gridEmissive.value;\n  }\n  set gridEmissive(value) {\n    this.uniforms.gridEmissive.value = value;\n  }\n  /**\n   * ディゾルブ中に表示されるグローラインの太さ\n   * 数値はグリッド線の太さの倍率、2.0ならグローアウトラインはディゾルブラインの倍の太さになる。\n   *\n   * 注意 : isReversed = true かつgridEmissiveWeightが2.0以下の場合、グロー線が消えなくなる。\n   * 反転させる場合は、2.0以上を指定すること。\n   */\n  get gridEmissiveWeight() {\n    return this.uniforms.gridEmissiveWeight.value;\n  }\n  set gridEmissiveWeight(value) {\n    this.uniforms.gridEmissiveWeight.value = value;\n  }\n  constructor(parameters) {\n    super(null, fragment, parameters);\n  }\n  initUniforms() {\n    this.uniforms = UniformsUtils.merge([GridMaterial.getBasicUniforms(), {\n      progress: {\n        value: 0.0\n      },\n      delay: {\n        value: 0.8\n      },\n      gridWeight: {\n        value: 0.0\n      },\n      isAscending: {\n        value: true\n      },\n      gridEmissive: {\n        value: new Color(0x000000)\n      },\n      gridEmissiveWeight: {\n        value: 2.5\n      }\n    }]);\n  }\n  initChunks() {\n    super.initChunks();\n    HexGridChunk.registerChunk();\n  }\n}\n;// CONCATENATED MODULE: ./esm/index.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n;// CONCATENATED MODULE: ./demoSrc/CommonGUI.js\n\n\nclass CommonGUI {\n  static initColorGUI(folder, mat, propName = "color") {\n    const prop = {};\n    const targetColor = mat[propName];\n    prop[propName] = targetColor.getHex();\n    folder.addColor(prop, propName).onChange(val => {\n      targetColor.setHex(val);\n    });\n    return prop;\n  }\n  static initBasicMaterialGUI(gui, mat, folderName = "Material") {\n    const folder = gui.addFolder(folderName);\n    this.initMaterialFolder(folder, mat);\n    folder.open();\n    return folder;\n  }\n  static initMaterialGUI(gui, mat, folderName = "Material") {\n    const folder = this.initBasicMaterialGUI(gui, mat, folderName);\n    this.initColorGUI(folder, mat, "emissive");\n  }\n  static initMaterialFolder(folder, mat) {\n    this.initColorGUI(folder, mat);\n    folder.add(mat, "transparent");\n    folder.add(mat, "uniformOpacity", 0.0, 1.0);\n  }\n  static initSpriteMaterialGUI(gui, mat, folderName = "Material") {\n    const folder = gui.addFolder(folderName);\n    this.initMaterialFolder(folder, mat);\n    folder.open();\n  }\n  static initGridMaterialGUI(gui, mat) {\n    this.initMaterialGUI(gui, mat);\n    const prop = {\n      mask: "",\n      alphaMap: ""\n    };\n    const folder = gui.addFolder("WavyGridMaterial");\n    folder.add(mat, "isReversed");\n    folder.add(mat, "division", 2.0, 256.0).step(1);\n    folder.add(mat, "divisionScaleX", 0.0, 4.0).step(1);\n    folder.add(prop, "mask", {\n      none: "",\n      earth: "./textures/landmask.png"\n    }).onChange(val => {\n      if (val === "") {\n        mat.maskTexture = null;\n      } else {\n        mat.maskTexture = new three_module/* TextureLoader */.dpR().load(val);\n      }\n    });\n    folder.add(prop, "alphaMap", {\n      none: "",\n      earth: "./textures/landmask.png"\n    }).onChange(val => {\n      if (val === "") {\n        mat.alphaMap = null;\n      } else {\n        mat.alphaMap = new three_module/* TextureLoader */.dpR().load(val);\n      }\n    });\n    folder.open();\n    return folder;\n  }\n  static initWavyMaterialGUI(gui, mat) {\n    const folder = this.initGridMaterialGUI(gui, mat);\n    const animationFolder = folder.addFolder("WavyAnimation");\n    animationFolder.add(mat, "isAnimate");\n    animationFolder.add(mat, "speed", -2, 2);\n    animationFolder.add(mat, "waveFrequency", 0.0, 1.0);\n    animationFolder.add(mat, "wavePow", 0.0, 4.0);\n    animationFolder.add(mat, "direction", {\n      horizontal: Directions.horizontal,\n      vertical: Directions.vertical,\n      radial: Directions.radial\n    });\n    animationFolder.add(mat, "raisedBottom", 0.0, 1.0);\n    animationFolder.open();\n  }\n  static initAnimationGUI(gui, mat, folderName = "Animation") {\n    const folder = gui.addFolder(folderName);\n    folder.add(mat, "isAnimate");\n    folder.add(mat, "speed", -2, 2);\n    folder.open();\n  }\n  static initRimGUI(gui, mat, folderName = "Rim Effect Material") {\n    const folder = gui.addFolder(folderName);\n    CommonGUI.initColorGUI(folder, mat, "rimColor");\n    folder.add(mat, "rimStrength", 0.0, 4.0).step(0.01);\n    folder.add(mat, "rimPow", 0.0, 4.0).step(0.01);\n    CommonGUI.initColorGUI(folder, mat, "insideColor");\n    folder.add(mat, "insideStrength", 0.0, 4.0).step(0.01);\n    folder.add(mat, "insidePow", 0.0, 8.0).step(0.01);\n    folder.open();\n  }\n  static initExpansionGUI(gui, mat, folderName = "ExpansionMaterial") {\n    const folder = gui.addFolder("ExpansionMaterial");\n    const ampRange = 12.0;\n    folder.add(mat, "expansionStrength", -ampRange, ampRange).step(0.01);\n    folder.open();\n  }\n  static initFBMTilingGUI(gui, mat, folderName = "FBM Tiling") {\n    const folder = gui.addFolder("FBM Tiling");\n    folder.add(mat, "tiles", 1.0, 8.0).step(1.0);\n    folder.add(mat, "hashLoop", 2.0, 16.0).step(1.0);\n    folder.add(mat, "amp", 0.0, 2.0).step(0.01);\n    folder.open();\n  }\n  static initSkyGUI(gui, sky, sunSphere, renderer) {\n    const effectController = {\n      turbidity: 10,\n      rayleigh: 0.15,\n      mieCoefficient: 0.005,\n      mieDirectionalG: 0.8,\n      inclination: 0.07,\n      // elevation / inclination\n      azimuth: 0.25,\n      // Facing front,\n      exposure: 0.75\n    };\n    const distance = 400000;\n    function guiChanged() {\n      const uniforms = sky.material.uniforms;\n      uniforms["turbidity"].value = effectController.turbidity;\n      uniforms["rayleigh"].value = effectController.rayleigh;\n      uniforms["mieCoefficient"].value = effectController.mieCoefficient;\n      uniforms["mieDirectionalG"].value = effectController.mieDirectionalG;\n      const theta = Math.PI * (effectController.inclination - 0.5);\n      const phi = 2 * Math.PI * (effectController.azimuth - 0.5);\n      sunSphere.position.x = distance * Math.cos(phi);\n      sunSphere.position.y = distance * Math.sin(phi) * Math.sin(theta);\n      sunSphere.position.z = distance * Math.sin(phi) * Math.cos(theta);\n      uniforms["sunPosition"].value.copy(sunSphere.position);\n      renderer.toneMappingExposure = effectController.exposure;\n    }\n    guiChanged();\n    const folder = gui.addFolder("Sky");\n    folder.add(effectController, "turbidity", 1.0, 20.0, 0.1).onChange(guiChanged);\n    folder.add(effectController, "rayleigh", 0.0, 4, 0.001).onChange(guiChanged);\n    folder.add(effectController, "mieCoefficient", 0.0, 0.1, 0.001).onChange(guiChanged);\n    folder.add(effectController, "mieDirectionalG", 0.0, 1, 0.001).onChange(guiChanged);\n    folder.add(effectController, "inclination", 0, 1, 0.0001).onChange(guiChanged);\n    folder.add(effectController, "azimuth", 0, 1, 0.0001).onChange(guiChanged);\n    folder.add(effectController, "exposure", 0, 1, 0.0001).onChange(guiChanged);\n    folder.open();\n  }\n}\n// EXTERNAL MODULE: ./node_modules/three/examples/jsm/controls/OrbitControls.js\nvar OrbitControls = __webpack_require__(12);\n// EXTERNAL MODULE: ./node_modules/three/examples/jsm/objects/Sky.js\nvar Sky = __webpack_require__(659);\n;// CONCATENATED MODULE: ./demoSrc/Common.js\n\n\n\n\nclass Common {\n  static initScene() {\n    const scene = new three_module/* Scene */.xsS();\n    return scene;\n  }\n  static initLight(scene) {\n    const ambientLight = new three_module/* AmbientLight */.Mig(0xffffff, Math.PI);\n    scene.add(ambientLight);\n    return ambientLight;\n  }\n  static initCamera(scene, W, H, far = 400) {\n    const camera = new three_module/* PerspectiveCamera */.cPb(45, W / H, 1, far);\n    camera.position.set(0, 0, 100);\n    camera.updateMatrixWorld(false);\n    scene.add(camera);\n    return camera;\n  }\n  static initControl(camera, render) {\n    let domElement;\n    if (render != null) {\n      domElement = render.domElement;\n    }\n    const control = new OrbitControls/* OrbitControls */.z(camera, domElement);\n    control.update();\n    return control;\n  }\n  static initRenderer(W, H, color = 0x000000, antialias = true) {\n    const convertRGBToHex = rgb => {\n      const hex = rgb.toString(16);\n      return "#" + hex.padStart(6, "0");\n    };\n    const renderer = new three_module/* WebGLRenderer */.CP7({\n      antialias: antialias\n    });\n    renderer.setClearColor(new three_module/* Color */.Ilk(color));\n    renderer.setSize(W, H);\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.domElement.style.backgroundColor = convertRGBToHex(color);\n    document.body.appendChild(renderer.domElement);\n    console.log("three.js revision: ", three_module/* REVISION */.UZH);\n    return renderer;\n  }\n  static initHelper(scene) {\n    const axesHelper = new three_module/* AxesHelper */.y8_(30);\n    scene.add(axesHelper);\n  }\n  static initSky(scene, gui, renderer) {\n    renderer.toneMapping = three_module/* ACESFilmicToneMapping */.LY2;\n    const sunSphere = new three_module/* Mesh */.Kj0(new three_module/* SphereGeometry */.xo$(20000, 16, 8), new three_module/* MeshBasicMaterial */.vBJ({\n      color: 0xffffff\n    }));\n    sunSphere.position.y = -700000;\n    sunSphere.visible = false;\n    scene.add(sunSphere);\n    const sky = new Sky/* Sky */.q();\n    sky.scale.setScalar(45000);\n    scene.add(sky);\n    CommonGUI.initSkyGUI(gui, sky, sunSphere, renderer);\n  }\n}\n// EXTERNAL MODULE: ./node_modules/lil-gui/dist/lil-gui.esm.js\nvar lil_gui_esm = __webpack_require__(332);\n;// CONCATENATED MODULE: ./demoSrc/demoFBMFire.js\n\n\n\n\n\n\nclass Study {\n  constructor() {\n    const W = 640;\n    const H = 480;\n    const scene = Common.initScene();\n    scene.fog = new three_module/* Fog */.ybr(0x000000, 80, 160);\n    Common.initLight(scene);\n    const camera = Common.initCamera(scene, W, H);\n    const renderer = Common.initRenderer(W, H);\n    const control = Common.initControl(camera, renderer);\n    Common.initHelper(scene);\n    const mat = this.initObject(scene);\n    esm/* RAFTicker */.F.on("tick", e => {\n      renderer.render(scene, camera);\n    });\n    this.initGUI(mat);\n  }\n  initObject(scene) {\n    const spot = new three_module/* PointLight */.cek(0xffffff, 7000);\n    spot.position.set(10, 20, 30);\n    scene.add(spot);\n    const helper = new three_module/* PointLightHelper */.xG9(spot);\n    scene.add(helper);\n    const geo = new three_module/* SphereGeometry */.xo$(30, 32, 32);\n    const mat = new FBMFireMaterial({\n      fog: scene.fog !== undefined\n    });\n    mat.color = new three_module/* Color */.Ilk(0xcc3300);\n    mat.tiles = 1;\n    mat.hashLoop = 4.0;\n    mat.amp = 1.0;\n    mat.rimPow = 2.0;\n    mat.speed = -2.0;\n    const mesh = new three_module/* Mesh */.Kj0(geo, mat);\n    mesh.scale.set(0.5, 1.0, 0.5);\n    scene.add(mesh);\n    return mat;\n  }\n  initGUI(mat) {\n    const gui = new lil_gui_esm/* default */.ZP();\n    CommonGUI.initMaterialGUI(gui, mat);\n    CommonGUI.initFBMTilingGUI(gui, mat);\n    this.initGUIFireMaterial(gui, mat);\n    this.initRimSetting(gui, mat);\n  }\n  initGUIFireMaterial(gui, mat) {\n    const folder = gui.addFolder("FBM Animation");\n    folder.add(mat, "isAnimate");\n    folder.add(mat, "strength", 0.0, 1.0).step(0.01);\n    folder.add(mat, "bloom", 0.0, 1.0).step(0.01);\n    folder.add(mat, "speed", -8.0, 8.0).step(0.01);\n    folder.open();\n  }\n  initRimSetting(gui, mat) {\n    const folder = gui.addFolder("Rim");\n    folder.add(mat, "rimStrength", 0.0, 8.0).step(0.01);\n    folder.add(mat, "rimPow", 0.0, 8.0).step(0.01);\n    folder.open();\n  }\n}\nwindow.onload = () => {\n  const study = new Study();\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///426\n')}},__webpack_module_cache__={},deferred;function __webpack_require__(Q){var U=__webpack_module_cache__[Q];if(void 0!==U)return U.exports;var F=__webpack_module_cache__[Q]={exports:{}};return __webpack_modules__[Q](F,F.exports,__webpack_require__),F.exports}__webpack_require__.m=__webpack_modules__,deferred=[],__webpack_require__.O=(Q,U,F,B)=>{if(!U){var g=1/0;for(C=0;C<deferred.length;C++){for(var[U,F,B]=deferred[C],I=!0,n=0;n<U.length;n++)(!1&B||g>=B)&&Object.keys(__webpack_require__.O).every((Q=>__webpack_require__.O[Q](U[n])))?U.splice(n--,1):(I=!1,B<g&&(g=B));if(I){deferred.splice(C--,1);var s=F();void 0!==s&&(Q=s)}}return Q}B=B||0;for(var C=deferred.length;C>0&&deferred[C-1][2]>B;C--)deferred[C]=deferred[C-1];deferred[C]=[U,F,B]},__webpack_require__.d=(Q,U)=>{for(var F in U)__webpack_require__.o(U,F)&&!__webpack_require__.o(Q,F)&&Object.defineProperty(Q,F,{enumerable:!0,get:U[F]})},__webpack_require__.o=(Q,U)=>Object.prototype.hasOwnProperty.call(Q,U),__webpack_require__.j=865,(()=>{var Q={865:0};__webpack_require__.O.j=U=>0===Q[U];var U=(U,F)=>{var B,g,[I,n,s]=F,C=0;if(I.some((U=>0!==Q[U]))){for(B in n)__webpack_require__.o(n,B)&&(__webpack_require__.m[B]=n[B]);if(s)var l=s(__webpack_require__)}for(U&&U(F);C<I.length;C++)g=I[C],__webpack_require__.o(Q,g)&&Q[g]&&Q[g][0](),Q[g]=0;return __webpack_require__.O(l)},F=self.webpackChunkthreejs_shader_materials=self.webpackChunkthreejs_shader_materials||[];F.forEach(U.bind(null,0)),F.push=U.bind(null,F.push.bind(F))})();var __webpack_exports__=__webpack_require__.O(void 0,[736],(()=>__webpack_require__(426)));__webpack_exports__=__webpack_require__.O(__webpack_exports__)})();