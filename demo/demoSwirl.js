(()=>{"use strict";var n,e={321:(n,e,t)=>{var i,a=t(75);class r{static getChunkName(){return""}static getChunk(){return""}static getDefines(){return{}}static registerChunk(){a.WdD&&null==a.WdD[this.getChunkName()]&&(a.WdD[this.getChunkName()]=this.getChunk())}static getUniform(){return{}}}class s extends r{static registerChunk(){o.registerChunk()}static getUniform(){return{time:{value:0},isAnimate:{value:!0}}}static addTime(n,e){n.uniforms.time.value+=e*n.speed}}class o extends r{static getChunkName(){return"time_animation_uniform_chunk"}static getChunk(){return"\n    uniform float time;\n    uniform bool isAnimate;\n    "}}class u extends r{static registerChunk(){l.registerChunk(),c.registerChunk()}static getDefines(){return{USE_EXPANSION:!1}}static getUniform(){return{expansionStrength:{value:0}}}}class l extends r{static getChunkName(){return"__expansion_uniform_chunk"}static getChunk(){return"\n    #ifdef USE_EXPANSION\n      uniform float expansionStrength;\n    #endif\n    "}}class c extends r{static getChunkName(){return"__expansion_vertex_chunk"}static getChunk(){return"\n    #ifdef USE_EXPANSION\n      transformed += normal * expansionStrength;\n    #endif\n    "}}class d extends r{static registerChunk(){super.registerChunk(),m.registerChunk(),p.registerChunk(),g.registerChunk()}static getUniform(){return a.rDY.merge([super.getUniform(),{hasMap:{value:!1},map:{value:null}}])}static getMap(n){return n.uniforms.map.value}static setMap(n,e){n.uniforms.map.value=e,n.uniforms.hasMap.value=null!=e}}class m extends r{static getChunkName(){return"map_uniform_chunk"}static getChunk(){return"\n      uniform bool hasMap;\n      uniform sampler2D map;\n    "}}class p extends r{static getChunkName(){return"map_fragment_chunk"}static getChunk(){return"\n      if( hasMap ){\n        vec4 texelColor = texture2D( map, mapUV );\n        diffuseColor *= texelColor;\n      }\n    "}}class g extends r{static getChunkName(){return"__ShaderMaterial__map_fragment_begin_chunk"}static getChunk(){return"\n      vec2 mapUV = uvPosition;\n    "}}class h extends r{static registerChunk(){_.registerChunk(),f.registerChunk(),v.registerChunk(),k.registerChunk(),x.registerChunk()}static getDefines(){return{USE_MESH_POSITION:!1}}}class _ extends r{static getChunkName(){return"mesh_phong_uniform"}static getChunk(){return"\n      uniform vec3 diffuse;\n      uniform vec3 emissive;\n      uniform vec3 specular;\n      uniform float shininess;\n      uniform float opacity;\n      uniform bool hasAlphaMap;\n      uniform sampler2D alphaMap;\n    "}}class f extends r{static getChunkName(){return"mesh_phong_diffuse_color"}static getChunk(){return"\n      vec4 diffuseColor = vec4( diffuse, opacity );\n      ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n      vec3 totalEmissiveRadiance = emissive;\n    "}}class v extends r{static getChunkName(){return"mesh_phong_switching_alpha_map"}static getChunk(){return"\n      if( hasAlphaMap ){\n        diffuseColor.a *= texture2D( alphaMap, mapUV ).g;\n      }\n    "}}class k extends r{static getChunkName(){return"mesh_position_varying"}static getChunk(){return"\n    #ifdef USE_MESH_POSITION\n    varying vec3 meshPosition;\n    #endif\n    "}}class x extends r{static getChunkName(){return"mesh_position_vertex"}static getChunk(){return"\n    #ifdef USE_MESH_POSITION\n    meshPosition = position;\n    #endif\n    "}}class C extends r{static registerChunk(){M.registerChunk(),U.registerChunk()}static getDefines(){return{USE_SURFACE_NORMAL:!1}}static getUniform(){return{}}}class M extends r{static getChunkName(){return"surface_normal_varying_chunk"}static getChunk(){return"\n    #ifdef USE_SURFACE_NORMAL\n      varying vec3 surfaceNormal;\n    #endif\n    "}}class U extends r{static getChunkName(){return"surface_normal_vertex_chunk"}static getChunk(){return"\n    #ifdef USE_SURFACE_NORMAL\n      surfaceNormal = normalize( transformedNormal );\n    #endif\n    "}}!function(n){n[n.vertical=4]="vertical",n[n.horizontal=3]="horizontal",n[n.radial=5]="radial"}(i||(i={}));class w extends a.jyz{constructor(n,e,t){super(t),this._opacity=1,null!=t||(t={}),null!=n||(n="\n#define PHONG\n\nvarying vec3 vViewPosition;\nvarying vec2 uvPosition;\n#include <mesh_position_varying>\n#include <surface_normal_varying_chunk>\n#include <__expansion_uniform_chunk>\n\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n    #include <mesh_position_vertex>\n    uvPosition = uv;\n\n    #include <uv_vertex>\n    #include <uv2_vertex>\n    #include <color_vertex>\n    \n    #include <beginnormal_vertex>\n    #include <morphnormal_vertex>\n    #include <skinbase_vertex>\n    #include <skinnormal_vertex>\n    #include <defaultnormal_vertex>\n    #include <surface_normal_vertex_chunk>\n    #include <normal_vertex>\n    \n    #include <begin_vertex>\n    \n    #include <__expansion_vertex_chunk>\n    \n    #include <morphtarget_vertex>\n    #include <skinning_vertex>\n    #include <displacementmap_vertex>\n    #include <project_vertex>\n    #include <logdepthbuf_vertex>\n    #include <clipping_planes_vertex>\n    \n    vViewPosition = - mvPosition.xyz;\n\n    #include <worldpos_vertex>\n    #include <envmap_vertex>\n    #include <shadowmap_vertex>\n    #include <fog_vertex>\n}\n"),null!=e||(e="\n#define PHONG\n\n#include <mesh_phong_uniform>\n#include <mesh_position_varying>\nvarying vec2 uvPosition;\n\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n// #include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n    #include <clipping_planes_fragment>\n    \n    #include <mesh_phong_diffuse_color>\n    \n    #include <logdepthbuf_fragment>\n    #include <__ShaderMaterial__map_fragment_begin_chunk>\n    #include <map_fragment>\n    #include <color_fragment>\n    // #include <alphamap_fragment>\n    #include <mesh_phong_switching_alpha_map>\n    #include <alphatest_fragment>\n    #include <specularmap_fragment>\n    #include <normal_fragment_begin>\n    #include <normal_fragment_maps>\n    #include <emissivemap_fragment>\n    // accumulation\n    #include <lights_phong_fragment>\n    #include <lights_fragment_begin>\n    #include <lights_fragment_maps>\n    #include <lights_fragment_end>\n    // modulation\n    #include <aomap_fragment>\n    vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n    #include <envmap_fragment>\n    #include <output_fragment>\n    #include <tonemapping_fragment>\n    #include <encodings_fragment>\n    #include <fog_fragment>\n    #include <premultiplied_alpha_fragment>\n    #include <dithering_fragment>\n}"),this.initChunks(),this.initUniforms(),this.initDefines(),this.vertexShader=n,this.fragmentShader=e,this.initDefaultSetting(t)}static getBasicUniforms(){return a.rDY.merge([a.rBU.common,a.rBU.specularmap,a.rBU.envmap,a.rBU.aomap,a.rBU.lightmap,a.rBU.emissivemap,a.rBU.bumpmap,a.rBU.normalmap,a.rBU.displacementmap,a.rBU.gradientmap,a.rBU.fog,a.rBU.lights,{emissive:{value:new a.Ilk(0)},specular:{value:new a.Ilk(1118481)},shininess:{value:30},hasAlphaMap:{value:!1}},C.getUniform(),u.getUniform(),d.getUniform()])}initChunks(){h.registerChunk(),C.registerChunk(),u.registerChunk(),d.registerChunk()}initUniforms(){this.uniforms=a.rDY.merge([w.getBasicUniforms(),u.getUniform(),{}])}initDefines(){this.defines=Object.assign({},h.getDefines(),C.getDefines(),u.getDefines(),this.defines)}initDefaultSetting(n){this.uniformOpacity=this._opacity,this.lights=!0}get color(){return this.uniforms.diffuse.value}set color(n){this.uniforms.diffuse.value=n}get opacity(){return this.uniformOpacity}get uniformOpacity(){return this._opacity}set opacity(n){this.uniformOpacity=n}set uniformOpacity(n){var e;this._opacity=n,(null===(e=this.uniforms)||void 0===e?void 0:e.opacity)&&(this.uniforms.opacity.value=n)}get emissive(){return this.uniforms.emissive.value}set emissive(n){this.uniforms.emissive.value=n}get map(){return d.getMap(this)}set map(n){d.setMap(this,n),this.onSetMap(n)}onSetMap(n){}get alphaMap(){return this.uniforms.alphaMap.value}set alphaMap(n){this.uniforms.alphaMap.value=n,this.uniforms.hasAlphaMap.value=null!=n,this.onSetAlphaMap(n)}onSetAlphaMap(n){}startGlow(){this.alphaTest=0,this.depthWrite=!1,this.blending=a.WMw}}var y=t(163);class S extends w{constructor(n){super(null,"\n#define PHONG\n\n#include <mesh_phong_uniform>\nvarying vec2 uvPosition;\n#include <mesh_position_varying>\n\n#include <time_animation_uniform_chunk>\nuniform float uvRotation;\nuniform float swirlRotation;\nuniform float radius;\nuniform vec2 center;\n#include <map_uniform_chunk>\n\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n// #include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\n/**\n * UV座標を回転する\n */\nvec2 rotateUV(vec2 uv, float rotation, vec2 center)\n{\n  return vec2(\n    cos(rotation) * (uv.x - center.x) + sin(rotation) * (uv.y - center.y) + center.x,\n    cos(rotation) * (uv.y - center.y) - sin(rotation) * (uv.x - center.x) + center.y\n  );\n}\n\n/**\n * UV座標をツイストする\n */\nvec2 swirl(vec2 uv, float radius, float rotation, vec2 center)\n{\n  vec2 tc = uv - center;\n  float dist = length(tc);\n  if (dist < radius) \n  {\n    float percent = (radius - dist) / radius;\n    float theta = percent * percent * rotation;\n    float s = sin(theta);\n    float c = cos(theta);\n    tc = vec2(dot(tc, vec2(c, -s)), dot(tc, vec2(s, c)));\n  }\n  tc += center;\n  return tc;\n}\n\nvoid main() {\n    #include <clipping_planes_fragment>\n  \n    #include <mesh_phong_diffuse_color>\n    \n    #include <logdepthbuf_fragment>\n    #include <__ShaderMaterial__map_fragment_begin_chunk>\n    #include <map_fragment>\n  \n    mapUV = rotateUV( mapUV, uvRotation , center);\n    mapUV = swirl( mapUV, radius, swirlRotation, center );\n    // offset Texture \n    mapUV += vec2(time);\n    #include <map_fragment_chunk>\n    \n    #include <color_fragment>\n    #include <mesh_phong_switching_alpha_map>\n    \n    // #include <alphamap_fragment>\n    #include <alphatest_fragment>\n    #include <specularmap_fragment>\n    #include <normal_fragment_begin>\n    #include <normal_fragment_maps>\n    #include <emissivemap_fragment>\n    // accumulation\n    #include <lights_phong_fragment>\n    #include <lights_fragment_begin>\n    #include <lights_fragment_maps>\n    #include <lights_fragment_end>\n    // modulation\n    #include <aomap_fragment>\n    vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n    #include <envmap_fragment>\n    #include <output_fragment>\n    #include <tonemapping_fragment>\n    #include <encodings_fragment>\n    #include <fog_fragment>\n    #include <premultiplied_alpha_fragment>\n    #include <dithering_fragment>\n}",n),this.speed=-.02,this.animationListener=n=>{this.addTime(n.delta/1e3)},this.isAnimate=this.isAnimate}addTime(n){this.isAnimate&&s.addTime(this,n)}get isAnimate(){return this.uniforms.isAnimate.value}set isAnimate(n){this.uniforms.isAnimate.value=n,this.isAnimate?this.startAnimation():this.stopAnimation()}onSetMap(n){super.onSetMap(n),this.setRepeat(n)}onSetAlphaMap(n){super.onSetAlphaMap(n),this.setRepeat(n)}setRepeat(n){n&&(n.wrapS=a.rpg,n.wrapT=a.rpg)}get uvRotation(){return this.uniforms.uvRotation.value}set uvRotation(n){this.uniforms.uvRotation.value=n}get swirlRotation(){return this.uniforms.swirlRotation.value}set swirlRotation(n){this.uniforms.swirlRotation.value=n}get radius(){return this.uniforms.radius.value}set radius(n){this.uniforms.radius.value=n}get center(){return this.uniforms.center.value}set center(n){this.uniforms.center.value=n}initChunks(){super.initChunks(),s.registerChunk()}initUniforms(){this.uniforms=a.rDY.merge([w.getBasicUniforms(),s.getUniform(),{uvRotation:{value:0},swirlRotation:{value:3.14},radius:{value:.5},center:{value:new a.FM8(.5,.5)}}])}startAnimation(){y.Fz.on(y.M9.onBeforeTick,this.animationListener)}stopAnimation(){y.Fz.off(y.M9.onBeforeTick,this.animationListener)}}class b{static initColorGUI(n,e,t="color"){const i={},a=e[t];return i[t]=a.getHex(),n.addColor(i,t).onChange((n=>{a.setHex(n)})),i}static initBasicMaterialGUI(n,e,t="Material"){const i=n.addFolder(t);return this.initMaterialFolder(i,e),i.open(),i}static initMaterialGUI(n,e,t="Material"){const i=this.initBasicMaterialGUI(n,e,t);this.initColorGUI(i,e,"emissive")}static initMaterialFolder(n,e){this.initColorGUI(n,e),n.add(e,"transparent"),n.add(e,"uniformOpacity",0,1)}static initSpriteMaterialGUI(n,e,t="Material"){const i=n.addFolder(t);this.initMaterialFolder(i,e),i.open()}static initGridMaterialGUI(n,e){this.initMaterialGUI(n,e);const t={mask:"",alphaMap:""},i=n.addFolder("WavyGridMaterial");return i.add(e,"isReversed"),i.add(e,"division",2,256).step(1),i.add(e,"divisionScaleX",0,4).step(1),i.add(t,"mask",{none:"",earth:"./textures/landmask.png"}).onChange((n=>{e.maskTexture=""===n?null:(new a.dpR).load(n)})),i.add(t,"alphaMap",{none:"",earth:"./textures/landmask.png"}).onChange((n=>{e.alphaMap=""===n?null:(new a.dpR).load(n)})),i.open(),i}static initWavyMaterialGUI(n,e){const t=this.initGridMaterialGUI(n,e).addFolder("WavyAnimation");t.add(e,"isAnimate"),t.add(e,"speed",-2,2),t.add(e,"waveFrequency",0,1),t.add(e,"wavePow",0,4),t.add(e,"direction",{horizontal:i.horizontal,vertical:i.vertical,radial:i.radial}),t.add(e,"raisedBottom",0,1),t.open()}static initAnimationGUI(n,e,t="Animation"){const i=n.addFolder(t);i.add(e,"isAnimate"),i.add(e,"speed",-2,2),i.open()}static initRimGUI(n,e,t="Rim Effect Material"){const i=n.addFolder(t);b.initColorGUI(i,e,"rimColor"),i.add(e,"rimStrength",0,4).step(.01),i.add(e,"rimPow",0,4).step(.01),b.initColorGUI(i,e,"insideColor"),i.add(e,"insideStrength",0,4).step(.01),i.add(e,"insidePow",0,8).step(.01),i.open()}static initExpansionGUI(n,e,t="ExpansionMaterial"){const i=n.addFolder("ExpansionMaterial");i.add(e,"expansionStrength",-12,12).step(.01),i.open()}static initFBMTilingGUI(n,e,t="FBM Tiling"){const i=n.addFolder("FBM Tiling");i.add(e,"tiles",1,8).step(1),i.add(e,"hashLoop",2,16).step(1),i.add(e,"amp",0,2).step(.01),i.open()}static initSkyGUI(n,e,t,i){const a={turbidity:10,rayleigh:.15,mieCoefficient:.005,mieDirectionalG:.8,inclination:.07,azimuth:.25,exposure:.75},r=4e5;function s(){const n=e.material.uniforms;n.turbidity.value=a.turbidity,n.rayleigh.value=a.rayleigh,n.mieCoefficient.value=a.mieCoefficient,n.mieDirectionalG.value=a.mieDirectionalG;const s=Math.PI*(a.inclination-.5),o=2*Math.PI*(a.azimuth-.5);t.position.x=r*Math.cos(o),t.position.y=r*Math.sin(o)*Math.sin(s),t.position.z=r*Math.sin(o)*Math.cos(s),n.sunPosition.value.copy(t.position),i.toneMappingExposure=a.exposure}s();const o=n.addFolder("Sky");o.add(a,"turbidity",1,20,.1).onChange(s),o.add(a,"rayleigh",0,4,.001).onChange(s),o.add(a,"mieCoefficient",0,.1,.001).onChange(s),o.add(a,"mieDirectionalG",0,1,.001).onChange(s),o.add(a,"inclination",0,1,1e-4).onChange(s),o.add(a,"azimuth",0,1,1e-4).onChange(s),o.add(a,"exposure",0,1,1e-4).onChange(s),o.open()}}var I=t(12),R=t(659);class A{static initScene(){return new a.xsS}static initLight(n){const e=new a.Mig(16777215,1);return n.add(e),e}static initCamera(n,e,t,i=400){const r=new a.cPb(45,e/t,1,i);return r.position.set(0,0,100),r.updateMatrixWorld(!1),n.add(r),r}static initControl(n,e){let t;null!=e&&(t=e.domElement);const i=new I.z(n,t);return i.update(),i}static initRenderer(n,e,t=0,i=!0){const r=new a.CP7({antialias:i});return r.setClearColor(new a.Ilk(t)),r.setSize(n,e),r.setPixelRatio(window.devicePixelRatio),document.body.appendChild(r.domElement),r}static initHelper(n){const e=new a.y8_(30);n.add(e)}static initSky(n,e,t){t.toneMapping=a.LY2;const i=new a.Kj0(new a.Aip(2e4,16,8),new a.vBJ({color:16777215}));i.position.y=-7e5,i.visible=!1,n.add(i);const r=new R.q;r.scale.setScalar(45e3),n.add(r),b.initSkyGUI(e,r,i,t)}}var G=t(899);class O{constructor(){const n=A.initScene();n.fog=new a.ybr(0,80,160),A.initLight(n);const e=A.initCamera(n,640,480),t=A.initRenderer(640,480);A.initControl(e,t),A.initHelper(n);const i=this.initObject(n);y.Fz.addEventListener(y.M9.tick,(i=>{t.render(n,e)})),this.initGUI(i)}initObject(n){const e=new a.cek(16777215,1,0,2);e.position.set(10,20,30),n.add(e);const t=new a.xG9(e);n.add(t);const i=new a.BKK(20,20),r=new S({fog:void 0!==n.fog});r.color=new a.Ilk(43775),r.swirlRotation=2*Math.PI*3,r.radius=.7071,r.speed=.1,r.transparent=!0;const s=new a.dpR;r.alphaMap=s.load("./textures/waternormals.jpg");const o=new a.Kj0(i,r);return n.add(o),r}initGUI(n){const e=new G.ZP;b.initMaterialGUI(e,n),this.initGUIMaterial(e,n),b.initAnimationGUI(e,n)}initGUIMaterial(n,e){const t=n.addFolder("Swirl"),i={centerX:e.center.x,centerY:e.center.y},a=()=>{e.center.x=i.centerX,e.center.y=i.centerY};t.add(e,"uvRotation",0,2*Math.PI).step(.01),t.add(e,"swirlRotation",0,2*Math.PI*6).step(.01),t.add(e,"radius",0,.7071).step(.01),t.add(i,"centerX",0,1).step(.01).onChange(a),t.add(i,"centerY",0,1).step(.01).onChange(a),t.open()}}window.onload=()=>{new O}}},t={};function i(n){var a=t[n];if(void 0!==a)return a.exports;var r=t[n]={exports:{}};return e[n](r,r.exports,i),r.exports}i.m=e,n=[],i.O=(e,t,a,r)=>{if(!t){var s=1/0;for(c=0;c<n.length;c++){for(var[t,a,r]=n[c],o=!0,u=0;u<t.length;u++)(!1&r||s>=r)&&Object.keys(i.O).every((n=>i.O[n](t[u])))?t.splice(u--,1):(o=!1,r<s&&(s=r));if(o){n.splice(c--,1);var l=a();void 0!==l&&(e=l)}}return e}r=r||0;for(var c=n.length;c>0&&n[c-1][2]>r;c--)n[c]=n[c-1];n[c]=[t,a,r]},i.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return i.d(e,{a:e}),e},i.d=(n,e)=>{for(var t in e)i.o(e,t)&&!i.o(n,t)&&Object.defineProperty(n,t,{enumerable:!0,get:e[t]})},i.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),i.j=731,(()=>{var n={731:0};i.O.j=e=>0===n[e];var e=(e,t)=>{var a,r,[s,o,u]=t,l=0;if(s.some((e=>0!==n[e]))){for(a in o)i.o(o,a)&&(i.m[a]=o[a]);if(u)var c=u(i)}for(e&&e(t);l<s.length;l++)r=s[l],i.o(n,r)&&n[r]&&n[r][0](),n[r]=0;return i.O(c)},t=self.webpackChunkthreejs_shader_materials=self.webpackChunkthreejs_shader_materials||[];t.forEach(e.bind(null,0)),t.push=e.bind(null,t.push.bind(t))})();var a=i.O(void 0,[736],(()=>i(321)));a=i.O(a)})();