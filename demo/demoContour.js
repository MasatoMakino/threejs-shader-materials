(()=>{"use strict";var n,e={632:(n,e,t)=>{const i="\n#define PHONG\n\nvarying vec3 vViewPosition;\n\n//added by threejs-shader-materials\nvarying vec2 uvPosition;\n#include <mesh_position_varying>\n#include <surface_normal_varying_chunk>\n#include <__expansion_uniform_chunk>\n\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n    #include <mesh_position_vertex>\n    uvPosition = uv;\n\n    #include <uv_vertex>\n    #include <color_vertex>\n    #include <morphcolor_vertex>\n    #include <batching_vertex>\n    \n    #include <beginnormal_vertex>\n    #include <morphnormal_vertex>\n    #include <skinbase_vertex>\n    #include <skinnormal_vertex>\n    #include <defaultnormal_vertex>\n    \n    #include <surface_normal_vertex_chunk>\n\n    #include <normal_vertex>\n    \n    #include <begin_vertex>\n    \n    #include <__expansion_vertex_chunk>\n    \n    #include <morphtarget_vertex>\n    #include <skinning_vertex>\n    #include <displacementmap_vertex>\n    #include <project_vertex>\n    #include <logdepthbuf_vertex>\n    #include <clipping_planes_vertex>\n    \n    vViewPosition = - mvPosition.xyz;\n\n    #include <worldpos_vertex>\n    #include <envmap_vertex>\n    #include <shadowmap_vertex>\n    #include <fog_vertex>\n\n}";var a,r=t(753);class s{static getChunkName(){return""}static getChunk(){return""}static getDefines(){return{}}static registerChunk(){r.vxI&&null==r.vxI[this.getChunkName()]&&(r.vxI[this.getChunkName()]=this.getChunk())}static getUniform(){return{}}}class o extends s{static registerChunk(){l.registerChunk(),u.registerChunk()}static getDefines(){return{USE_EXPANSION:!1}}static getUniform(){return{expansionStrength:{value:0}}}}class l extends s{static getChunkName(){return"__expansion_uniform_chunk"}static getChunk(){return"\n    #ifdef USE_EXPANSION\n      uniform float expansionStrength;\n    #endif\n    "}}class u extends s{static getChunkName(){return"__expansion_vertex_chunk"}static getChunk(){return"\n    #ifdef USE_EXPANSION\n      transformed += normal * expansionStrength;\n    #endif\n    "}}class c extends s{static registerChunk(){super.registerChunk(),d.registerChunk(),m.registerChunk(),p.registerChunk()}static getUniform(){return r.LlO.merge([super.getUniform(),{hasMap:{value:!1},map:{value:null}}])}static getMap(n){return n.uniforms.map.value}static setMap(n,e){n.uniforms.map.value=e,n.uniforms.hasMap.value=null!=e}}class d extends s{static getChunkName(){return"map_uniform_chunk"}static getChunk(){return"\n      uniform bool hasMap;\n      uniform sampler2D map;\n    "}}class m extends s{static getChunkName(){return"map_fragment_chunk"}static getChunk(){return"\n      if( hasMap ){\n        vec4 texelColor = texture2D( map, mapUV );\n        diffuseColor *= texelColor;\n      }\n    "}}class p extends s{static getChunkName(){return"__ShaderMaterial__map_fragment_begin_chunk"}static getChunk(){return"\n      vec2 mapUV = uvPosition;\n    "}}class g extends s{static registerChunk(){h.registerChunk(),_.registerChunk(),f.registerChunk(),v.registerChunk(),C.registerChunk()}static getDefines(){return{USE_MESH_POSITION:!1}}}class h extends s{static getChunkName(){return"mesh_phong_uniform"}static getChunk(){return"\n      uniform vec3 diffuse;\n      uniform vec3 emissive;\n      uniform vec3 specular;\n      uniform float shininess;\n      uniform float opacity;\n      uniform bool hasAlphaMap;\n      uniform sampler2D alphaMap;\n    "}}class _ extends s{static getChunkName(){return"mesh_phong_diffuse_color"}static getChunk(){return"\n    vec4 diffuseColor = vec4( diffuse, opacity );\n    ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n    vec3 totalEmissiveRadiance = emissive;\n    "}}class f extends s{static getChunkName(){return"mesh_phong_switching_alpha_map"}static getChunk(){return"\n      if( hasAlphaMap ){\n        diffuseColor.a *= texture2D( alphaMap, mapUV ).g;\n      }\n    "}}class v extends s{static getChunkName(){return"mesh_position_varying"}static getChunk(){return"\n    #ifdef USE_MESH_POSITION\n    varying vec3 meshPosition;\n    #endif\n    "}}class C extends s{static getChunkName(){return"mesh_position_vertex"}static getChunk(){return"\n    #ifdef USE_MESH_POSITION\n    meshPosition = position;\n    #endif\n    "}}class x extends s{static registerChunk(){k.registerChunk(),M.registerChunk()}static getDefines(){return{USE_SURFACE_NORMAL:!1}}static getUniform(){return{}}}class k extends s{static getChunkName(){return"surface_normal_varying_chunk"}static getChunk(){return"\n    #ifdef USE_SURFACE_NORMAL\n      varying vec3 surfaceNormal;\n    #endif\n    "}}class M extends s{static getChunkName(){return"surface_normal_vertex_chunk"}static getChunk(){return"\n    #ifdef USE_SURFACE_NORMAL\n      surfaceNormal = normalize( transformedNormal );\n    #endif\n    "}}!function(n){n[n.vertical=4]="vertical",n[n.horizontal=3]="horizontal",n[n.radial=5]="radial"}(a||(a={}));class y extends r.BKk{constructor(n,e,t){super(t),this._opacity=1,t??={},n??=i,e??="\n#define PHONG\n\n#include <mesh_phong_uniform>\n\n//added by threejs-shader-materials\n#include <mesh_position_varying>\nvarying vec2 uvPosition;\n\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n// #include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n    #include <clipping_planes_fragment>\n    \n    #include <mesh_phong_diffuse_color>\n    \n    #include <logdepthbuf_fragment>\n    #include <__ShaderMaterial__map_fragment_begin_chunk>\n    #include <map_fragment>\n    #include <color_fragment>\n    // #include <alphamap_fragment>\n    #include <mesh_phong_switching_alpha_map>\n    #include <alphatest_fragment>\n    #include <alphahash_fragment>\n    #include <specularmap_fragment>\n    #include <normal_fragment_begin>\n    #include <normal_fragment_maps>\n    #include <emissivemap_fragment>\n\n    // accumulation\n    #include <lights_phong_fragment>\n    #include <lights_fragment_begin>\n    #include <lights_fragment_maps>\n    #include <lights_fragment_end>\n\n    // modulation\n    #include <aomap_fragment>\n\n    vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n    \n    #include <envmap_fragment>\n    #include <opaque_fragment>\n    #include <tonemapping_fragment>\n    #include <colorspace_fragment>\n    #include <fog_fragment>\n    #include <premultiplied_alpha_fragment>\n    #include <dithering_fragment>\n\n}",this.initChunks(),this.initUniforms(),this.initDefines(),this.vertexShader=n,this.fragmentShader=e,this.initDefaultSetting(t)}static getBasicUniforms(){return r.LlO.merge([r.fCn.common,r.fCn.specularmap,r.fCn.envmap,r.fCn.aomap,r.fCn.lightmap,r.fCn.emissivemap,r.fCn.bumpmap,r.fCn.normalmap,r.fCn.displacementmap,r.fCn.gradientmap,r.fCn.fog,r.fCn.lights,{emissive:{value:new r.Q1f(0)},specular:{value:new r.Q1f(1118481)},shininess:{value:30},hasAlphaMap:{value:!1}},x.getUniform(),o.getUniform(),c.getUniform()])}initChunks(){g.registerChunk(),x.registerChunk(),o.registerChunk(),c.registerChunk()}initUniforms(){this.uniforms=r.LlO.merge([y.getBasicUniforms(),o.getUniform(),{}])}initDefines(){this.defines=Object.assign({},g.getDefines(),x.getDefines(),o.getDefines(),this.defines)}initDefaultSetting(n){this.uniformOpacity=this._opacity,this.lights=!0,null==n?.transparent&&(this.transparent=!0)}get color(){return this.uniforms.diffuse.value}set color(n){this.uniforms.diffuse.value=n}get opacity(){return this.uniformOpacity}get uniformOpacity(){return this._opacity}set opacity(n){this.uniformOpacity=n}set uniformOpacity(n){this._opacity=n,this.uniforms?.opacity&&(this.uniforms.opacity.value=n)}get emissive(){return this.uniforms.emissive.value}set emissive(n){this.uniforms.emissive.value=n}get map(){return c.getMap(this)}set map(n){c.setMap(this,n),this.onSetMap(n)}onSetMap(n){}get alphaMap(){return this.uniforms.alphaMap.value}set alphaMap(n){this.uniforms.alphaMap.value=n,this.uniforms.hasAlphaMap.value=null!=n,this.onSetAlphaMap(n)}onSetAlphaMap(n){}startGlow(){this.alphaTest=0,this.depthWrite=!1,this.blending=r.EZo}}r.BKk,r.BKk,r.BKk;class b extends y{get map(){return this._map}loadMap(n,e){this._map=(new r.Tap).load(n,(n=>{this.uniforms&&this.uniforms.map&&(this.uniforms.map.value=n)})),e.computeBoundingBox(),this.uniforms.top.value=e.boundingBox.max.y,this.uniforms.bottom.value=e.boundingBox.min.y}constructor(n){super(i,"\n#define PHONG\n\n#include <mesh_phong_uniform>\nvarying vec2 uvPosition;\n#include <mesh_position_varying>\n\nuniform float bottom;\nuniform float top;\n\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n// #include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n    #include <clipping_planes_fragment>\n  \n    #include <mesh_phong_diffuse_color>\n    \n    #include <logdepthbuf_fragment>\n\n    #include <__ShaderMaterial__map_fragment_begin_chunk>\n    #ifdef USE_MAP\n      float mapY = ( meshPosition.y - bottom ) / ( top - bottom );\n      vec4 texelColor = texture2D( map, vec2(0.5, mapY) );\n      diffuseColor *= texelColor;\n    #endif\n\n    #include <color_fragment>\n    #include <mesh_phong_switching_alpha_map>\n    // #include <alphamap_fragment>\n    #include <alphatest_fragment>\n    #include <alphahash_fragment>\n    #include <specularmap_fragment>\n    #include <normal_fragment_begin>\n    #include <normal_fragment_maps>\n    #include <emissivemap_fragment>\n\n    // accumulation\n    #include <lights_phong_fragment>\n    #include <lights_fragment_begin>\n    #include <lights_fragment_maps>\n    #include <lights_fragment_end>\n\n    // modulation\n    #include <aomap_fragment>\n\n    vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n    \n    #include <envmap_fragment>\n    #include <opaque_fragment>\n    #include <tonemapping_fragment>\n    #include <colorspace_fragment>\n    #include <fog_fragment>\n    #include <premultiplied_alpha_fragment>\n    #include <dithering_fragment>\n\n}",n)}initDefines(){super.initDefines(),this.defines.USE_MESH_POSITION=!0}initUniforms(){this.uniforms=r.LlO.merge([y.getBasicUniforms(),{top:{value:1},bottom:{value:-1}}])}initDefaultSetting(n){super.initDefaultSetting(n),this.transparent&&null==n.alphaTest&&(this.alphaTest=.5),null==n.side?this.side=r.$EB:this.side=n.side}}var S=t(293);S.zE5;var U=t(603);(0,S.Fn)((([n,e,t,i,a,r])=>w(n,e,t,i,a,r,(0,S.eR5)(0,0,1))));const w=(0,S.Fn)((([n,e,t,i,a,r,s])=>{const o=(0,S.eR5)(0,0,0).toVar(),l=(0,S.T9B)(0,S.ono.dot((0,S.eR5)(s))),u=(0,S.jbE)(1,l);u.assign((0,S.n7C)(u,e)),o.rgb.addAssign(n.mul(u.mul(t)));const c=(0,S.n7C)(l,a);return o.rgb.addAssign(i.mul(c.mul(r))),o}));S.P8l;class O{static initColorGUI(n,e,t="color"){const i={},a=e[t];return i[t]=a.getHex(),n.addColor(i,t).onChange((n=>{a.setHex(n)})),i}static initColorNodeGUI(n,e,t="color"){const i={},a=e[t];return i[t]=a.value.getHex(),n.addColor(i,t).onChange((n=>{a.value.setHex(n)})),i}static initBasicMaterialGUI(n,e,t="Material"){const i=n.addFolder(t);return this.initMaterialFolder(i,e),i.open(),i}static initMaterialGUI(n,e,t="Material"){const i=this.initBasicMaterialGUI(n,e,t);this.initColorGUI(i,e,"emissive")}static initMaterialFolder(n,e,t=!1){this.initColorGUI(n,e),n.add(e,"transparent");const i=t?"opacity":"uniformOpacity";n.add(e,i,0,1)}static initSpriteMaterialGUI(n,e,t="Material"){const i=n.addFolder(t);this.initMaterialFolder(i,e),i.open()}static initGridMaterialGUI(n,e){this.initMaterialGUI(n,e);const t={mask:"",alphaMap:""},i=n.addFolder("WavyGridMaterial");return i.add(e,"isReversed"),i.add(e,"division",2,256).step(1),i.add(e,"divisionScaleX",0,4).step(1),i.add(t,"mask",{none:"",earth:"./textures/landmask.png"}).onChange((n=>{e.maskTexture=""===n?null:(new r.Tap).load(n)})),i.add(t,"alphaMap",{none:"",earth:"./textures/landmask.png"}).onChange((n=>{e.alphaMap=""===n?null:(new r.Tap).load(n)})),i.open(),i}static initWavyMaterialGUI(n,e){const t=this.initGridMaterialGUI(n,e).addFolder("WavyAnimation");t.add(e,"isAnimate"),t.add(e,"speed",-2,2),t.add(e,"waveFrequency",0,1),t.add(e,"wavePow",0,4),t.add(e,"direction",{horizontal:a.horizontal,vertical:a.vertical,radial:a.radial}),t.add(e,"raisedBottom",0,1),t.open()}static initAnimationGUI(n,e,t="Animation"){const i=n.addFolder(t);i.add(e,"isAnimate"),i.add(e,"speed",-2,2),i.open()}static initRimGUI(n,e,t="Rim Effect Material"){const i=n.addFolder(t);O.initColorGUI(i,e,"rimColor"),i.add(e,"rimStrength",0,4).step(.01),i.add(e,"rimPow",0,4).step(.01),O.initColorGUI(i,e,"insideColor"),i.add(e,"insideStrength",0,4).step(.01),i.add(e,"insidePow",0,8).step(.01),i.open()}static initExpansionGUI(n,e,t="ExpansionMaterial"){const i=n.addFolder("ExpansionMaterial");i.add(e,"expansionStrength",-12,12).step(.01),i.open()}static initFBMTilingGUI(n,e,t="FBM Tiling"){const i=n.addFolder("FBM Tiling");i.add(e,"tiles",1,8).step(1),i.add(e,"hashLoop",2,16).step(1),i.add(e,"amp",0,2).step(.01),i.open()}static initSkyGUI(n,e,t,i){const a={turbidity:10,rayleigh:.15,mieCoefficient:.005,mieDirectionalG:.8,inclination:.07,azimuth:.25,exposure:.75},r=4e5;function s(){const n=e.material.uniforms;n.turbidity.value=a.turbidity,n.rayleigh.value=a.rayleigh,n.mieCoefficient.value=a.mieCoefficient,n.mieDirectionalG.value=a.mieDirectionalG;const s=Math.PI*(a.inclination-.5),o=2*Math.PI*(a.azimuth-.5);t.position.x=r*Math.cos(o),t.position.y=r*Math.sin(o)*Math.sin(s),t.position.z=r*Math.sin(o)*Math.cos(s),n.sunPosition.value.copy(t.position),i.toneMappingExposure=a.exposure}s();const o=n.addFolder("Sky");o.add(a,"turbidity",1,20,.1).onChange(s),o.add(a,"rayleigh",0,4,.001).onChange(s),o.add(a,"mieCoefficient",0,.1,.001).onChange(s),o.add(a,"mieDirectionalG",0,1,.001).onChange(s),o.add(a,"inclination",0,1,1e-4).onChange(s),o.add(a,"azimuth",0,1,1e-4).onChange(s),o.add(a,"exposure",0,1,1e-4).onChange(s),o.open()}}var I=t(580),E=t(785);class N{static initScene(){return new r.Z58}static initLight(n){const e=new r.$p8(16777215,Math.PI);return n.add(e),e}static initCamera(n,e,t,i=400){const a=new r.ubm(45,e/t,1,i);return a.position.set(0,0,100),a.updateMatrixWorld(!1),n.add(a),a}static initControl(n,e){let t;null!=e&&(t=e.domElement);const i=new I.N(n,t);return i.update(),i}static initRenderer(n,e,t=0,i=!0){const a=new r.JeP({antialias:i});return a.setClearColor(new r.Q1f(t)),a.setSize(n,e),a.setPixelRatio(window.devicePixelRatio),a.domElement.style.backgroundColor="#"+t.toString(16).padStart(6,"0"),document.body.appendChild(a.domElement),console.log("three.js revision: ",r.sPf),a}static initHelper(n){const e=new r.IzY(30);n.add(e)}static initSky(n,e,t){t.toneMapping=r.FV;const i=new r.eaF(new r.Gu$(2e4,16,8),new r.V9B({color:16777215}));i.position.y=-7e5,i.visible=!1,n.add(i);const a=new E.m;a.scale.setScalar(45e3),n.add(a),O.initSkyGUI(e,a,i,t)}}class P{constructor(){const n=N.initScene();n.fog=new r.jUj(0,80,160),N.initLight(n);const e=N.initCamera(n,640,480),t=N.initRenderer(640,480);N.initControl(e,t),N.initHelper(n),this.initObject(n),U.w.on("tick",(i=>{t.render(n,e)}))}initObject(n){const e=new r.HiM(16777215,3e4);e.position.set(10,20,30),n.add(e);const t=new r.F1l(e);n.add(t);const i=new r.O3Y(10,4,32,32),a=new b({opacity:.75,fog:void 0!==n.fog});a.loadMap("./textures/contour_glow.png",i),a.startGlow(),a.emissive=new r.Q1f(16776960);const s=new r.eaF(i,a);n.add(s)}}window.onload=()=>{new P}}},t={};function i(n){var a=t[n];if(void 0!==a)return a.exports;var r=t[n]={exports:{}};return e[n](r,r.exports,i),r.exports}i.m=e,n=[],i.O=(e,t,a,r)=>{if(!t){var s=1/0;for(c=0;c<n.length;c++){for(var[t,a,r]=n[c],o=!0,l=0;l<t.length;l++)(!1&r||s>=r)&&Object.keys(i.O).every((n=>i.O[n](t[l])))?t.splice(l--,1):(o=!1,r<s&&(s=r));if(o){n.splice(c--,1);var u=a();void 0!==u&&(e=u)}}return e}r=r||0;for(var c=n.length;c>0&&n[c-1][2]>r;c--)n[c]=n[c-1];n[c]=[t,a,r]},i.d=(n,e)=>{for(var t in e)i.o(e,t)&&!i.o(n,t)&&Object.defineProperty(n,t,{enumerable:!0,get:e[t]})},i.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),i.j=700,(()=>{var n={700:0};i.O.j=e=>0===n[e];var e=(e,t)=>{var a,r,[s,o,l]=t,u=0;if(s.some((e=>0!==n[e]))){for(a in o)i.o(o,a)&&(i.m[a]=o[a]);if(l)var c=l(i)}for(e&&e(t);u<s.length;u++)r=s[u],i.o(n,r)&&n[r]&&n[r][0](),n[r]=0;return i.O(c)},t=self.webpackChunk_masatomakino_threejs_shader_materials=self.webpackChunk_masatomakino_threejs_shader_materials||[];t.forEach(e.bind(null,0)),t.push=e.bind(null,t.push.bind(t))})();var a=i.O(void 0,[121],(()=>i(632)));a=i.O(a)})();