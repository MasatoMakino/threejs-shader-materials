(()=>{"use strict";var n,e={195:(n,e,i)=>{var t,a=i(753);class r{static getChunkName(){return""}static getChunk(){return""}static getDefines(){return{}}static registerChunk(){a.vxI&&null==a.vxI[this.getChunkName()]&&(a.vxI[this.getChunkName()]=this.getChunk())}static getUniform(){return{}}}class s extends r{static registerChunk(){o.registerChunk()}static getUniform(){return{time:{value:0},isAnimate:{value:!0}}}static addTime(n,e){n.uniforms.time.value+=e*n.speed}}class o extends r{static getChunkName(){return"time_animation_uniform_chunk"}static getChunk(){return"\n    uniform float time;\n    uniform bool isAnimate;\n    "}}class l extends r{static registerChunk(){c.registerChunk(),u.registerChunk()}static getDefines(){return{USE_EXPANSION:!1}}static getUniform(){return{expansionStrength:{value:0}}}}class c extends r{static getChunkName(){return"__expansion_uniform_chunk"}static getChunk(){return"\n    #ifdef USE_EXPANSION\n      uniform float expansionStrength;\n    #endif\n    "}}class u extends r{static getChunkName(){return"__expansion_vertex_chunk"}static getChunk(){return"\n    #ifdef USE_EXPANSION\n      transformed += normal * expansionStrength;\n    #endif\n    "}}class d extends r{static registerChunk(){super.registerChunk(),m.registerChunk(),p.registerChunk(),g.registerChunk()}static getUniform(){return a.LlO.merge([super.getUniform(),{hasMap:{value:!1},map:{value:null}}])}static getMap(n){return n.uniforms.map.value}static setMap(n,e){n.uniforms.map.value=e,n.uniforms.hasMap.value=null!=e}}class m extends r{static getChunkName(){return"map_uniform_chunk"}static getChunk(){return"\n      uniform bool hasMap;\n      uniform sampler2D map;\n    "}}class p extends r{static getChunkName(){return"map_fragment_chunk"}static getChunk(){return"\n      if( hasMap ){\n        vec4 texelColor = texture2D( map, mapUV );\n        diffuseColor *= texelColor;\n      }\n    "}}class g extends r{static getChunkName(){return"__ShaderMaterial__map_fragment_begin_chunk"}static getChunk(){return"\n      vec2 mapUV = uvPosition;\n    "}}class h extends r{static registerChunk(){f.registerChunk(),_.registerChunk(),v.registerChunk(),C.registerChunk(),k.registerChunk()}static getDefines(){return{USE_MESH_POSITION:!1}}}class f extends r{static getChunkName(){return"mesh_phong_uniform"}static getChunk(){return"\n      uniform vec3 diffuse;\n      uniform vec3 emissive;\n      uniform vec3 specular;\n      uniform float shininess;\n      uniform float opacity;\n      uniform bool hasAlphaMap;\n      uniform sampler2D alphaMap;\n    "}}class _ extends r{static getChunkName(){return"mesh_phong_diffuse_color"}static getChunk(){return"\n    vec4 diffuseColor = vec4( diffuse, opacity );\n    ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n    vec3 totalEmissiveRadiance = emissive;\n    "}}class v extends r{static getChunkName(){return"mesh_phong_switching_alpha_map"}static getChunk(){return"\n      if( hasAlphaMap ){\n        diffuseColor.a *= texture2D( alphaMap, mapUV ).g;\n      }\n    "}}class C extends r{static getChunkName(){return"mesh_position_varying"}static getChunk(){return"\n    #ifdef USE_MESH_POSITION\n    varying vec3 meshPosition;\n    #endif\n    "}}class k extends r{static getChunkName(){return"mesh_position_vertex"}static getChunk(){return"\n    #ifdef USE_MESH_POSITION\n    meshPosition = position;\n    #endif\n    "}}class x extends r{static registerChunk(){M.registerChunk(),S.registerChunk()}static getDefines(){return{USE_SURFACE_NORMAL:!1}}static getUniform(){return{}}}class M extends r{static getChunkName(){return"surface_normal_varying_chunk"}static getChunk(){return"\n    #ifdef USE_SURFACE_NORMAL\n      varying vec3 surfaceNormal;\n    #endif\n    "}}class S extends r{static getChunkName(){return"surface_normal_vertex_chunk"}static getChunk(){return"\n    #ifdef USE_SURFACE_NORMAL\n      surfaceNormal = normalize( transformedNormal );\n    #endif\n    "}}!function(n){n[n.vertical=4]="vertical",n[n.horizontal=3]="horizontal",n[n.radial=5]="radial"}(t||(t={}));class b extends a.BKk{constructor(n,e,i){super(i),this._opacity=1,i??={},n??="\n#define PHONG\n\nvarying vec3 vViewPosition;\n\n//added by threejs-shader-materials\nvarying vec2 uvPosition;\n#include <mesh_position_varying>\n#include <surface_normal_varying_chunk>\n#include <__expansion_uniform_chunk>\n\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n    #include <mesh_position_vertex>\n    uvPosition = uv;\n\n    #include <uv_vertex>\n    #include <color_vertex>\n    #include <morphcolor_vertex>\n    #include <batching_vertex>\n    \n    #include <beginnormal_vertex>\n    #include <morphnormal_vertex>\n    #include <skinbase_vertex>\n    #include <skinnormal_vertex>\n    #include <defaultnormal_vertex>\n    \n    #include <surface_normal_vertex_chunk>\n\n    #include <normal_vertex>\n    \n    #include <begin_vertex>\n    \n    #include <__expansion_vertex_chunk>\n    \n    #include <morphtarget_vertex>\n    #include <skinning_vertex>\n    #include <displacementmap_vertex>\n    #include <project_vertex>\n    #include <logdepthbuf_vertex>\n    #include <clipping_planes_vertex>\n    \n    vViewPosition = - mvPosition.xyz;\n\n    #include <worldpos_vertex>\n    #include <envmap_vertex>\n    #include <shadowmap_vertex>\n    #include <fog_vertex>\n\n}",e??="\n#define PHONG\n\n#include <mesh_phong_uniform>\n\n//added by threejs-shader-materials\n#include <mesh_position_varying>\nvarying vec2 uvPosition;\n\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n// #include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n    #include <clipping_planes_fragment>\n    \n    #include <mesh_phong_diffuse_color>\n    \n    #include <logdepthbuf_fragment>\n    #include <__ShaderMaterial__map_fragment_begin_chunk>\n    #include <map_fragment>\n    #include <color_fragment>\n    // #include <alphamap_fragment>\n    #include <mesh_phong_switching_alpha_map>\n    #include <alphatest_fragment>\n    #include <alphahash_fragment>\n    #include <specularmap_fragment>\n    #include <normal_fragment_begin>\n    #include <normal_fragment_maps>\n    #include <emissivemap_fragment>\n\n    // accumulation\n    #include <lights_phong_fragment>\n    #include <lights_fragment_begin>\n    #include <lights_fragment_maps>\n    #include <lights_fragment_end>\n\n    // modulation\n    #include <aomap_fragment>\n\n    vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n    \n    #include <envmap_fragment>\n    #include <opaque_fragment>\n    #include <tonemapping_fragment>\n    #include <colorspace_fragment>\n    #include <fog_fragment>\n    #include <premultiplied_alpha_fragment>\n    #include <dithering_fragment>\n\n}",this.initChunks(),this.initUniforms(),this.initDefines(),this.vertexShader=n,this.fragmentShader=e,this.initDefaultSetting(i)}static getBasicUniforms(){return a.LlO.merge([a.fCn.common,a.fCn.specularmap,a.fCn.envmap,a.fCn.aomap,a.fCn.lightmap,a.fCn.emissivemap,a.fCn.bumpmap,a.fCn.normalmap,a.fCn.displacementmap,a.fCn.gradientmap,a.fCn.fog,a.fCn.lights,{emissive:{value:new a.Q1f(0)},specular:{value:new a.Q1f(1118481)},shininess:{value:30},hasAlphaMap:{value:!1}},x.getUniform(),l.getUniform(),d.getUniform()])}initChunks(){h.registerChunk(),x.registerChunk(),l.registerChunk(),d.registerChunk()}initUniforms(){this.uniforms=a.LlO.merge([b.getBasicUniforms(),l.getUniform(),{}])}initDefines(){this.defines=Object.assign({},h.getDefines(),x.getDefines(),l.getDefines(),this.defines)}initDefaultSetting(n){this.uniformOpacity=this._opacity,this.lights=!0,null==n?.transparent&&(this.transparent=!0)}get color(){return this.uniforms.diffuse.value}set color(n){this.uniforms.diffuse.value=n}get opacity(){return this.uniformOpacity}get uniformOpacity(){return this._opacity}set opacity(n){this.uniformOpacity=n}set uniformOpacity(n){this._opacity=n,this.uniforms?.opacity&&(this.uniforms.opacity.value=n)}get emissive(){return this.uniforms.emissive.value}set emissive(n){this.uniforms.emissive.value=n}get map(){return d.getMap(this)}set map(n){d.setMap(this,n),this.onSetMap(n)}onSetMap(n){}get alphaMap(){return this.uniforms.alphaMap.value}set alphaMap(n){this.uniforms.alphaMap.value=n,this.uniforms.hasAlphaMap.value=null!=n,this.onSetAlphaMap(n)}onSetAlphaMap(n){}startGlow(){this.alphaTest=0,this.depthWrite=!1,this.blending=a.EZo}}a.BKk,a.BKk,a.BKk;var y=i(293);y.zE5;var U=i(603);(0,y.Fn)((([n,e,i,t,a,r])=>w(n,e,i,t,a,r,(0,y.eR5)(0,0,1))));const w=(0,y.Fn)((([n,e,i,t,a,r,s])=>{const o=(0,y.eR5)(0,0,0).toVar(),l=(0,y.T9B)(0,y.ono.dot((0,y.eR5)(s))),c=(0,y.jbE)(1,l);c.assign((0,y.n7C)(c,e)),o.rgb.addAssign(n.mul(c.mul(i)));const u=(0,y.n7C)(l,a);return o.rgb.addAssign(t.mul(u.mul(r))),o}));y.P8l;class I extends b{addTime(n){this.isAnimate&&s.addTime(this,n)}get isAnimate(){return this.uniforms.isAnimate.value}set isAnimate(n){this.uniforms.isAnimate.value=n,this.isAnimate?this.startAnimation():this.stopAnimation()}get grid(){return this.uniforms.grid.value}set grid(n){this.uniforms.grid.value=n}get divisionScaleX(){return this.uniforms.divisionScaleX.value}set divisionScaleX(n){this.uniforms.divisionScaleX.value=n}constructor(n){super(null,"\n#define PHONG\n\n#include <mesh_phong_uniform>\nvarying vec2 uvPosition;\n#include <mesh_position_varying>\n\nuniform float grid;\nuniform float divisionScaleX;\n#include <time_animation_uniform_chunk>\n\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n// #include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvec2 rand2D(vec2 p, vec2 scale) {\n    p = mod(p, scale);\n    const float a = 12.9898, b = 78.233, c = 43758.5453;\n    const float a2 = 26.7, b2 = 14.879;\n    \n    highp float dt = dot(p, vec2(a, b)), sn = mod(dt, PI);\n    highp float dt2 = dot(p, vec2(a2, b2)), sn2 = mod(dt2, PI);\n    return fract(sin(vec2(dt, dt2)) * c);\n}\n\n/*!\n * Cellular Noise\n *\n * The inherits function is :\n * Author : patriciogv\n * see https://thebookofshaders.com/12/\n * LICENSE : https://github.com/patriciogonzalezvivo/thebookofshaders/issues/235\n */\nfloat cellularNoise(vec2 uv, float grid, float divisionScaleX, float time){\n  \n    vec2 scale = grid * vec2 ( divisionScaleX, 1.0 );\n    uv *= scale;\n    \n    vec2 i_uv = floor(uv);\n    vec2 f_uv = fract(uv);\n    \n    float minDist = 1.;\n    \n    for (int y= -1; y <= 1; y++) {\n        for (int x= -1; x <= 1; x++) {\n            vec2 neighbor = vec2(float(x), float(y));\n            vec2 point = rand2D(i_uv + neighbor, scale);\n            \n            point = 0.5 + 0.5 * sin(time + PI2 * point);\n            \n            vec2 diff = neighbor + point - f_uv;\n            float dist = length(diff);\n            \n            minDist = min(minDist, dist);\n        }\n    }\n    \n    return minDist;\n}\n\nvoid main() {\n    #include <clipping_planes_fragment>\n  \n    #include <mesh_phong_diffuse_color>\n    \n    #include <logdepthbuf_fragment>\n    #include <__ShaderMaterial__map_fragment_begin_chunk>\n    #include <map_fragment>\n    #include <color_fragment>\n\n    float dist = cellularNoise( mapUV, grid, divisionScaleX, time );\n    diffuseColor.rgb *= dist;\n    diffuseColor.a *= dist;\n    \n    #include <mesh_phong_switching_alpha_map>\n\n    // #include <alphamap_fragment>\n    #include <alphatest_fragment>\n    #include <alphahash_fragment>\n    #include <specularmap_fragment>\n    #include <normal_fragment_begin>\n    #include <normal_fragment_maps>\n    #include <emissivemap_fragment>\n\n    // accumulation\n    #include <lights_phong_fragment>\n    #include <lights_fragment_begin>\n    #include <lights_fragment_maps>\n    #include <lights_fragment_end>\n\n    // modulation\n    #include <aomap_fragment>\n\n    vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\n    #include <envmap_fragment>\n    #include <opaque_fragment>\n    #include <tonemapping_fragment>\n    #include <colorspace_fragment>\n    #include <fog_fragment>\n    #include <premultiplied_alpha_fragment>\n    #include <dithering_fragment>\n}",n),this.speed=-.02,this.animationListener=n=>{this.addTime(n.delta/1e3)},this.isAnimate=this.isAnimate}initChunks(){super.initChunks(),s.registerChunk()}initUniforms(){this.uniforms=a.LlO.merge([b.getBasicUniforms(),s.getUniform(),{grid:{value:3},divisionScaleX:{value:1}}])}startAnimation(){U.w.on("onBeforeTick",this.animationListener)}stopAnimation(){U.w.off("onBeforeTick",this.animationListener)}}class N{static initColorGUI(n,e,i="color"){const t={},a=e[i];return t[i]=a.getHex(),n.addColor(t,i).onChange((n=>{a.setHex(n)})),t}static initColorNodeGUI(n,e,i="color"){const t={},a=e[i];return t[i]=a.value.getHex(),n.addColor(t,i).onChange((n=>{a.value.setHex(n)})),t}static initBasicMaterialGUI(n,e,i="Material"){const t=n.addFolder(i);return this.initMaterialFolder(t,e),t.open(),t}static initMaterialGUI(n,e,i="Material"){const t=this.initBasicMaterialGUI(n,e,i);this.initColorGUI(t,e,"emissive")}static initMaterialFolder(n,e,i=!1){this.initColorGUI(n,e),n.add(e,"transparent");const t=i?"opacity":"uniformOpacity";n.add(e,t,0,1)}static initSpriteMaterialGUI(n,e,i="Material"){const t=n.addFolder(i);this.initMaterialFolder(t,e),t.open()}static initGridMaterialGUI(n,e){this.initMaterialGUI(n,e);const i={mask:"",alphaMap:""},t=n.addFolder("WavyGridMaterial");return t.add(e,"isReversed"),t.add(e,"division",2,256).step(1),t.add(e,"divisionScaleX",0,4).step(1),t.add(i,"mask",{none:"",earth:"./textures/landmask.png"}).onChange((n=>{e.maskTexture=""===n?null:(new a.Tap).load(n)})),t.add(i,"alphaMap",{none:"",earth:"./textures/landmask.png"}).onChange((n=>{e.alphaMap=""===n?null:(new a.Tap).load(n)})),t.open(),t}static initWavyMaterialGUI(n,e){const i=this.initGridMaterialGUI(n,e).addFolder("WavyAnimation");i.add(e,"isAnimate"),i.add(e,"speed",-2,2),i.add(e,"waveFrequency",0,1),i.add(e,"wavePow",0,4),i.add(e,"direction",{horizontal:t.horizontal,vertical:t.vertical,radial:t.radial}),i.add(e,"raisedBottom",0,1),i.open()}static initAnimationGUI(n,e,i="Animation"){const t=n.addFolder(i);t.add(e,"isAnimate"),t.add(e,"speed",-2,2),t.open()}static initRimGUI(n,e,i="Rim Effect Material"){const t=n.addFolder(i);N.initColorGUI(t,e,"rimColor"),t.add(e,"rimStrength",0,4).step(.01),t.add(e,"rimPow",0,4).step(.01),N.initColorGUI(t,e,"insideColor"),t.add(e,"insideStrength",0,4).step(.01),t.add(e,"insidePow",0,8).step(.01),t.open()}static initExpansionGUI(n,e,i="ExpansionMaterial"){const t=n.addFolder("ExpansionMaterial");t.add(e,"expansionStrength",-12,12).step(.01),t.open()}static initFBMTilingGUI(n,e,i="FBM Tiling"){const t=n.addFolder("FBM Tiling");t.add(e,"tiles",1,8).step(1),t.add(e,"hashLoop",2,16).step(1),t.add(e,"amp",0,2).step(.01),t.open()}static initSkyGUI(n,e,i,t){const a={turbidity:10,rayleigh:.15,mieCoefficient:.005,mieDirectionalG:.8,inclination:.07,azimuth:.25,exposure:.75},r=4e5;function s(){const n=e.material.uniforms;n.turbidity.value=a.turbidity,n.rayleigh.value=a.rayleigh,n.mieCoefficient.value=a.mieCoefficient,n.mieDirectionalG.value=a.mieDirectionalG;const s=Math.PI*(a.inclination-.5),o=2*Math.PI*(a.azimuth-.5);i.position.x=r*Math.cos(o),i.position.y=r*Math.sin(o)*Math.sin(s),i.position.z=r*Math.sin(o)*Math.cos(s),n.sunPosition.value.copy(i.position),t.toneMappingExposure=a.exposure}s();const o=n.addFolder("Sky");o.add(a,"turbidity",1,20,.1).onChange(s),o.add(a,"rayleigh",0,4,.001).onChange(s),o.add(a,"mieCoefficient",0,.1,.001).onChange(s),o.add(a,"mieDirectionalG",0,1,.001).onChange(s),o.add(a,"inclination",0,1,1e-4).onChange(s),o.add(a,"azimuth",0,1,1e-4).onChange(s),o.add(a,"exposure",0,1,1e-4).onChange(s),o.open()}}var A=i(580),G=i(785);class O{static initScene(){return new a.Z58}static initLight(n){const e=new a.$p8(16777215,Math.PI);return n.add(e),e}static initCamera(n,e,i,t=400){const r=new a.ubm(45,e/i,1,t);return r.position.set(0,0,100),r.updateMatrixWorld(!1),n.add(r),r}static initControl(n,e){let i;null!=e&&(i=e.domElement);const t=new A.N(n,i);return t.update(),t}static initRenderer(n,e,i=0,t=!0){const r=new a.JeP({antialias:t});return r.setClearColor(new a.Q1f(i)),r.setSize(n,e),r.setPixelRatio(window.devicePixelRatio),r.domElement.style.backgroundColor="#"+i.toString(16).padStart(6,"0"),document.body.appendChild(r.domElement),console.log("three.js revision: ",a.sPf),r}static initHelper(n){const e=new a.IzY(30);n.add(e)}static initSky(n,e,i){i.toneMapping=a.FV;const t=new a.eaF(new a.Gu$(2e4,16,8),new a.V9B({color:16777215}));t.position.y=-7e5,t.visible=!1,n.add(t);const r=new G.m;r.scale.setScalar(45e3),n.add(r),N.initSkyGUI(e,r,t,i)}}var P=i(638);class E{constructor(){const n=O.initScene();n.fog=new a.jUj(0,80,160),O.initLight(n);const e=O.initCamera(n,640,480),i=O.initRenderer(640,480);O.initControl(e,i),O.initHelper(n);const t=this.initObject(n);U.w.on("tick",(t=>{i.render(n,e)})),this.initGUI(t)}initObject(n){const e=new a.HiM(16777215,2e3);e.position.set(10,20,30),n.add(e);const i=new a.F1l(e);n.add(i);const t=new a.Gu$(30,32,32),r=new I({fog:void 0!==n.fog});r.color=new a.Q1f(22015),r.grid=8,r.speed=2,r.divisionScaleX=2;const s=new a.eaF(t,r);return n.add(s),r}initGUI(n){const e=new P.Ay;N.initMaterialGUI(e,n),N.initAnimationGUI(e,n),this.initGUIMaterial(e,n)}initGUIMaterial(n,e){const i=n.addFolder("CellularNoise");i.add(e,"grid",3,64).step(1),i.add(e,"divisionScaleX",1,4).step(1),i.open()}}window.onload=()=>{new E}}},i={};function t(n){var a=i[n];if(void 0!==a)return a.exports;var r=i[n]={exports:{}};return e[n](r,r.exports,t),r.exports}t.m=e,n=[],t.O=(e,i,a,r)=>{if(!i){var s=1/0;for(u=0;u<n.length;u++){for(var[i,a,r]=n[u],o=!0,l=0;l<i.length;l++)(!1&r||s>=r)&&Object.keys(t.O).every((n=>t.O[n](i[l])))?i.splice(l--,1):(o=!1,r<s&&(s=r));if(o){n.splice(u--,1);var c=a();void 0!==c&&(e=c)}}return e}r=r||0;for(var u=n.length;u>0&&n[u-1][2]>r;u--)n[u]=n[u-1];n[u]=[i,a,r]},t.d=(n,e)=>{for(var i in e)t.o(e,i)&&!t.o(n,i)&&Object.defineProperty(n,i,{enumerable:!0,get:e[i]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.j=240,(()=>{var n={240:0};t.O.j=e=>0===n[e];var e=(e,i)=>{var a,r,[s,o,l]=i,c=0;if(s.some((e=>0!==n[e]))){for(a in o)t.o(o,a)&&(t.m[a]=o[a]);if(l)var u=l(t)}for(e&&e(i);c<s.length;c++)r=s[c],t.o(n,r)&&n[r]&&n[r][0](),n[r]=0;return t.O(u)},i=self.webpackChunk_masatomakino_threejs_shader_materials=self.webpackChunk_masatomakino_threejs_shader_materials||[];i.forEach(e.bind(null,0)),i.push=e.bind(null,i.push.bind(i))})();var a=t.O(void 0,[121],(()=>t(195)));a=t.O(a)})();