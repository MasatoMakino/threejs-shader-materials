(()=>{"use strict";var __webpack_modules__={7187:(__webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   G: () => (/* binding */ Common)\n/* harmony export */ });\n/* harmony import */ var _CommonGUI_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2494);\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6075);\n/* harmony import */ var three_examples_jsm_controls_OrbitControls_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(8012);\n/* harmony import */ var three_examples_jsm_objects_Sky_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(1659);\n/* harmony import */ var three_examples_jsm_renderers_webgpu_WebGPURenderer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(5481);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([three_examples_jsm_renderers_webgpu_WebGPURenderer_js__WEBPACK_IMPORTED_MODULE_3__]);\nthree_examples_jsm_renderers_webgpu_WebGPURenderer_js__WEBPACK_IMPORTED_MODULE_3__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n\n\nclass Common {\n  static initScene() {\n    const scene = new three__WEBPACK_IMPORTED_MODULE_1__/* .Scene */ .xsS();\n    return scene;\n  }\n  static initLight(scene) {\n    const ambientLight = new three__WEBPACK_IMPORTED_MODULE_1__/* .AmbientLight */ .Mig(0xffffff, Math.PI);\n    scene.add(ambientLight);\n    return ambientLight;\n  }\n  static initCamera(scene, W, H, far = 400) {\n    const camera = new three__WEBPACK_IMPORTED_MODULE_1__/* .PerspectiveCamera */ .cPb(45, W / H, 1, far);\n    camera.position.set(0, 0, 100);\n    camera.updateMatrixWorld(false);\n    scene.add(camera);\n    return camera;\n  }\n  static initControl(camera, render) {\n    let domElement;\n    if (render != null) {\n      domElement = render.domElement;\n    }\n    const control = new three_examples_jsm_controls_OrbitControls_js__WEBPACK_IMPORTED_MODULE_2__/* .OrbitControls */ .z(camera, domElement);\n    control.update();\n    return control;\n  }\n  static initRenderer(W, H, color = 0x000000, antialias = true, isGPU = false) {\n    const convertRGBToHex = rgb => {\n      const hex = rgb.toString(16);\n      return "#" + hex.padStart(6, "0");\n    };\n    const getRenderer = () => {\n      if (isGPU) {\n        return new three_examples_jsm_renderers_webgpu_WebGPURenderer_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z({\n          antialias: antialias\n        });\n      }\n      return new three__WEBPACK_IMPORTED_MODULE_1__/* .WebGLRenderer */ .CP7({\n        antialias: antialias\n      });\n    };\n    const renderer = getRenderer();\n    renderer.setClearColor(new three__WEBPACK_IMPORTED_MODULE_1__/* .Color */ .Ilk(color));\n    renderer.setSize(W, H);\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.domElement.style.backgroundColor = convertRGBToHex(color);\n    document.body.appendChild(renderer.domElement);\n    console.log("three.js revision: ", three__WEBPACK_IMPORTED_MODULE_1__/* .REVISION */ .UZH);\n    return renderer;\n  }\n  static initHelper(scene) {\n    const axesHelper = new three__WEBPACK_IMPORTED_MODULE_1__/* .AxesHelper */ .y8_(30);\n    scene.add(axesHelper);\n  }\n  static initSky(scene, gui, renderer) {\n    renderer.toneMapping = three__WEBPACK_IMPORTED_MODULE_1__/* .ACESFilmicToneMapping */ .LY2;\n    const sunSphere = new three__WEBPACK_IMPORTED_MODULE_1__/* .Mesh */ .Kj0(new three__WEBPACK_IMPORTED_MODULE_1__/* .SphereGeometry */ .xo$(20000, 16, 8), new three__WEBPACK_IMPORTED_MODULE_1__/* .MeshBasicMaterial */ .vBJ({\n      color: 0xffffff\n    }));\n    sunSphere.position.y = -700000;\n    sunSphere.visible = false;\n    scene.add(sunSphere);\n    const sky = new three_examples_jsm_objects_Sky_js__WEBPACK_IMPORTED_MODULE_4__/* .Sky */ .q();\n    sky.scale.setScalar(45000);\n    scene.add(sky);\n    _CommonGUI_js__WEBPACK_IMPORTED_MODULE_0__/* .CommonGUI */ .z.initSkyGUI(gui, sky, sunSphere, renderer);\n  }\n}\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7187\n')},2494:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   z: () => (/* binding */ CommonGUI)\n/* harmony export */ });\n/* harmony import */ var _esm_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7146);\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6075);\n\n\nclass CommonGUI {\n  static initColorGUI(folder, mat, propName = "color") {\n    const prop = {};\n    const targetColor = mat[propName];\n    prop[propName] = targetColor.getHex();\n    folder.addColor(prop, propName).onChange(val => {\n      targetColor.setHex(val);\n    });\n    return prop;\n  }\n  static initColorNodeGUI(folder, mat, propName = "color") {\n    const prop = {};\n    const targetColor = mat[propName];\n    prop[propName] = targetColor.value.getHex();\n    folder.addColor(prop, propName).onChange(val => {\n      targetColor.value.setHex(val);\n    });\n    return prop;\n  }\n  static initBasicMaterialGUI(gui, mat, folderName = "Material") {\n    const folder = gui.addFolder(folderName);\n    this.initMaterialFolder(folder, mat);\n    folder.open();\n    return folder;\n  }\n  static initMaterialGUI(gui, mat, folderName = "Material") {\n    const folder = this.initBasicMaterialGUI(gui, mat, folderName);\n    this.initColorGUI(folder, mat, "emissive");\n  }\n  static initMaterialFolder(folder, mat, isNode = false) {\n    this.initColorGUI(folder, mat);\n    folder.add(mat, "transparent");\n    const opacityName = isNode ? "opacity" : "uniformOpacity";\n    folder.add(mat, opacityName, 0.0, 1.0);\n  }\n  static initSpriteMaterialGUI(gui, mat, folderName = "Material") {\n    const folder = gui.addFolder(folderName);\n    this.initMaterialFolder(folder, mat);\n    folder.open();\n  }\n  static initGridMaterialGUI(gui, mat) {\n    this.initMaterialGUI(gui, mat);\n    const prop = {\n      mask: "",\n      alphaMap: ""\n    };\n    const folder = gui.addFolder("WavyGridMaterial");\n    folder.add(mat, "isReversed");\n    folder.add(mat, "division", 2.0, 256.0).step(1);\n    folder.add(mat, "divisionScaleX", 0.0, 4.0).step(1);\n    folder.add(prop, "mask", {\n      none: "",\n      earth: "./textures/landmask.png"\n    }).onChange(val => {\n      if (val === "") {\n        mat.maskTexture = null;\n      } else {\n        mat.maskTexture = new three__WEBPACK_IMPORTED_MODULE_1__/* .TextureLoader */ .dpR().load(val);\n      }\n    });\n    folder.add(prop, "alphaMap", {\n      none: "",\n      earth: "./textures/landmask.png"\n    }).onChange(val => {\n      if (val === "") {\n        mat.alphaMap = null;\n      } else {\n        mat.alphaMap = new three__WEBPACK_IMPORTED_MODULE_1__/* .TextureLoader */ .dpR().load(val);\n      }\n    });\n    folder.open();\n    return folder;\n  }\n  static initWavyMaterialGUI(gui, mat) {\n    const folder = this.initGridMaterialGUI(gui, mat);\n    const animationFolder = folder.addFolder("WavyAnimation");\n    animationFolder.add(mat, "isAnimate");\n    animationFolder.add(mat, "speed", -2, 2);\n    animationFolder.add(mat, "waveFrequency", 0.0, 1.0);\n    animationFolder.add(mat, "wavePow", 0.0, 4.0);\n    animationFolder.add(mat, "direction", {\n      horizontal: _esm_index_js__WEBPACK_IMPORTED_MODULE_0__/* .Directions */ .Ns.horizontal,\n      vertical: _esm_index_js__WEBPACK_IMPORTED_MODULE_0__/* .Directions */ .Ns.vertical,\n      radial: _esm_index_js__WEBPACK_IMPORTED_MODULE_0__/* .Directions */ .Ns.radial\n    });\n    animationFolder.add(mat, "raisedBottom", 0.0, 1.0);\n    animationFolder.open();\n  }\n  static initAnimationGUI(gui, mat, folderName = "Animation") {\n    const folder = gui.addFolder(folderName);\n    folder.add(mat, "isAnimate");\n    folder.add(mat, "speed", -2, 2);\n    folder.open();\n  }\n  static initRimGUI(gui, mat, folderName = "Rim Effect Material") {\n    const folder = gui.addFolder(folderName);\n    CommonGUI.initColorGUI(folder, mat, "rimColor");\n    folder.add(mat, "rimStrength", 0.0, 4.0).step(0.01);\n    folder.add(mat, "rimPow", 0.0, 4.0).step(0.01);\n    CommonGUI.initColorGUI(folder, mat, "insideColor");\n    folder.add(mat, "insideStrength", 0.0, 4.0).step(0.01);\n    folder.add(mat, "insidePow", 0.0, 8.0).step(0.01);\n    folder.open();\n  }\n  static initExpansionGUI(gui, mat, folderName = "ExpansionMaterial") {\n    const folder = gui.addFolder("ExpansionMaterial");\n    const ampRange = 12.0;\n    folder.add(mat, "expansionStrength", -ampRange, ampRange).step(0.01);\n    folder.open();\n  }\n  static initFBMTilingGUI(gui, mat, folderName = "FBM Tiling") {\n    const folder = gui.addFolder("FBM Tiling");\n    folder.add(mat, "tiles", 1.0, 8.0).step(1.0);\n    folder.add(mat, "hashLoop", 2.0, 16.0).step(1.0);\n    folder.add(mat, "amp", 0.0, 2.0).step(0.01);\n    folder.open();\n  }\n  static initSkyGUI(gui, sky, sunSphere, renderer) {\n    const effectController = {\n      turbidity: 10,\n      rayleigh: 0.15,\n      mieCoefficient: 0.005,\n      mieDirectionalG: 0.8,\n      inclination: 0.07,\n      // elevation / inclination\n      azimuth: 0.25,\n      // Facing front,\n      exposure: 0.75\n    };\n    const distance = 400000;\n    function guiChanged() {\n      const uniforms = sky.material.uniforms;\n      uniforms["turbidity"].value = effectController.turbidity;\n      uniforms["rayleigh"].value = effectController.rayleigh;\n      uniforms["mieCoefficient"].value = effectController.mieCoefficient;\n      uniforms["mieDirectionalG"].value = effectController.mieDirectionalG;\n      const theta = Math.PI * (effectController.inclination - 0.5);\n      const phi = 2 * Math.PI * (effectController.azimuth - 0.5);\n      sunSphere.position.x = distance * Math.cos(phi);\n      sunSphere.position.y = distance * Math.sin(phi) * Math.sin(theta);\n      sunSphere.position.z = distance * Math.sin(phi) * Math.cos(theta);\n      uniforms["sunPosition"].value.copy(sunSphere.position);\n      renderer.toneMappingExposure = effectController.exposure;\n    }\n    guiChanged();\n    const folder = gui.addFolder("Sky");\n    folder.add(effectController, "turbidity", 1.0, 20.0, 0.1).onChange(guiChanged);\n    folder.add(effectController, "rayleigh", 0.0, 4, 0.001).onChange(guiChanged);\n    folder.add(effectController, "mieCoefficient", 0.0, 0.1, 0.001).onChange(guiChanged);\n    folder.add(effectController, "mieDirectionalG", 0.0, 1, 0.001).onChange(guiChanged);\n    folder.add(effectController, "inclination", 0, 1, 0.0001).onChange(guiChanged);\n    folder.add(effectController, "azimuth", 0, 1, 0.0001).onChange(guiChanged);\n    folder.add(effectController, "exposure", 0, 1, 0.0001).onChange(guiChanged);\n    folder.open();\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2494\n')},4161:(__webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n/* unused harmony export Study */\n/* harmony import */ var _esm_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7146);\n/* harmony import */ var _Common_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(7187);\n/* harmony import */ var _CommonGUI_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(2494);\n/* harmony import */ var _masatomakino_raf_ticker__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(5429);\n/* harmony import */ var lil_gui__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(7429);\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(6075);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_Common_js__WEBPACK_IMPORTED_MODULE_1__]);\n_Common_js__WEBPACK_IMPORTED_MODULE_1__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n\n\n\nclass Study {\n  constructor() {\n    const W = 640;\n    const H = 480;\n    const scene = _Common_js__WEBPACK_IMPORTED_MODULE_1__/* .Common */ .G.initScene();\n    scene.fog = new three__WEBPACK_IMPORTED_MODULE_4__/* .Fog */ .ybr(0x000000, 80, 160);\n    _Common_js__WEBPACK_IMPORTED_MODULE_1__/* .Common */ .G.initLight(scene);\n    const camera = _Common_js__WEBPACK_IMPORTED_MODULE_1__/* .Common */ .G.initCamera(scene, W, H);\n    const renderer = _Common_js__WEBPACK_IMPORTED_MODULE_1__/* .Common */ .G.initRenderer(W, H);\n    const control = _Common_js__WEBPACK_IMPORTED_MODULE_1__/* .Common */ .G.initControl(camera, renderer);\n    _Common_js__WEBPACK_IMPORTED_MODULE_1__/* .Common */ .G.initHelper(scene);\n    const mat = this.initObject(scene);\n    _masatomakino_raf_ticker__WEBPACK_IMPORTED_MODULE_3__/* .RAFTicker */ .F.on("tick", e => {\n      renderer.render(scene, camera);\n    });\n    this.initGUI(mat);\n  }\n  initObject(scene) {\n    const spot = new three__WEBPACK_IMPORTED_MODULE_4__/* .PointLight */ .cek(0xffffff, 500);\n    spot.position.set(10, 20, 30);\n    scene.add(spot);\n    const helper = new three__WEBPACK_IMPORTED_MODULE_4__/* .PointLightHelper */ .xG9(spot);\n    scene.add(helper);\n    const seg = 64;\n    const geo = new three__WEBPACK_IMPORTED_MODULE_4__/* .SphereGeometry */ .xo$(30, seg, seg);\n    const mat = new _esm_index_js__WEBPACK_IMPORTED_MODULE_0__/* .ExpansionDissolveMaterial */ .Sn({\n      fog: scene.fog !== undefined\n    });\n    mat.color = new three__WEBPACK_IMPORTED_MODULE_4__/* .Color */ .Ilk(0x334466);\n    mat.tiles = 2;\n    mat.hashLoop = 3.0;\n    mat.amp = 1.35;\n    const loader = new three__WEBPACK_IMPORTED_MODULE_4__/* .TextureLoader */ .dpR();\n    mat.map = loader.load("./textures/landmask.png");\n    const mesh = new three__WEBPACK_IMPORTED_MODULE_4__/* .Mesh */ .Kj0(geo, mat);\n    scene.add(mesh);\n    return mat;\n  }\n  initGUI(mat) {\n    const gui = new lil_gui__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .ZP();\n    _CommonGUI_js__WEBPACK_IMPORTED_MODULE_2__/* .CommonGUI */ .z.initMaterialGUI(gui, mat);\n    _CommonGUI_js__WEBPACK_IMPORTED_MODULE_2__/* .CommonGUI */ .z.initFBMTilingGUI(gui, mat);\n    this.initGUIMaterial(gui, mat);\n    _CommonGUI_js__WEBPACK_IMPORTED_MODULE_2__/* .CommonGUI */ .z.initAnimationGUI(gui, mat);\n  }\n  initGUIMaterial(gui, mat) {\n    const folder = gui.addFolder("Expansion");\n    folder.add(mat, "scaleMax", 0.0, 45.0).step(0.1);\n    folder.add(mat, "progress", 0.0, 1.0).step(0.01);\n    _CommonGUI_js__WEBPACK_IMPORTED_MODULE_2__/* .CommonGUI */ .z.initColorGUI(folder, mat, "dissolveColor");\n    _CommonGUI_js__WEBPACK_IMPORTED_MODULE_2__/* .CommonGUI */ .z.initColorGUI(folder, mat, "dissolveOutColor");\n    folder.open();\n  }\n}\nwindow.onload = () => {\n  const study = new Study();\n};\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNDE2MS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQTREO0FBQ3ZCO0FBQ007QUFDVTtBQUMzQjtBQVNYO0FBRVIsTUFBTVksS0FBSyxDQUFDO0VBQ2pCQyxXQUFXQSxDQUFBLEVBQUc7SUFDWixNQUFNQyxDQUFDLEdBQUcsR0FBRztJQUNiLE1BQU1DLENBQUMsR0FBRyxHQUFHO0lBRWIsTUFBTUMsS0FBSyxHQUFHZix1REFBTSxDQUFDZ0IsU0FBUyxDQUFDLENBQUM7SUFDaENELEtBQUssQ0FBQ0UsR0FBRyxHQUFHLElBQUlaLGlEQUFHLENBQUMsUUFBUSxFQUFFLEVBQUUsRUFBRSxHQUFHLENBQUM7SUFDdENMLHVEQUFNLENBQUNrQixTQUFTLENBQUNILEtBQUssQ0FBQztJQUN2QixNQUFNSSxNQUFNLEdBQUduQix1REFBTSxDQUFDb0IsVUFBVSxDQUFDTCxLQUFLLEVBQUVGLENBQUMsRUFBRUMsQ0FBQyxDQUFDO0lBQzdDLE1BQU1PLFFBQVEsR0FBR3JCLHVEQUFNLENBQUNzQixZQUFZLENBQUNULENBQUMsRUFBRUMsQ0FBQyxDQUFDO0lBQzFDLE1BQU1TLE9BQU8sR0FBR3ZCLHVEQUFNLENBQUN3QixXQUFXLENBQUNMLE1BQU0sRUFBRUUsUUFBUSxDQUFDO0lBQ3BEckIsdURBQU0sQ0FBQ3lCLFVBQVUsQ0FBQ1YsS0FBSyxDQUFDO0lBQ3hCLE1BQU1XLEdBQUcsR0FBRyxJQUFJLENBQUNDLFVBQVUsQ0FBQ1osS0FBSyxDQUFDO0lBQ2xDYix3RUFBUyxDQUFDMEIsRUFBRSxDQUFDLE1BQU0sRUFBR0MsQ0FBQyxJQUFLO01BQzFCUixRQUFRLENBQUNTLE1BQU0sQ0FBQ2YsS0FBSyxFQUFFSSxNQUFNLENBQUM7SUFDaEMsQ0FBQyxDQUFDO0lBRUYsSUFBSSxDQUFDWSxPQUFPLENBQUNMLEdBQUcsQ0FBQztFQUNuQjtFQUVBQyxVQUFVQSxDQUFDWixLQUFLLEVBQUU7SUFDaEIsTUFBTWlCLElBQUksR0FBRyxJQUFJekIsd0RBQVUsQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDO0lBQzFDeUIsSUFBSSxDQUFDQyxRQUFRLENBQUNDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQztJQUM3Qm5CLEtBQUssQ0FBQ29CLEdBQUcsQ0FBQ0gsSUFBSSxDQUFDO0lBQ2YsTUFBTUksTUFBTSxHQUFHLElBQUk1Qiw4REFBZ0IsQ0FBQ3dCLElBQUksQ0FBQztJQUN6Q2pCLEtBQUssQ0FBQ29CLEdBQUcsQ0FBQ0MsTUFBTSxDQUFDO0lBRWpCLE1BQU1DLEdBQUcsR0FBRyxFQUFFO0lBQ2QsTUFBTUMsR0FBRyxHQUFHLElBQUk3Qiw0REFBYyxDQUFDLEVBQUUsRUFBRTRCLEdBQUcsRUFBRUEsR0FBRyxDQUFDO0lBRTVDLE1BQU1YLEdBQUcsR0FBRyxJQUFJM0IsOEVBQXlCLENBQUM7TUFDeENrQixHQUFHLEVBQUVGLEtBQUssQ0FBQ0UsR0FBRyxLQUFLc0I7SUFDckIsQ0FBQyxDQUFDO0lBQ0ZiLEdBQUcsQ0FBQ2MsS0FBSyxHQUFHLElBQUlwQyxtREFBSyxDQUFDLFFBQVEsQ0FBQztJQUMvQnNCLEdBQUcsQ0FBQ2UsS0FBSyxHQUFHLENBQUM7SUFDYmYsR0FBRyxDQUFDZ0IsUUFBUSxHQUFHLEdBQUc7SUFDbEJoQixHQUFHLENBQUNpQixHQUFHLEdBQUcsSUFBSTtJQUVkLE1BQU1DLE1BQU0sR0FBRyxJQUFJbEMsMkRBQWEsQ0FBQyxDQUFDO0lBQ2xDZ0IsR0FBRyxDQUFDbUIsR0FBRyxHQUFHRCxNQUFNLENBQUNFLElBQUksQ0FBQyx5QkFBeUIsQ0FBQztJQUVoRCxNQUFNQyxJQUFJLEdBQUcsSUFBSXpDLGtEQUFJLENBQUNnQyxHQUFHLEVBQUVaLEdBQUcsQ0FBQztJQUMvQlgsS0FBSyxDQUFDb0IsR0FBRyxDQUFDWSxJQUFJLENBQUM7SUFFZixPQUFPckIsR0FBRztFQUNaO0VBRUFLLE9BQU9BLENBQUNMLEdBQUcsRUFBRTtJQUNYLE1BQU1zQixHQUFHLEdBQUcsSUFBSTdDLHlEQUFHLENBQUMsQ0FBQztJQUNyQkYsNkRBQVMsQ0FBQ2dELGVBQWUsQ0FBQ0QsR0FBRyxFQUFFdEIsR0FBRyxDQUFDO0lBQ25DekIsNkRBQVMsQ0FBQ2lELGdCQUFnQixDQUFDRixHQUFHLEVBQUV0QixHQUFHLENBQUM7SUFDcEMsSUFBSSxDQUFDeUIsZUFBZSxDQUFDSCxHQUFHLEVBQUV0QixHQUFHLENBQUM7SUFDOUJ6Qiw2REFBUyxDQUFDbUQsZ0JBQWdCLENBQUNKLEdBQUcsRUFBRXRCLEdBQUcsQ0FBQztFQUN0QztFQUVBeUIsZUFBZUEsQ0FBQ0gsR0FBRyxFQUFFdEIsR0FBRyxFQUFFO0lBQ3hCLE1BQU0yQixNQUFNLEdBQUdMLEdBQUcsQ0FBQ00sU0FBUyxDQUFDLFdBQVcsQ0FBQztJQUN6Q0QsTUFBTSxDQUFDbEIsR0FBRyxDQUFDVCxHQUFHLEVBQUUsVUFBVSxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQzZCLElBQUksQ0FBQyxHQUFHLENBQUM7SUFDaERGLE1BQU0sQ0FBQ2xCLEdBQUcsQ0FBQ1QsR0FBRyxFQUFFLFVBQVUsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM2QixJQUFJLENBQUMsSUFBSSxDQUFDO0lBQ2hEdEQsNkRBQVMsQ0FBQ3VELFlBQVksQ0FBQ0gsTUFBTSxFQUFFM0IsR0FBRyxFQUFFLGVBQWUsQ0FBQztJQUNwRHpCLDZEQUFTLENBQUN1RCxZQUFZLENBQUNILE1BQU0sRUFBRTNCLEdBQUcsRUFBRSxrQkFBa0IsQ0FBQztJQUV2RDJCLE1BQU0sQ0FBQ0ksSUFBSSxDQUFDLENBQUM7RUFDZjtBQUNGO0FBRUFDLE1BQU0sQ0FBQ0MsTUFBTSxHQUFHLE1BQU07RUFDcEIsTUFBTUMsS0FBSyxHQUFHLElBQUlqRCxLQUFLLENBQUMsQ0FBQztBQUMzQixDQUFDLEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aHJlZWpzLXNoYWRlci1tYXRlcmlhbHMvLi9kZW1vU3JjL2RlbW9FeHBhbnNpb25EaXNzb2x2ZS5qcz9iYmE0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV4cGFuc2lvbkRpc3NvbHZlTWF0ZXJpYWwgfSBmcm9tIFwiLi4vZXNtL2luZGV4LmpzXCI7XG5pbXBvcnQgeyBDb21tb24gfSBmcm9tIFwiLi9Db21tb24uanNcIjtcbmltcG9ydCB7IENvbW1vbkdVSSB9IGZyb20gXCIuL0NvbW1vbkdVSS5qc1wiO1xuaW1wb3J0IHsgUkFGVGlja2VyIH0gZnJvbSBcIkBtYXNhdG9tYWtpbm8vcmFmLXRpY2tlclwiO1xuaW1wb3J0IEdVSSBmcm9tIFwibGlsLWd1aVwiO1xuaW1wb3J0IHtcbiAgQ29sb3IsXG4gIEZvZyxcbiAgTWVzaCxcbiAgUG9pbnRMaWdodCxcbiAgUG9pbnRMaWdodEhlbHBlcixcbiAgU3BoZXJlR2VvbWV0cnksXG4gIFRleHR1cmVMb2FkZXIsXG59IGZyb20gXCJ0aHJlZVwiO1xuXG5leHBvcnQgY2xhc3MgU3R1ZHkge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBjb25zdCBXID0gNjQwO1xuICAgIGNvbnN0IEggPSA0ODA7XG5cbiAgICBjb25zdCBzY2VuZSA9IENvbW1vbi5pbml0U2NlbmUoKTtcbiAgICBzY2VuZS5mb2cgPSBuZXcgRm9nKDB4MDAwMDAwLCA4MCwgMTYwKTtcbiAgICBDb21tb24uaW5pdExpZ2h0KHNjZW5lKTtcbiAgICBjb25zdCBjYW1lcmEgPSBDb21tb24uaW5pdENhbWVyYShzY2VuZSwgVywgSCk7XG4gICAgY29uc3QgcmVuZGVyZXIgPSBDb21tb24uaW5pdFJlbmRlcmVyKFcsIEgpO1xuICAgIGNvbnN0IGNvbnRyb2wgPSBDb21tb24uaW5pdENvbnRyb2woY2FtZXJhLCByZW5kZXJlcik7XG4gICAgQ29tbW9uLmluaXRIZWxwZXIoc2NlbmUpO1xuICAgIGNvbnN0IG1hdCA9IHRoaXMuaW5pdE9iamVjdChzY2VuZSk7XG4gICAgUkFGVGlja2VyLm9uKFwidGlja1wiLCAoZSkgPT4ge1xuICAgICAgcmVuZGVyZXIucmVuZGVyKHNjZW5lLCBjYW1lcmEpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5pbml0R1VJKG1hdCk7XG4gIH1cblxuICBpbml0T2JqZWN0KHNjZW5lKSB7XG4gICAgY29uc3Qgc3BvdCA9IG5ldyBQb2ludExpZ2h0KDB4ZmZmZmZmLCA1MDApO1xuICAgIHNwb3QucG9zaXRpb24uc2V0KDEwLCAyMCwgMzApO1xuICAgIHNjZW5lLmFkZChzcG90KTtcbiAgICBjb25zdCBoZWxwZXIgPSBuZXcgUG9pbnRMaWdodEhlbHBlcihzcG90KTtcbiAgICBzY2VuZS5hZGQoaGVscGVyKTtcblxuICAgIGNvbnN0IHNlZyA9IDY0O1xuICAgIGNvbnN0IGdlbyA9IG5ldyBTcGhlcmVHZW9tZXRyeSgzMCwgc2VnLCBzZWcpO1xuXG4gICAgY29uc3QgbWF0ID0gbmV3IEV4cGFuc2lvbkRpc3NvbHZlTWF0ZXJpYWwoe1xuICAgICAgZm9nOiBzY2VuZS5mb2cgIT09IHVuZGVmaW5lZCxcbiAgICB9KTtcbiAgICBtYXQuY29sb3IgPSBuZXcgQ29sb3IoMHgzMzQ0NjYpO1xuICAgIG1hdC50aWxlcyA9IDI7XG4gICAgbWF0Lmhhc2hMb29wID0gMy4wO1xuICAgIG1hdC5hbXAgPSAxLjM1O1xuXG4gICAgY29uc3QgbG9hZGVyID0gbmV3IFRleHR1cmVMb2FkZXIoKTtcbiAgICBtYXQubWFwID0gbG9hZGVyLmxvYWQoXCIuL3RleHR1cmVzL2xhbmRtYXNrLnBuZ1wiKTtcblxuICAgIGNvbnN0IG1lc2ggPSBuZXcgTWVzaChnZW8sIG1hdCk7XG4gICAgc2NlbmUuYWRkKG1lc2gpO1xuXG4gICAgcmV0dXJuIG1hdDtcbiAgfVxuXG4gIGluaXRHVUkobWF0KSB7XG4gICAgY29uc3QgZ3VpID0gbmV3IEdVSSgpO1xuICAgIENvbW1vbkdVSS5pbml0TWF0ZXJpYWxHVUkoZ3VpLCBtYXQpO1xuICAgIENvbW1vbkdVSS5pbml0RkJNVGlsaW5nR1VJKGd1aSwgbWF0KTtcbiAgICB0aGlzLmluaXRHVUlNYXRlcmlhbChndWksIG1hdCk7XG4gICAgQ29tbW9uR1VJLmluaXRBbmltYXRpb25HVUkoZ3VpLCBtYXQpO1xuICB9XG5cbiAgaW5pdEdVSU1hdGVyaWFsKGd1aSwgbWF0KSB7XG4gICAgY29uc3QgZm9sZGVyID0gZ3VpLmFkZEZvbGRlcihcIkV4cGFuc2lvblwiKTtcbiAgICBmb2xkZXIuYWRkKG1hdCwgXCJzY2FsZU1heFwiLCAwLjAsIDQ1LjApLnN0ZXAoMC4xKTtcbiAgICBmb2xkZXIuYWRkKG1hdCwgXCJwcm9ncmVzc1wiLCAwLjAsIDEuMCkuc3RlcCgwLjAxKTtcbiAgICBDb21tb25HVUkuaW5pdENvbG9yR1VJKGZvbGRlciwgbWF0LCBcImRpc3NvbHZlQ29sb3JcIik7XG4gICAgQ29tbW9uR1VJLmluaXRDb2xvckdVSShmb2xkZXIsIG1hdCwgXCJkaXNzb2x2ZU91dENvbG9yXCIpO1xuXG4gICAgZm9sZGVyLm9wZW4oKTtcbiAgfVxufVxuXG53aW5kb3cub25sb2FkID0gKCkgPT4ge1xuICBjb25zdCBzdHVkeSA9IG5ldyBTdHVkeSgpO1xufTtcbiJdLCJuYW1lcyI6WyJFeHBhbnNpb25EaXNzb2x2ZU1hdGVyaWFsIiwiQ29tbW9uIiwiQ29tbW9uR1VJIiwiUkFGVGlja2VyIiwiR1VJIiwiQ29sb3IiLCJGb2ciLCJNZXNoIiwiUG9pbnRMaWdodCIsIlBvaW50TGlnaHRIZWxwZXIiLCJTcGhlcmVHZW9tZXRyeSIsIlRleHR1cmVMb2FkZXIiLCJTdHVkeSIsImNvbnN0cnVjdG9yIiwiVyIsIkgiLCJzY2VuZSIsImluaXRTY2VuZSIsImZvZyIsImluaXRMaWdodCIsImNhbWVyYSIsImluaXRDYW1lcmEiLCJyZW5kZXJlciIsImluaXRSZW5kZXJlciIsImNvbnRyb2wiLCJpbml0Q29udHJvbCIsImluaXRIZWxwZXIiLCJtYXQiLCJpbml0T2JqZWN0Iiwib24iLCJlIiwicmVuZGVyIiwiaW5pdEdVSSIsInNwb3QiLCJwb3NpdGlvbiIsInNldCIsImFkZCIsImhlbHBlciIsInNlZyIsImdlbyIsInVuZGVmaW5lZCIsImNvbG9yIiwidGlsZXMiLCJoYXNoTG9vcCIsImFtcCIsImxvYWRlciIsIm1hcCIsImxvYWQiLCJtZXNoIiwiZ3VpIiwiaW5pdE1hdGVyaWFsR1VJIiwiaW5pdEZCTVRpbGluZ0dVSSIsImluaXRHVUlNYXRlcmlhbCIsImluaXRBbmltYXRpb25HVUkiLCJmb2xkZXIiLCJhZGRGb2xkZXIiLCJzdGVwIiwiaW5pdENvbG9yR1VJIiwib3BlbiIsIndpbmRvdyIsIm9ubG9hZCIsInN0dWR5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///4161\n')},8238:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   D: () => (/* binding */ fragment),\n/* harmony export */   u: () => (/* binding */ vertex)\n/* harmony export */ });\n/**\n * MeshPhongMaterialに準じたシェーダー\n *\n * @see : https://github.com/mrdoob/three.js/blob/dev/src/renderers/shaders/ShaderLib/meshphong.glsl.js\n */\n// language=GLSL\nconst vertex = /* GLSL */`\n#define PHONG\n\nvarying vec3 vViewPosition;\n\n//added by threejs-shader-materials\nvarying vec2 uvPosition;\n#include <mesh_position_varying>\n#include <surface_normal_varying_chunk>\n#include <__expansion_uniform_chunk>\n\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n    #include <mesh_position_vertex>\n    uvPosition = uv;\n\n    #include <uv_vertex>\n    #include <color_vertex>\n    #include <morphcolor_vertex>\n    #include <batching_vertex>\n    \n    #include <beginnormal_vertex>\n    #include <morphnormal_vertex>\n    #include <skinbase_vertex>\n    #include <skinnormal_vertex>\n    #include <defaultnormal_vertex>\n    \n    #include <surface_normal_vertex_chunk>\n\n    #include <normal_vertex>\n    \n    #include <begin_vertex>\n    \n    #include <__expansion_vertex_chunk>\n    \n    #include <morphtarget_vertex>\n    #include <skinning_vertex>\n    #include <displacementmap_vertex>\n    #include <project_vertex>\n    #include <logdepthbuf_vertex>\n    #include <clipping_planes_vertex>\n    \n    vViewPosition = - mvPosition.xyz;\n\n    #include <worldpos_vertex>\n    #include <envmap_vertex>\n    #include <shadowmap_vertex>\n    #include <fog_vertex>\n\n}`;\n// language=GLSL\nconst fragment = /* GLSL */`\n#define PHONG\n\n#include <mesh_phong_uniform>\n\n//added by threejs-shader-materials\n#include <mesh_position_varying>\nvarying vec2 uvPosition;\n\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n// #include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n    #include <clipping_planes_fragment>\n    \n    #include <mesh_phong_diffuse_color>\n    \n    #include <logdepthbuf_fragment>\n    #include <__ShaderMaterial__map_fragment_begin_chunk>\n    #include <map_fragment>\n    #include <color_fragment>\n    // #include <alphamap_fragment>\n    #include <mesh_phong_switching_alpha_map>\n    #include <alphatest_fragment>\n    #include <alphahash_fragment>\n    #include <specularmap_fragment>\n    #include <normal_fragment_begin>\n    #include <normal_fragment_maps>\n    #include <emissivemap_fragment>\n\n    // accumulation\n    #include <lights_phong_fragment>\n    #include <lights_fragment_begin>\n    #include <lights_fragment_maps>\n    #include <lights_fragment_end>\n\n    // modulation\n    #include <aomap_fragment>\n\n    vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n    \n    #include <envmap_fragment>\n    #include <opaque_fragment>\n    #include <tonemapping_fragment>\n    #include <colorspace_fragment>\n    #include <fog_fragment>\n    #include <premultiplied_alpha_fragment>\n    #include <dithering_fragment>\n\n}`;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODIzOC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sTUFBTUEsTUFBTSxHQUFHLFVBQVk7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDTyxNQUFNQyxRQUFRLEdBQUcsVUFBWTtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGhyZWVqcy1zaGFkZXItbWF0ZXJpYWxzLy4vZXNtL1NoYWRlclBob25nTWF0ZXJpYWwuZ2xzbC5qcz82MGI0Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogTWVzaFBob25nTWF0ZXJpYWzjgavmupbjgZjjgZ/jgrfjgqfjg7zjg4Djg7xcbiAqXG4gKiBAc2VlIDogaHR0cHM6Ly9naXRodWIuY29tL21yZG9vYi90aHJlZS5qcy9ibG9iL2Rldi9zcmMvcmVuZGVyZXJzL3NoYWRlcnMvU2hhZGVyTGliL21lc2hwaG9uZy5nbHNsLmpzXG4gKi9cbi8vIGxhbmd1YWdlPUdMU0xcbmV4cG9ydCBjb25zdCB2ZXJ0ZXggPSAvKiBHTFNMICovIGBcbiNkZWZpbmUgUEhPTkdcblxudmFyeWluZyB2ZWMzIHZWaWV3UG9zaXRpb247XG5cbi8vYWRkZWQgYnkgdGhyZWVqcy1zaGFkZXItbWF0ZXJpYWxzXG52YXJ5aW5nIHZlYzIgdXZQb3NpdGlvbjtcbiNpbmNsdWRlIDxtZXNoX3Bvc2l0aW9uX3Zhcnlpbmc+XG4jaW5jbHVkZSA8c3VyZmFjZV9ub3JtYWxfdmFyeWluZ19jaHVuaz5cbiNpbmNsdWRlIDxfX2V4cGFuc2lvbl91bmlmb3JtX2NodW5rPlxuXG4jaW5jbHVkZSA8Y29tbW9uPlxuI2luY2x1ZGUgPGJhdGNoaW5nX3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPHV2X3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPGRpc3BsYWNlbWVudG1hcF9wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDxlbnZtYXBfcGFyc192ZXJ0ZXg+XG4jaW5jbHVkZSA8Y29sb3JfcGFyc192ZXJ0ZXg+XG4jaW5jbHVkZSA8Zm9nX3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPG5vcm1hbF9wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDxtb3JwaHRhcmdldF9wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDxza2lubmluZ19wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDxzaGFkb3dtYXBfcGFyc192ZXJ0ZXg+XG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc192ZXJ0ZXg+XG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfdmVydGV4PlxuXG52b2lkIG1haW4oKSB7XG4gICAgI2luY2x1ZGUgPG1lc2hfcG9zaXRpb25fdmVydGV4PlxuICAgIHV2UG9zaXRpb24gPSB1djtcblxuICAgICNpbmNsdWRlIDx1dl92ZXJ0ZXg+XG4gICAgI2luY2x1ZGUgPGNvbG9yX3ZlcnRleD5cbiAgICAjaW5jbHVkZSA8bW9ycGhjb2xvcl92ZXJ0ZXg+XG4gICAgI2luY2x1ZGUgPGJhdGNoaW5nX3ZlcnRleD5cbiAgICBcbiAgICAjaW5jbHVkZSA8YmVnaW5ub3JtYWxfdmVydGV4PlxuICAgICNpbmNsdWRlIDxtb3JwaG5vcm1hbF92ZXJ0ZXg+XG4gICAgI2luY2x1ZGUgPHNraW5iYXNlX3ZlcnRleD5cbiAgICAjaW5jbHVkZSA8c2tpbm5vcm1hbF92ZXJ0ZXg+XG4gICAgI2luY2x1ZGUgPGRlZmF1bHRub3JtYWxfdmVydGV4PlxuICAgIFxuICAgICNpbmNsdWRlIDxzdXJmYWNlX25vcm1hbF92ZXJ0ZXhfY2h1bms+XG5cbiAgICAjaW5jbHVkZSA8bm9ybWFsX3ZlcnRleD5cbiAgICBcbiAgICAjaW5jbHVkZSA8YmVnaW5fdmVydGV4PlxuICAgIFxuICAgICNpbmNsdWRlIDxfX2V4cGFuc2lvbl92ZXJ0ZXhfY2h1bms+XG4gICAgXG4gICAgI2luY2x1ZGUgPG1vcnBodGFyZ2V0X3ZlcnRleD5cbiAgICAjaW5jbHVkZSA8c2tpbm5pbmdfdmVydGV4PlxuICAgICNpbmNsdWRlIDxkaXNwbGFjZW1lbnRtYXBfdmVydGV4PlxuICAgICNpbmNsdWRlIDxwcm9qZWN0X3ZlcnRleD5cbiAgICAjaW5jbHVkZSA8bG9nZGVwdGhidWZfdmVydGV4PlxuICAgICNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfdmVydGV4PlxuICAgIFxuICAgIHZWaWV3UG9zaXRpb24gPSAtIG12UG9zaXRpb24ueHl6O1xuXG4gICAgI2luY2x1ZGUgPHdvcmxkcG9zX3ZlcnRleD5cbiAgICAjaW5jbHVkZSA8ZW52bWFwX3ZlcnRleD5cbiAgICAjaW5jbHVkZSA8c2hhZG93bWFwX3ZlcnRleD5cbiAgICAjaW5jbHVkZSA8Zm9nX3ZlcnRleD5cblxufWA7XG4vLyBsYW5ndWFnZT1HTFNMXG5leHBvcnQgY29uc3QgZnJhZ21lbnQgPSAvKiBHTFNMICovIGBcbiNkZWZpbmUgUEhPTkdcblxuI2luY2x1ZGUgPG1lc2hfcGhvbmdfdW5pZm9ybT5cblxuLy9hZGRlZCBieSB0aHJlZWpzLXNoYWRlci1tYXRlcmlhbHNcbiNpbmNsdWRlIDxtZXNoX3Bvc2l0aW9uX3Zhcnlpbmc+XG52YXJ5aW5nIHZlYzIgdXZQb3NpdGlvbjtcblxuI2luY2x1ZGUgPGNvbW1vbj5cbiNpbmNsdWRlIDxwYWNraW5nPlxuI2luY2x1ZGUgPGRpdGhlcmluZ19wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGNvbG9yX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8dXZfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxtYXBfcGFyc19mcmFnbWVudD5cbi8vICNpbmNsdWRlIDxhbHBoYW1hcF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGFscGhhdGVzdF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGFscGhhaGFzaF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGFvbWFwX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8bGlnaHRtYXBfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxlbWlzc2l2ZW1hcF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGVudm1hcF9jb21tb25fcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxlbnZtYXBfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxmb2dfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxic2Rmcz5cbiNpbmNsdWRlIDxsaWdodHNfcGFyc19iZWdpbj5cbiNpbmNsdWRlIDxub3JtYWxfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxsaWdodHNfcGhvbmdfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxzaGFkb3dtYXBfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxidW1wbWFwX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8bm9ybWFsbWFwX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8c3BlY3VsYXJtYXBfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX2ZyYWdtZW50PlxuXG52b2lkIG1haW4oKSB7XG5cbiAgICAjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX2ZyYWdtZW50PlxuICAgIFxuICAgICNpbmNsdWRlIDxtZXNoX3Bob25nX2RpZmZ1c2VfY29sb3I+XG4gICAgXG4gICAgI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX2ZyYWdtZW50PlxuICAgICNpbmNsdWRlIDxfX1NoYWRlck1hdGVyaWFsX19tYXBfZnJhZ21lbnRfYmVnaW5fY2h1bms+XG4gICAgI2luY2x1ZGUgPG1hcF9mcmFnbWVudD5cbiAgICAjaW5jbHVkZSA8Y29sb3JfZnJhZ21lbnQ+XG4gICAgLy8gI2luY2x1ZGUgPGFscGhhbWFwX2ZyYWdtZW50PlxuICAgICNpbmNsdWRlIDxtZXNoX3Bob25nX3N3aXRjaGluZ19hbHBoYV9tYXA+XG4gICAgI2luY2x1ZGUgPGFscGhhdGVzdF9mcmFnbWVudD5cbiAgICAjaW5jbHVkZSA8YWxwaGFoYXNoX2ZyYWdtZW50PlxuICAgICNpbmNsdWRlIDxzcGVjdWxhcm1hcF9mcmFnbWVudD5cbiAgICAjaW5jbHVkZSA8bm9ybWFsX2ZyYWdtZW50X2JlZ2luPlxuICAgICNpbmNsdWRlIDxub3JtYWxfZnJhZ21lbnRfbWFwcz5cbiAgICAjaW5jbHVkZSA8ZW1pc3NpdmVtYXBfZnJhZ21lbnQ+XG5cbiAgICAvLyBhY2N1bXVsYXRpb25cbiAgICAjaW5jbHVkZSA8bGlnaHRzX3Bob25nX2ZyYWdtZW50PlxuICAgICNpbmNsdWRlIDxsaWdodHNfZnJhZ21lbnRfYmVnaW4+XG4gICAgI2luY2x1ZGUgPGxpZ2h0c19mcmFnbWVudF9tYXBzPlxuICAgICNpbmNsdWRlIDxsaWdodHNfZnJhZ21lbnRfZW5kPlxuXG4gICAgLy8gbW9kdWxhdGlvblxuICAgICNpbmNsdWRlIDxhb21hcF9mcmFnbWVudD5cblxuICAgIHZlYzMgb3V0Z29pbmdMaWdodCA9IHJlZmxlY3RlZExpZ2h0LmRpcmVjdERpZmZ1c2UgKyByZWZsZWN0ZWRMaWdodC5pbmRpcmVjdERpZmZ1c2UgKyByZWZsZWN0ZWRMaWdodC5kaXJlY3RTcGVjdWxhciArIHJlZmxlY3RlZExpZ2h0LmluZGlyZWN0U3BlY3VsYXIgKyB0b3RhbEVtaXNzaXZlUmFkaWFuY2U7XG4gICAgXG4gICAgI2luY2x1ZGUgPGVudm1hcF9mcmFnbWVudD5cbiAgICAjaW5jbHVkZSA8b3BhcXVlX2ZyYWdtZW50PlxuICAgICNpbmNsdWRlIDx0b25lbWFwcGluZ19mcmFnbWVudD5cbiAgICAjaW5jbHVkZSA8Y29sb3JzcGFjZV9mcmFnbWVudD5cbiAgICAjaW5jbHVkZSA8Zm9nX2ZyYWdtZW50PlxuICAgICNpbmNsdWRlIDxwcmVtdWx0aXBsaWVkX2FscGhhX2ZyYWdtZW50PlxuICAgICNpbmNsdWRlIDxkaXRoZXJpbmdfZnJhZ21lbnQ+XG5cbn1gO1xuIl0sIm5hbWVzIjpbInZlcnRleCIsImZyYWdtZW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///8238\n")},6837:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   F: () => (/* binding */ AnimationChunk)\n/* harmony export */ });\n/* harmony import */ var _GLSLChunk_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3444);\n\n/**\n * IAnimatableインターフェースで定義されたアニメーションを実行するGLSLチャンク。\n * uniformのtime値を操作する。\n * time値によってどのように変化するかは実装するShaderによる。\n */\nclass AnimationChunk extends _GLSLChunk_js__WEBPACK_IMPORTED_MODULE_0__/* .GLSLChunk */ .C {\n  static registerChunk() {\n    TimeAnimationUniformChunk.registerChunk();\n  }\n  static getUniform() {\n    return {\n      time: {\n        value: 0.0\n      },\n      isAnimate: {\n        value: true\n      }\n    };\n  }\n  static addTime(self, delta) {\n    self.uniforms.time.value += delta * self.speed;\n  }\n}\nclass TimeAnimationUniformChunk extends _GLSLChunk_js__WEBPACK_IMPORTED_MODULE_0__/* .GLSLChunk */ .C {\n  static getChunkName() {\n    return "time_animation_uniform_chunk";\n  }\n  static getChunk() {\n    return /* GLSL */`\n    uniform float time;\n    uniform bool isAnimate;\n    `;\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjgzNy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQTJDO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxNQUFNQyxjQUFjLFNBQVNELDZEQUFTLENBQUM7RUFDMUMsT0FBT0UsYUFBYUEsQ0FBQSxFQUFHO0lBQ25CQyx5QkFBeUIsQ0FBQ0QsYUFBYSxDQUFDLENBQUM7RUFDN0M7RUFDQSxPQUFPRSxVQUFVQSxDQUFBLEVBQUc7SUFDaEIsT0FBTztNQUNIQyxJQUFJLEVBQUU7UUFBRUMsS0FBSyxFQUFFO01BQUksQ0FBQztNQUNwQkMsU0FBUyxFQUFFO1FBQUVELEtBQUssRUFBRTtNQUFLO0lBQzdCLENBQUM7RUFDTDtFQUNBLE9BQU9FLE9BQU9BLENBQUNDLElBQUksRUFBRUMsS0FBSyxFQUFFO0lBQ3hCRCxJQUFJLENBQUNFLFFBQVEsQ0FBQ04sSUFBSSxDQUFDQyxLQUFLLElBQUlJLEtBQUssR0FBR0QsSUFBSSxDQUFDRyxLQUFLO0VBQ2xEO0FBQ0o7QUFDQSxNQUFNVCx5QkFBeUIsU0FBU0gsNkRBQVMsQ0FBQztFQUM5QyxPQUFPYSxZQUFZQSxDQUFBLEVBQUc7SUFDbEIsT0FBTyw4QkFBOEI7RUFDekM7RUFDQSxPQUFPQyxRQUFRQSxDQUFBLEVBQUc7SUFDZCxPQUFPLFVBQVk7QUFDM0I7QUFDQTtBQUNBLEtBQUs7RUFDRDtBQUNKIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGhyZWVqcy1zaGFkZXItbWF0ZXJpYWxzLy4vZXNtL2NodW5rL0FuaW1hdGlvbkNodW5rLmpzPzRjZWUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgR0xTTENodW5rIH0gZnJvbSBcIi4vR0xTTENodW5rLmpzXCI7XG4vKipcbiAqIElBbmltYXRhYmxl44Kk44Oz44K/44O844OV44Kn44O844K544Gn5a6a576p44GV44KM44Gf44Ki44OL44Oh44O844K344On44Oz44KS5a6f6KGM44GZ44KLR0xTTOODgeODo+ODs+OCr+OAglxuICogdW5pZm9ybeOBrnRpbWXlgKTjgpLmk43kvZzjgZnjgovjgIJcbiAqIHRpbWXlgKTjgavjgojjgaPjgabjganjga7jgojjgYbjgavlpInljJbjgZnjgovjgYvjga/lrp/oo4XjgZnjgotTaGFkZXLjgavjgojjgovjgIJcbiAqL1xuZXhwb3J0IGNsYXNzIEFuaW1hdGlvbkNodW5rIGV4dGVuZHMgR0xTTENodW5rIHtcbiAgICBzdGF0aWMgcmVnaXN0ZXJDaHVuaygpIHtcbiAgICAgICAgVGltZUFuaW1hdGlvblVuaWZvcm1DaHVuay5yZWdpc3RlckNodW5rKCk7XG4gICAgfVxuICAgIHN0YXRpYyBnZXRVbmlmb3JtKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdGltZTogeyB2YWx1ZTogMC4wIH0sXG4gICAgICAgICAgICBpc0FuaW1hdGU6IHsgdmFsdWU6IHRydWUgfSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgc3RhdGljIGFkZFRpbWUoc2VsZiwgZGVsdGEpIHtcbiAgICAgICAgc2VsZi51bmlmb3Jtcy50aW1lLnZhbHVlICs9IGRlbHRhICogc2VsZi5zcGVlZDtcbiAgICB9XG59XG5jbGFzcyBUaW1lQW5pbWF0aW9uVW5pZm9ybUNodW5rIGV4dGVuZHMgR0xTTENodW5rIHtcbiAgICBzdGF0aWMgZ2V0Q2h1bmtOYW1lKCkge1xuICAgICAgICByZXR1cm4gXCJ0aW1lX2FuaW1hdGlvbl91bmlmb3JtX2NodW5rXCI7XG4gICAgfVxuICAgIHN0YXRpYyBnZXRDaHVuaygpIHtcbiAgICAgICAgcmV0dXJuIC8qIEdMU0wgKi8gYFxuICAgIHVuaWZvcm0gZmxvYXQgdGltZTtcbiAgICB1bmlmb3JtIGJvb2wgaXNBbmltYXRlO1xuICAgIGA7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbIkdMU0xDaHVuayIsIkFuaW1hdGlvbkNodW5rIiwicmVnaXN0ZXJDaHVuayIsIlRpbWVBbmltYXRpb25Vbmlmb3JtQ2h1bmsiLCJnZXRVbmlmb3JtIiwidGltZSIsInZhbHVlIiwiaXNBbmltYXRlIiwiYWRkVGltZSIsInNlbGYiLCJkZWx0YSIsInVuaWZvcm1zIiwic3BlZWQiLCJnZXRDaHVua05hbWUiLCJnZXRDaHVuayJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///6837\n')},1530:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   xe: () => (/* binding */ ExpansionChunk)\n/* harmony export */ });\n/* unused harmony exports ExpansionUniformChunk, ExpansionVertexChunk */\n/* harmony import */ var _GLSLChunk_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3444);\n\nclass ExpansionChunk extends _GLSLChunk_js__WEBPACK_IMPORTED_MODULE_0__/* .GLSLChunk */ .C {\n  static registerChunk() {\n    ExpansionUniformChunk.registerChunk();\n    ExpansionVertexChunk.registerChunk();\n  }\n  static getDefines() {\n    return {\n      USE_EXPANSION: false\n    };\n  }\n  static getUniform() {\n    return {\n      expansionStrength: {\n        value: 0.0\n      }\n    };\n  }\n}\nclass ExpansionUniformChunk extends _GLSLChunk_js__WEBPACK_IMPORTED_MODULE_0__/* .GLSLChunk */ .C {\n  static getChunkName() {\n    return "__expansion_uniform_chunk";\n  }\n  static getChunk() {\n    return /* GLSL */`\n    #ifdef USE_EXPANSION\n      uniform float expansionStrength;\n    #endif\n    `;\n  }\n}\nclass ExpansionVertexChunk extends _GLSLChunk_js__WEBPACK_IMPORTED_MODULE_0__/* .GLSLChunk */ .C {\n  static getChunkName() {\n    return "__expansion_vertex_chunk";\n  }\n  static getChunk() {\n    return `\n    #ifdef USE_EXPANSION\n      transformed += normal * expansionStrength;\n    #endif\n    `;\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTUzMC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUEyQztBQUNwQyxNQUFNQyxjQUFjLFNBQVNELDZEQUFTLENBQUM7RUFDMUMsT0FBT0UsYUFBYUEsQ0FBQSxFQUFHO0lBQ25CQyxxQkFBcUIsQ0FBQ0QsYUFBYSxDQUFDLENBQUM7SUFDckNFLG9CQUFvQixDQUFDRixhQUFhLENBQUMsQ0FBQztFQUN4QztFQUNBLE9BQU9HLFVBQVVBLENBQUEsRUFBRztJQUNoQixPQUFPO01BQ0hDLGFBQWEsRUFBRTtJQUNuQixDQUFDO0VBQ0w7RUFDQSxPQUFPQyxVQUFVQSxDQUFBLEVBQUc7SUFDaEIsT0FBTztNQUNIQyxpQkFBaUIsRUFBRTtRQUNmQyxLQUFLLEVBQUU7TUFDWDtJQUNKLENBQUM7RUFDTDtBQUNKO0FBQ08sTUFBTU4scUJBQXFCLFNBQVNILDZEQUFTLENBQUM7RUFDakQsT0FBT1UsWUFBWUEsQ0FBQSxFQUFHO0lBQ2xCLE9BQU8sMkJBQTJCO0VBQ3RDO0VBQ0EsT0FBT0MsUUFBUUEsQ0FBQSxFQUFHO0lBQ2QsT0FBTyxVQUFZO0FBQzNCO0FBQ0E7QUFDQTtBQUNBLEtBQUs7RUFDRDtBQUNKO0FBQ08sTUFBTVAsb0JBQW9CLFNBQVNKLDZEQUFTLENBQUM7RUFDaEQsT0FBT1UsWUFBWUEsQ0FBQSxFQUFHO0lBQ2xCLE9BQU8sMEJBQTBCO0VBQ3JDO0VBQ0EsT0FBT0MsUUFBUUEsQ0FBQSxFQUFHO0lBQ2QsT0FBUTtBQUNoQjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0VBQ0Q7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL3RocmVlanMtc2hhZGVyLW1hdGVyaWFscy8uL2VzbS9jaHVuay9FeHBhbnNpb25DaHVuay5qcz9lMmM5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEdMU0xDaHVuayB9IGZyb20gXCIuL0dMU0xDaHVuay5qc1wiO1xuZXhwb3J0IGNsYXNzIEV4cGFuc2lvbkNodW5rIGV4dGVuZHMgR0xTTENodW5rIHtcbiAgICBzdGF0aWMgcmVnaXN0ZXJDaHVuaygpIHtcbiAgICAgICAgRXhwYW5zaW9uVW5pZm9ybUNodW5rLnJlZ2lzdGVyQ2h1bmsoKTtcbiAgICAgICAgRXhwYW5zaW9uVmVydGV4Q2h1bmsucmVnaXN0ZXJDaHVuaygpO1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0RGVmaW5lcygpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIFVTRV9FWFBBTlNJT046IGZhbHNlLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0VW5pZm9ybSgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGV4cGFuc2lvblN0cmVuZ3RoOiB7XG4gICAgICAgICAgICAgICAgdmFsdWU6IDAuMCxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEV4cGFuc2lvblVuaWZvcm1DaHVuayBleHRlbmRzIEdMU0xDaHVuayB7XG4gICAgc3RhdGljIGdldENodW5rTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIFwiX19leHBhbnNpb25fdW5pZm9ybV9jaHVua1wiO1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0Q2h1bmsoKSB7XG4gICAgICAgIHJldHVybiAvKiBHTFNMICovIGBcbiAgICAjaWZkZWYgVVNFX0VYUEFOU0lPTlxuICAgICAgdW5pZm9ybSBmbG9hdCBleHBhbnNpb25TdHJlbmd0aDtcbiAgICAjZW5kaWZcbiAgICBgO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBFeHBhbnNpb25WZXJ0ZXhDaHVuayBleHRlbmRzIEdMU0xDaHVuayB7XG4gICAgc3RhdGljIGdldENodW5rTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIFwiX19leHBhbnNpb25fdmVydGV4X2NodW5rXCI7XG4gICAgfVxuICAgIHN0YXRpYyBnZXRDaHVuaygpIHtcbiAgICAgICAgcmV0dXJuIGBcbiAgICAjaWZkZWYgVVNFX0VYUEFOU0lPTlxuICAgICAgdHJhbnNmb3JtZWQgKz0gbm9ybWFsICogZXhwYW5zaW9uU3RyZW5ndGg7XG4gICAgI2VuZGlmXG4gICAgYDtcbiAgICB9XG59XG4iXSwibmFtZXMiOlsiR0xTTENodW5rIiwiRXhwYW5zaW9uQ2h1bmsiLCJyZWdpc3RlckNodW5rIiwiRXhwYW5zaW9uVW5pZm9ybUNodW5rIiwiRXhwYW5zaW9uVmVydGV4Q2h1bmsiLCJnZXREZWZpbmVzIiwiVVNFX0VYUEFOU0lPTiIsImdldFVuaWZvcm0iLCJleHBhbnNpb25TdHJlbmd0aCIsInZhbHVlIiwiZ2V0Q2h1bmtOYW1lIiwiZ2V0Q2h1bmsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1530\n')},3444:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   C: () => (/* binding */ GLSLChunk)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6075);\n\n/**\n * ShaderChunkに登録を行うGLSLのコード片を格納するクラス。\n * GLSLコードの共有化を目的とする。\n */\nclass GLSLChunk {\n  /**\n   * ShaderChunkに登録する名前。\n   */\n  static getChunkName() {\n    return "";\n  }\n  /**\n   * ShaderChunkに登録するGLSLコード。\n   */\n  static getChunk() {\n    return "";\n  }\n  /**\n   * Chunkに関連する定数Defineを格納したオブジェクトを取得する。\n   * @see https://threejs.org/docs/#api/en/materials/ShaderMaterial.defines\n   */\n  static getDefines() {\n    return {};\n  }\n  /**\n   * ShaderChunkにGLSLコードを登録する。\n   */\n  static registerChunk() {\n    if (three__WEBPACK_IMPORTED_MODULE_0__/* .ShaderChunk */ .WdD && three__WEBPACK_IMPORTED_MODULE_0__/* .ShaderChunk */ .WdD[this.getChunkName()] == null) {\n      three__WEBPACK_IMPORTED_MODULE_0__/* .ShaderChunk */ .WdD[this.getChunkName()] = this.getChunk();\n    }\n  }\n  /**\n   * Chunkに関連する共有変数Uniformsを格納したオブジェクトを取得する。\n   * @see https://threejs.org/docs/#api/en/materials/ShaderMaterial.uniforms\n   */\n  static getUniform() {\n    return {};\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzQ0NC5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQW9DO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ08sTUFBTUMsU0FBUyxDQUFDO0VBQ25CO0FBQ0o7QUFDQTtFQUNJLE9BQU9DLFlBQVlBLENBQUEsRUFBRztJQUNsQixPQUFPLEVBQUU7RUFDYjtFQUNBO0FBQ0o7QUFDQTtFQUNJLE9BQU9DLFFBQVFBLENBQUEsRUFBRztJQUNkLE9BQU8sRUFBRTtFQUNiO0VBQ0E7QUFDSjtBQUNBO0FBQ0E7RUFDSSxPQUFPQyxVQUFVQSxDQUFBLEVBQUc7SUFDaEIsT0FBTyxDQUFDLENBQUM7RUFDYjtFQUNBO0FBQ0o7QUFDQTtFQUNJLE9BQU9DLGFBQWFBLENBQUEsRUFBRztJQUNuQixJQUFJTCx5REFBVyxJQUFJQSx5REFBVyxDQUFDLElBQUksQ0FBQ0UsWUFBWSxDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksRUFBRTtNQUN6REYseURBQVcsQ0FBQyxJQUFJLENBQUNFLFlBQVksQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUNDLFFBQVEsQ0FBQyxDQUFDO0lBQ3REO0VBQ0o7RUFDQTtBQUNKO0FBQ0E7QUFDQTtFQUNJLE9BQU9HLFVBQVVBLENBQUEsRUFBRztJQUNoQixPQUFPLENBQUMsQ0FBQztFQUNiO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aHJlZWpzLXNoYWRlci1tYXRlcmlhbHMvLi9lc20vY2h1bmsvR0xTTENodW5rLmpzPzYyYTciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU2hhZGVyQ2h1bmsgfSBmcm9tIFwidGhyZWVcIjtcbi8qKlxuICogU2hhZGVyQ2h1bmvjgavnmbvpjLLjgpLooYzjgYZHTFNM44Gu44Kz44O844OJ54mH44KS5qC857SN44GZ44KL44Kv44Op44K544CCXG4gKiBHTFNM44Kz44O844OJ44Gu5YWx5pyJ5YyW44KS55uu55qE44Go44GZ44KL44CCXG4gKi9cbmV4cG9ydCBjbGFzcyBHTFNMQ2h1bmsge1xuICAgIC8qKlxuICAgICAqIFNoYWRlckNodW5r44Gr55m76Yyy44GZ44KL5ZCN5YmN44CCXG4gICAgICovXG4gICAgc3RhdGljIGdldENodW5rTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNoYWRlckNodW5r44Gr55m76Yyy44GZ44KLR0xTTOOCs+ODvOODieOAglxuICAgICAqL1xuICAgIHN0YXRpYyBnZXRDaHVuaygpIHtcbiAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENodW5r44Gr6Zai6YCj44GZ44KL5a6a5pWwRGVmaW5l44KS5qC857SN44GX44Gf44Kq44OW44K444Kn44Kv44OI44KS5Y+W5b6X44GZ44KL44CCXG4gICAgICogQHNlZSBodHRwczovL3RocmVlanMub3JnL2RvY3MvI2FwaS9lbi9tYXRlcmlhbHMvU2hhZGVyTWF0ZXJpYWwuZGVmaW5lc1xuICAgICAqL1xuICAgIHN0YXRpYyBnZXREZWZpbmVzKCkge1xuICAgICAgICByZXR1cm4ge307XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNoYWRlckNodW5r44GrR0xTTOOCs+ODvOODieOCkueZu+mMsuOBmeOCi+OAglxuICAgICAqL1xuICAgIHN0YXRpYyByZWdpc3RlckNodW5rKCkge1xuICAgICAgICBpZiAoU2hhZGVyQ2h1bmsgJiYgU2hhZGVyQ2h1bmtbdGhpcy5nZXRDaHVua05hbWUoKV0gPT0gbnVsbCkge1xuICAgICAgICAgICAgU2hhZGVyQ2h1bmtbdGhpcy5nZXRDaHVua05hbWUoKV0gPSB0aGlzLmdldENodW5rKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2h1bmvjgavplqLpgKPjgZnjgovlhbHmnInlpInmlbBVbmlmb3Jtc+OCkuagvOe0jeOBl+OBn+OCquODluOCuOOCp+OCr+ODiOOCkuWPluW+l+OBmeOCi+OAglxuICAgICAqIEBzZWUgaHR0cHM6Ly90aHJlZWpzLm9yZy9kb2NzLyNhcGkvZW4vbWF0ZXJpYWxzL1NoYWRlck1hdGVyaWFsLnVuaWZvcm1zXG4gICAgICovXG4gICAgc3RhdGljIGdldFVuaWZvcm0oKSB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICB9XG59XG4iXSwibmFtZXMiOlsiU2hhZGVyQ2h1bmsiLCJHTFNMQ2h1bmsiLCJnZXRDaHVua05hbWUiLCJnZXRDaHVuayIsImdldERlZmluZXMiLCJyZWdpc3RlckNodW5rIiwiZ2V0VW5pZm9ybSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///3444\n')},2089:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   H: () => (/* binding */ MapChunk)\n/* harmony export */ });\n/* harmony import */ var _GLSLChunk_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3444);\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6075);\n\n\n/**\n * マスクテクスチャを利用するShaderMaterial用Chunk。\n * マスクテクスチャがどのように描画に反映されるかは、各Materialのシェーダー実装による。\n */\nclass MapChunk extends _GLSLChunk_js__WEBPACK_IMPORTED_MODULE_0__/* .GLSLChunk */ .C {\n  static registerChunk() {\n    super.registerChunk();\n    MapUniformChunk.registerChunk();\n    MapFragmentChunk.registerChunk();\n    MapFragmentBeginChunk.registerChunk();\n  }\n  static getUniform() {\n    return three__WEBPACK_IMPORTED_MODULE_1__/* .UniformsUtils */ .rDY.merge([super.getUniform(), {\n      hasMap: {\n        value: false\n      },\n      map: {\n        value: null\n      }\n    }]);\n  }\n  static getMap(_self) {\n    return _self.uniforms.map.value;\n  }\n  static setMap(_self, val) {\n    _self.uniforms.map.value = val;\n    _self.uniforms.hasMap.value = val != null;\n  }\n}\nclass MapUniformChunk extends _GLSLChunk_js__WEBPACK_IMPORTED_MODULE_0__/* .GLSLChunk */ .C {\n  static getChunkName() {\n    return "map_uniform_chunk";\n  }\n  static getChunk() {\n    return /* GLSL */`\n      uniform bool hasMap;\n      uniform sampler2D map;\n    `;\n  }\n}\nclass MapFragmentChunk extends _GLSLChunk_js__WEBPACK_IMPORTED_MODULE_0__/* .GLSLChunk */ .C {\n  static getChunkName() {\n    return "map_fragment_chunk";\n  }\n  static getChunk() {\n    return /* GLSL */`\n      if( hasMap ){\n        vec4 texelColor = texture2D( map, mapUV );\n        diffuseColor *= texelColor;\n      }\n    `;\n  }\n}\nclass MapFragmentBeginChunk extends _GLSLChunk_js__WEBPACK_IMPORTED_MODULE_0__/* .GLSLChunk */ .C {\n  static getChunkName() {\n    return "__ShaderMaterial__map_fragment_begin_chunk";\n  }\n  static getChunk() {\n    return /* GLSL */`\n      vec2 mapUV = uvPosition;\n    `;\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjA4OS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUEyQztBQUNMO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ08sTUFBTUUsUUFBUSxTQUFTRiw2REFBUyxDQUFDO0VBQ3BDLE9BQU9HLGFBQWFBLENBQUEsRUFBRztJQUNuQixLQUFLLENBQUNBLGFBQWEsQ0FBQyxDQUFDO0lBQ3JCQyxlQUFlLENBQUNELGFBQWEsQ0FBQyxDQUFDO0lBQy9CRSxnQkFBZ0IsQ0FBQ0YsYUFBYSxDQUFDLENBQUM7SUFDaENHLHFCQUFxQixDQUFDSCxhQUFhLENBQUMsQ0FBQztFQUN6QztFQUNBLE9BQU9JLFVBQVVBLENBQUEsRUFBRztJQUNoQixPQUFPTiwyREFBYSxDQUFDTyxLQUFLLENBQUMsQ0FDdkIsS0FBSyxDQUFDRCxVQUFVLENBQUMsQ0FBQyxFQUNsQjtNQUNJRSxNQUFNLEVBQUU7UUFBRUMsS0FBSyxFQUFFO01BQU0sQ0FBQztNQUN4QkMsR0FBRyxFQUFFO1FBQUVELEtBQUssRUFBRTtNQUFLO0lBQ3ZCLENBQUMsQ0FDSixDQUFDO0VBQ047RUFDQSxPQUFPRSxNQUFNQSxDQUFDQyxLQUFLLEVBQUU7SUFDakIsT0FBT0EsS0FBSyxDQUFDQyxRQUFRLENBQUNILEdBQUcsQ0FBQ0QsS0FBSztFQUNuQztFQUNBLE9BQU9LLE1BQU1BLENBQUNGLEtBQUssRUFBRUcsR0FBRyxFQUFFO0lBQ3RCSCxLQUFLLENBQUNDLFFBQVEsQ0FBQ0gsR0FBRyxDQUFDRCxLQUFLLEdBQUdNLEdBQUc7SUFDOUJILEtBQUssQ0FBQ0MsUUFBUSxDQUFDTCxNQUFNLENBQUNDLEtBQUssR0FBR00sR0FBRyxJQUFJLElBQUk7RUFDN0M7QUFDSjtBQUNBLE1BQU1aLGVBQWUsU0FBU0osNkRBQVMsQ0FBQztFQUNwQyxPQUFPaUIsWUFBWUEsQ0FBQSxFQUFHO0lBQ2xCLE9BQU8sbUJBQW1CO0VBQzlCO0VBQ0EsT0FBT0MsUUFBUUEsQ0FBQSxFQUFHO0lBQ2QsT0FBTyxVQUFZO0FBQzNCO0FBQ0E7QUFDQSxLQUFLO0VBQ0Q7QUFDSjtBQUNBLE1BQU1iLGdCQUFnQixTQUFTTCw2REFBUyxDQUFDO0VBQ3JDLE9BQU9pQixZQUFZQSxDQUFBLEVBQUc7SUFDbEIsT0FBTyxvQkFBb0I7RUFDL0I7RUFDQSxPQUFPQyxRQUFRQSxDQUFBLEVBQUc7SUFDZCxPQUFPLFVBQVk7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0VBQ0Q7QUFDSjtBQUNBLE1BQU1aLHFCQUFxQixTQUFTTiw2REFBUyxDQUFDO0VBQzFDLE9BQU9pQixZQUFZQSxDQUFBLEVBQUc7SUFDbEIsT0FBTyw0Q0FBNEM7RUFDdkQ7RUFDQSxPQUFPQyxRQUFRQSxDQUFBLEVBQUc7SUFDZCxPQUFPLFVBQVk7QUFDM0I7QUFDQSxLQUFLO0VBQ0Q7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL3RocmVlanMtc2hhZGVyLW1hdGVyaWFscy8uL2VzbS9jaHVuay9NYXBDaHVuay5qcz9iNGM3Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEdMU0xDaHVuayB9IGZyb20gXCIuL0dMU0xDaHVuay5qc1wiO1xuaW1wb3J0IHsgVW5pZm9ybXNVdGlscyB9IGZyb20gXCJ0aHJlZVwiO1xuLyoqXG4gKiDjg57jgrnjgq/jg4bjgq/jgrnjg4Hjg6PjgpLliKnnlKjjgZnjgotTaGFkZXJNYXRlcmlhbOeUqENodW5r44CCXG4gKiDjg57jgrnjgq/jg4bjgq/jgrnjg4Hjg6PjgYzjganjga7jgojjgYbjgavmj4/nlLvjgavlj43mmKDjgZXjgozjgovjgYvjga/jgIHlkIRNYXRlcmlhbOOBruOCt+OCp+ODvOODgOODvOWun+ijheOBq+OCiOOCi+OAglxuICovXG5leHBvcnQgY2xhc3MgTWFwQ2h1bmsgZXh0ZW5kcyBHTFNMQ2h1bmsge1xuICAgIHN0YXRpYyByZWdpc3RlckNodW5rKCkge1xuICAgICAgICBzdXBlci5yZWdpc3RlckNodW5rKCk7XG4gICAgICAgIE1hcFVuaWZvcm1DaHVuay5yZWdpc3RlckNodW5rKCk7XG4gICAgICAgIE1hcEZyYWdtZW50Q2h1bmsucmVnaXN0ZXJDaHVuaygpO1xuICAgICAgICBNYXBGcmFnbWVudEJlZ2luQ2h1bmsucmVnaXN0ZXJDaHVuaygpO1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0VW5pZm9ybSgpIHtcbiAgICAgICAgcmV0dXJuIFVuaWZvcm1zVXRpbHMubWVyZ2UoW1xuICAgICAgICAgICAgc3VwZXIuZ2V0VW5pZm9ybSgpLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGhhc01hcDogeyB2YWx1ZTogZmFsc2UgfSxcbiAgICAgICAgICAgICAgICBtYXA6IHsgdmFsdWU6IG51bGwgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0pO1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0TWFwKF9zZWxmKSB7XG4gICAgICAgIHJldHVybiBfc2VsZi51bmlmb3Jtcy5tYXAudmFsdWU7XG4gICAgfVxuICAgIHN0YXRpYyBzZXRNYXAoX3NlbGYsIHZhbCkge1xuICAgICAgICBfc2VsZi51bmlmb3Jtcy5tYXAudmFsdWUgPSB2YWw7XG4gICAgICAgIF9zZWxmLnVuaWZvcm1zLmhhc01hcC52YWx1ZSA9IHZhbCAhPSBudWxsO1xuICAgIH1cbn1cbmNsYXNzIE1hcFVuaWZvcm1DaHVuayBleHRlbmRzIEdMU0xDaHVuayB7XG4gICAgc3RhdGljIGdldENodW5rTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIFwibWFwX3VuaWZvcm1fY2h1bmtcIjtcbiAgICB9XG4gICAgc3RhdGljIGdldENodW5rKCkge1xuICAgICAgICByZXR1cm4gLyogR0xTTCAqLyBgXG4gICAgICB1bmlmb3JtIGJvb2wgaGFzTWFwO1xuICAgICAgdW5pZm9ybSBzYW1wbGVyMkQgbWFwO1xuICAgIGA7XG4gICAgfVxufVxuY2xhc3MgTWFwRnJhZ21lbnRDaHVuayBleHRlbmRzIEdMU0xDaHVuayB7XG4gICAgc3RhdGljIGdldENodW5rTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIFwibWFwX2ZyYWdtZW50X2NodW5rXCI7XG4gICAgfVxuICAgIHN0YXRpYyBnZXRDaHVuaygpIHtcbiAgICAgICAgcmV0dXJuIC8qIEdMU0wgKi8gYFxuICAgICAgaWYoIGhhc01hcCApe1xuICAgICAgICB2ZWM0IHRleGVsQ29sb3IgPSB0ZXh0dXJlMkQoIG1hcCwgbWFwVVYgKTtcbiAgICAgICAgZGlmZnVzZUNvbG9yICo9IHRleGVsQ29sb3I7XG4gICAgICB9XG4gICAgYDtcbiAgICB9XG59XG5jbGFzcyBNYXBGcmFnbWVudEJlZ2luQ2h1bmsgZXh0ZW5kcyBHTFNMQ2h1bmsge1xuICAgIHN0YXRpYyBnZXRDaHVua05hbWUoKSB7XG4gICAgICAgIHJldHVybiBcIl9fU2hhZGVyTWF0ZXJpYWxfX21hcF9mcmFnbWVudF9iZWdpbl9jaHVua1wiO1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0Q2h1bmsoKSB7XG4gICAgICAgIHJldHVybiAvKiBHTFNMICovIGBcbiAgICAgIHZlYzIgbWFwVVYgPSB1dlBvc2l0aW9uO1xuICAgIGA7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbIkdMU0xDaHVuayIsIlVuaWZvcm1zVXRpbHMiLCJNYXBDaHVuayIsInJlZ2lzdGVyQ2h1bmsiLCJNYXBVbmlmb3JtQ2h1bmsiLCJNYXBGcmFnbWVudENodW5rIiwiTWFwRnJhZ21lbnRCZWdpbkNodW5rIiwiZ2V0VW5pZm9ybSIsIm1lcmdlIiwiaGFzTWFwIiwidmFsdWUiLCJtYXAiLCJnZXRNYXAiLCJfc2VsZiIsInVuaWZvcm1zIiwic2V0TWFwIiwidmFsIiwiZ2V0Q2h1bmtOYW1lIiwiZ2V0Q2h1bmsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///2089\n')},66:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   z: () => (/* binding */ MeshPhongChunk)\n/* harmony export */ });\n/* harmony import */ var _GLSLChunk_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3444);\n\n/**\n * MeshPhongMaterialと同等の機能を備えたShaderMaterialを実装するために必要なGLSLコードを格納したクラス。\n */\nclass MeshPhongChunk extends _GLSLChunk_js__WEBPACK_IMPORTED_MODULE_0__/* .GLSLChunk */ .C {\n  static registerChunk() {\n    MeshPhongUniformChunk.registerChunk();\n    MeshPhongDiffuseColorChunk.registerChunk();\n    MeshPhongSwitchingAlphaMapChunk.registerChunk();\n    MeshPositionVaryingChunk.registerChunk();\n    MeshPositionVertexChunk.registerChunk();\n  }\n  static getDefines() {\n    return {\n      USE_MESH_POSITION: false\n    };\n  }\n}\nclass MeshPhongUniformChunk extends _GLSLChunk_js__WEBPACK_IMPORTED_MODULE_0__/* .GLSLChunk */ .C {\n  static getChunkName() {\n    return "mesh_phong_uniform";\n  }\n  static getChunk() {\n    return /* GLSL */`\n      uniform vec3 diffuse;\n      uniform vec3 emissive;\n      uniform vec3 specular;\n      uniform float shininess;\n      uniform float opacity;\n      uniform bool hasAlphaMap;\n      uniform sampler2D alphaMap;\n    `;\n  }\n}\nclass MeshPhongDiffuseColorChunk extends _GLSLChunk_js__WEBPACK_IMPORTED_MODULE_0__/* .GLSLChunk */ .C {\n  static getChunkName() {\n    return "mesh_phong_diffuse_color";\n  }\n  static getChunk() {\n    return /* GLSL */`\n    vec4 diffuseColor = vec4( diffuse, opacity );\n    ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n    vec3 totalEmissiveRadiance = emissive;\n    `;\n  }\n}\nclass MeshPhongSwitchingAlphaMapChunk extends _GLSLChunk_js__WEBPACK_IMPORTED_MODULE_0__/* .GLSLChunk */ .C {\n  static getChunkName() {\n    return "mesh_phong_switching_alpha_map";\n  }\n  static getChunk() {\n    return /* GLSL */`\n      if( hasAlphaMap ){\n        diffuseColor.a *= texture2D( alphaMap, mapUV ).g;\n      }\n    `;\n  }\n}\nclass MeshPositionVaryingChunk extends _GLSLChunk_js__WEBPACK_IMPORTED_MODULE_0__/* .GLSLChunk */ .C {\n  static getChunkName() {\n    return "mesh_position_varying";\n  }\n  static getChunk() {\n    return /* GLSL */`\n    #ifdef USE_MESH_POSITION\n    varying vec3 meshPosition;\n    #endif\n    `;\n  }\n}\nclass MeshPositionVertexChunk extends _GLSLChunk_js__WEBPACK_IMPORTED_MODULE_0__/* .GLSLChunk */ .C {\n  static getChunkName() {\n    return "mesh_position_vertex";\n  }\n  static getChunk() {\n    return /* GLSL */`\n    #ifdef USE_MESH_POSITION\n    meshPosition = position;\n    #endif\n    `;\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjYuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUEyQztBQUMzQztBQUNBO0FBQ0E7QUFDTyxNQUFNQyxjQUFjLFNBQVNELDZEQUFTLENBQUM7RUFDMUMsT0FBT0UsYUFBYUEsQ0FBQSxFQUFHO0lBQ25CQyxxQkFBcUIsQ0FBQ0QsYUFBYSxDQUFDLENBQUM7SUFDckNFLDBCQUEwQixDQUFDRixhQUFhLENBQUMsQ0FBQztJQUMxQ0csK0JBQStCLENBQUNILGFBQWEsQ0FBQyxDQUFDO0lBQy9DSSx3QkFBd0IsQ0FBQ0osYUFBYSxDQUFDLENBQUM7SUFDeENLLHVCQUF1QixDQUFDTCxhQUFhLENBQUMsQ0FBQztFQUMzQztFQUNBLE9BQU9NLFVBQVVBLENBQUEsRUFBRztJQUNoQixPQUFPO01BQ0hDLGlCQUFpQixFQUFFO0lBQ3ZCLENBQUM7RUFDTDtBQUNKO0FBQ0EsTUFBTU4scUJBQXFCLFNBQVNILDZEQUFTLENBQUM7RUFDMUMsT0FBT1UsWUFBWUEsQ0FBQSxFQUFHO0lBQ2xCLE9BQU8sb0JBQW9CO0VBQy9CO0VBQ0EsT0FBT0MsUUFBUUEsQ0FBQSxFQUFHO0lBQ2QsT0FBTyxVQUFZO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztFQUNEO0FBQ0o7QUFDQSxNQUFNUCwwQkFBMEIsU0FBU0osNkRBQVMsQ0FBQztFQUMvQyxPQUFPVSxZQUFZQSxDQUFBLEVBQUc7SUFDbEIsT0FBTywwQkFBMEI7RUFDckM7RUFDQSxPQUFPQyxRQUFRQSxDQUFBLEVBQUc7SUFDZCxPQUFPLFVBQVk7QUFDM0I7QUFDQTtBQUNBO0FBQ0EsS0FBSztFQUNEO0FBQ0o7QUFDQSxNQUFNTiwrQkFBK0IsU0FBU0wsNkRBQVMsQ0FBQztFQUNwRCxPQUFPVSxZQUFZQSxDQUFBLEVBQUc7SUFDbEIsT0FBTyxnQ0FBZ0M7RUFDM0M7RUFDQSxPQUFPQyxRQUFRQSxDQUFBLEVBQUc7SUFDZCxPQUFPLFVBQVk7QUFDM0I7QUFDQTtBQUNBO0FBQ0EsS0FBSztFQUNEO0FBQ0o7QUFDQSxNQUFNTCx3QkFBd0IsU0FBU04sNkRBQVMsQ0FBQztFQUM3QyxPQUFPVSxZQUFZQSxDQUFBLEVBQUc7SUFDbEIsT0FBTyx1QkFBdUI7RUFDbEM7RUFDQSxPQUFPQyxRQUFRQSxDQUFBLEVBQUc7SUFDZCxPQUFPLFVBQVk7QUFDM0I7QUFDQTtBQUNBO0FBQ0EsS0FBSztFQUNEO0FBQ0o7QUFDQSxNQUFNSix1QkFBdUIsU0FBU1AsNkRBQVMsQ0FBQztFQUM1QyxPQUFPVSxZQUFZQSxDQUFBLEVBQUc7SUFDbEIsT0FBTyxzQkFBc0I7RUFDakM7RUFDQSxPQUFPQyxRQUFRQSxDQUFBLEVBQUc7SUFDZCxPQUFPLFVBQVk7QUFDM0I7QUFDQTtBQUNBO0FBQ0EsS0FBSztFQUNEO0FBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90aHJlZWpzLXNoYWRlci1tYXRlcmlhbHMvLi9lc20vY2h1bmsvTWVzaFBob25nQ2h1bmsuanM/OTAyYyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBHTFNMQ2h1bmsgfSBmcm9tIFwiLi9HTFNMQ2h1bmsuanNcIjtcbi8qKlxuICogTWVzaFBob25nTWF0ZXJpYWzjgajlkIznrYnjga7mqZ/og73jgpLlgpnjgYjjgZ9TaGFkZXJNYXRlcmlhbOOCkuWun+ijheOBmeOCi+OBn+OCgeOBq+W/heimgeOBqkdMU0zjgrPjg7zjg4njgpLmoLzntI3jgZfjgZ/jgq/jg6njgrnjgIJcbiAqL1xuZXhwb3J0IGNsYXNzIE1lc2hQaG9uZ0NodW5rIGV4dGVuZHMgR0xTTENodW5rIHtcbiAgICBzdGF0aWMgcmVnaXN0ZXJDaHVuaygpIHtcbiAgICAgICAgTWVzaFBob25nVW5pZm9ybUNodW5rLnJlZ2lzdGVyQ2h1bmsoKTtcbiAgICAgICAgTWVzaFBob25nRGlmZnVzZUNvbG9yQ2h1bmsucmVnaXN0ZXJDaHVuaygpO1xuICAgICAgICBNZXNoUGhvbmdTd2l0Y2hpbmdBbHBoYU1hcENodW5rLnJlZ2lzdGVyQ2h1bmsoKTtcbiAgICAgICAgTWVzaFBvc2l0aW9uVmFyeWluZ0NodW5rLnJlZ2lzdGVyQ2h1bmsoKTtcbiAgICAgICAgTWVzaFBvc2l0aW9uVmVydGV4Q2h1bmsucmVnaXN0ZXJDaHVuaygpO1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0RGVmaW5lcygpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIFVTRV9NRVNIX1BPU0lUSU9OOiBmYWxzZSxcbiAgICAgICAgfTtcbiAgICB9XG59XG5jbGFzcyBNZXNoUGhvbmdVbmlmb3JtQ2h1bmsgZXh0ZW5kcyBHTFNMQ2h1bmsge1xuICAgIHN0YXRpYyBnZXRDaHVua05hbWUoKSB7XG4gICAgICAgIHJldHVybiBcIm1lc2hfcGhvbmdfdW5pZm9ybVwiO1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0Q2h1bmsoKSB7XG4gICAgICAgIHJldHVybiAvKiBHTFNMICovIGBcbiAgICAgIHVuaWZvcm0gdmVjMyBkaWZmdXNlO1xuICAgICAgdW5pZm9ybSB2ZWMzIGVtaXNzaXZlO1xuICAgICAgdW5pZm9ybSB2ZWMzIHNwZWN1bGFyO1xuICAgICAgdW5pZm9ybSBmbG9hdCBzaGluaW5lc3M7XG4gICAgICB1bmlmb3JtIGZsb2F0IG9wYWNpdHk7XG4gICAgICB1bmlmb3JtIGJvb2wgaGFzQWxwaGFNYXA7XG4gICAgICB1bmlmb3JtIHNhbXBsZXIyRCBhbHBoYU1hcDtcbiAgICBgO1xuICAgIH1cbn1cbmNsYXNzIE1lc2hQaG9uZ0RpZmZ1c2VDb2xvckNodW5rIGV4dGVuZHMgR0xTTENodW5rIHtcbiAgICBzdGF0aWMgZ2V0Q2h1bmtOYW1lKCkge1xuICAgICAgICByZXR1cm4gXCJtZXNoX3Bob25nX2RpZmZ1c2VfY29sb3JcIjtcbiAgICB9XG4gICAgc3RhdGljIGdldENodW5rKCkge1xuICAgICAgICByZXR1cm4gLyogR0xTTCAqLyBgXG4gICAgdmVjNCBkaWZmdXNlQ29sb3IgPSB2ZWM0KCBkaWZmdXNlLCBvcGFjaXR5ICk7XG4gICAgUmVmbGVjdGVkTGlnaHQgcmVmbGVjdGVkTGlnaHQgPSBSZWZsZWN0ZWRMaWdodCggdmVjMyggMC4wICksIHZlYzMoIDAuMCApLCB2ZWMzKCAwLjAgKSwgdmVjMyggMC4wICkgKTtcbiAgICB2ZWMzIHRvdGFsRW1pc3NpdmVSYWRpYW5jZSA9IGVtaXNzaXZlO1xuICAgIGA7XG4gICAgfVxufVxuY2xhc3MgTWVzaFBob25nU3dpdGNoaW5nQWxwaGFNYXBDaHVuayBleHRlbmRzIEdMU0xDaHVuayB7XG4gICAgc3RhdGljIGdldENodW5rTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIFwibWVzaF9waG9uZ19zd2l0Y2hpbmdfYWxwaGFfbWFwXCI7XG4gICAgfVxuICAgIHN0YXRpYyBnZXRDaHVuaygpIHtcbiAgICAgICAgcmV0dXJuIC8qIEdMU0wgKi8gYFxuICAgICAgaWYoIGhhc0FscGhhTWFwICl7XG4gICAgICAgIGRpZmZ1c2VDb2xvci5hICo9IHRleHR1cmUyRCggYWxwaGFNYXAsIG1hcFVWICkuZztcbiAgICAgIH1cbiAgICBgO1xuICAgIH1cbn1cbmNsYXNzIE1lc2hQb3NpdGlvblZhcnlpbmdDaHVuayBleHRlbmRzIEdMU0xDaHVuayB7XG4gICAgc3RhdGljIGdldENodW5rTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIFwibWVzaF9wb3NpdGlvbl92YXJ5aW5nXCI7XG4gICAgfVxuICAgIHN0YXRpYyBnZXRDaHVuaygpIHtcbiAgICAgICAgcmV0dXJuIC8qIEdMU0wgKi8gYFxuICAgICNpZmRlZiBVU0VfTUVTSF9QT1NJVElPTlxuICAgIHZhcnlpbmcgdmVjMyBtZXNoUG9zaXRpb247XG4gICAgI2VuZGlmXG4gICAgYDtcbiAgICB9XG59XG5jbGFzcyBNZXNoUG9zaXRpb25WZXJ0ZXhDaHVuayBleHRlbmRzIEdMU0xDaHVuayB7XG4gICAgc3RhdGljIGdldENodW5rTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIFwibWVzaF9wb3NpdGlvbl92ZXJ0ZXhcIjtcbiAgICB9XG4gICAgc3RhdGljIGdldENodW5rKCkge1xuICAgICAgICByZXR1cm4gLyogR0xTTCAqLyBgXG4gICAgI2lmZGVmIFVTRV9NRVNIX1BPU0lUSU9OXG4gICAgbWVzaFBvc2l0aW9uID0gcG9zaXRpb247XG4gICAgI2VuZGlmXG4gICAgYDtcbiAgICB9XG59XG4iXSwibmFtZXMiOlsiR0xTTENodW5rIiwiTWVzaFBob25nQ2h1bmsiLCJyZWdpc3RlckNodW5rIiwiTWVzaFBob25nVW5pZm9ybUNodW5rIiwiTWVzaFBob25nRGlmZnVzZUNvbG9yQ2h1bmsiLCJNZXNoUGhvbmdTd2l0Y2hpbmdBbHBoYU1hcENodW5rIiwiTWVzaFBvc2l0aW9uVmFyeWluZ0NodW5rIiwiTWVzaFBvc2l0aW9uVmVydGV4Q2h1bmsiLCJnZXREZWZpbmVzIiwiVVNFX01FU0hfUE9TSVRJT04iLCJnZXRDaHVua05hbWUiLCJnZXRDaHVuayJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///66\n')},9516:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   q0: () => (/* binding */ SurfaceNormalChunk)\n/* harmony export */ });\n/* unused harmony exports SurfaceNormalVaryingChunk, SurfaceNormalVertexChunk */\n/* harmony import */ var _GLSLChunk_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3444);\n\nclass SurfaceNormalChunk extends _GLSLChunk_js__WEBPACK_IMPORTED_MODULE_0__/* .GLSLChunk */ .C {\n  static registerChunk() {\n    SurfaceNormalVaryingChunk.registerChunk();\n    SurfaceNormalVertexChunk.registerChunk();\n  }\n  static getDefines() {\n    return {\n      USE_SURFACE_NORMAL: false\n    };\n  }\n  static getUniform() {\n    return {};\n  }\n}\nclass SurfaceNormalVaryingChunk extends _GLSLChunk_js__WEBPACK_IMPORTED_MODULE_0__/* .GLSLChunk */ .C {\n  static getChunkName() {\n    return "surface_normal_varying_chunk";\n  }\n  static getChunk() {\n    return /* GLSL */`\n    #ifdef USE_SURFACE_NORMAL\n      varying vec3 surfaceNormal;\n    #endif\n    `;\n  }\n}\nclass SurfaceNormalVertexChunk extends _GLSLChunk_js__WEBPACK_IMPORTED_MODULE_0__/* .GLSLChunk */ .C {\n  static getChunkName() {\n    return "surface_normal_vertex_chunk";\n  }\n  static getChunk() {\n    return /* GLSL */`\n    #ifdef USE_SURFACE_NORMAL\n      surfaceNormal = normalize( transformedNormal );\n    #endif\n    `;\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTUxNi5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUEyQztBQUNwQyxNQUFNQyxrQkFBa0IsU0FBU0QsNkRBQVMsQ0FBQztFQUM5QyxPQUFPRSxhQUFhQSxDQUFBLEVBQUc7SUFDbkJDLHlCQUF5QixDQUFDRCxhQUFhLENBQUMsQ0FBQztJQUN6Q0Usd0JBQXdCLENBQUNGLGFBQWEsQ0FBQyxDQUFDO0VBQzVDO0VBQ0EsT0FBT0csVUFBVUEsQ0FBQSxFQUFHO0lBQ2hCLE9BQU87TUFDSEMsa0JBQWtCLEVBQUU7SUFDeEIsQ0FBQztFQUNMO0VBQ0EsT0FBT0MsVUFBVUEsQ0FBQSxFQUFHO0lBQ2hCLE9BQU8sQ0FBQyxDQUFDO0VBQ2I7QUFDSjtBQUNPLE1BQU1KLHlCQUF5QixTQUFTSCw2REFBUyxDQUFDO0VBQ3JELE9BQU9RLFlBQVlBLENBQUEsRUFBRztJQUNsQixPQUFPLDhCQUE4QjtFQUN6QztFQUNBLE9BQU9DLFFBQVFBLENBQUEsRUFBRztJQUNkLE9BQU8sVUFBWTtBQUMzQjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0VBQ0Q7QUFDSjtBQUNPLE1BQU1MLHdCQUF3QixTQUFTSiw2REFBUyxDQUFDO0VBQ3BELE9BQU9RLFlBQVlBLENBQUEsRUFBRztJQUNsQixPQUFPLDZCQUE2QjtFQUN4QztFQUNBLE9BQU9DLFFBQVFBLENBQUEsRUFBRztJQUNkLE9BQU8sVUFBWTtBQUMzQjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0VBQ0Q7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL3RocmVlanMtc2hhZGVyLW1hdGVyaWFscy8uL2VzbS9jaHVuay9TdXJmYWNlTm9ybWFsQ2h1bmsuanM/MDVjNiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBHTFNMQ2h1bmsgfSBmcm9tIFwiLi9HTFNMQ2h1bmsuanNcIjtcbmV4cG9ydCBjbGFzcyBTdXJmYWNlTm9ybWFsQ2h1bmsgZXh0ZW5kcyBHTFNMQ2h1bmsge1xuICAgIHN0YXRpYyByZWdpc3RlckNodW5rKCkge1xuICAgICAgICBTdXJmYWNlTm9ybWFsVmFyeWluZ0NodW5rLnJlZ2lzdGVyQ2h1bmsoKTtcbiAgICAgICAgU3VyZmFjZU5vcm1hbFZlcnRleENodW5rLnJlZ2lzdGVyQ2h1bmsoKTtcbiAgICB9XG4gICAgc3RhdGljIGdldERlZmluZXMoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBVU0VfU1VSRkFDRV9OT1JNQUw6IGZhbHNlLFxuICAgICAgICB9O1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0VW5pZm9ybSgpIHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBTdXJmYWNlTm9ybWFsVmFyeWluZ0NodW5rIGV4dGVuZHMgR0xTTENodW5rIHtcbiAgICBzdGF0aWMgZ2V0Q2h1bmtOYW1lKCkge1xuICAgICAgICByZXR1cm4gXCJzdXJmYWNlX25vcm1hbF92YXJ5aW5nX2NodW5rXCI7XG4gICAgfVxuICAgIHN0YXRpYyBnZXRDaHVuaygpIHtcbiAgICAgICAgcmV0dXJuIC8qIEdMU0wgKi8gYFxuICAgICNpZmRlZiBVU0VfU1VSRkFDRV9OT1JNQUxcbiAgICAgIHZhcnlpbmcgdmVjMyBzdXJmYWNlTm9ybWFsO1xuICAgICNlbmRpZlxuICAgIGA7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIFN1cmZhY2VOb3JtYWxWZXJ0ZXhDaHVuayBleHRlbmRzIEdMU0xDaHVuayB7XG4gICAgc3RhdGljIGdldENodW5rTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIFwic3VyZmFjZV9ub3JtYWxfdmVydGV4X2NodW5rXCI7XG4gICAgfVxuICAgIHN0YXRpYyBnZXRDaHVuaygpIHtcbiAgICAgICAgcmV0dXJuIC8qIEdMU0wgKi8gYFxuICAgICNpZmRlZiBVU0VfU1VSRkFDRV9OT1JNQUxcbiAgICAgIHN1cmZhY2VOb3JtYWwgPSBub3JtYWxpemUoIHRyYW5zZm9ybWVkTm9ybWFsICk7XG4gICAgI2VuZGlmXG4gICAgYDtcbiAgICB9XG59XG4iXSwibmFtZXMiOlsiR0xTTENodW5rIiwiU3VyZmFjZU5vcm1hbENodW5rIiwicmVnaXN0ZXJDaHVuayIsIlN1cmZhY2VOb3JtYWxWYXJ5aW5nQ2h1bmsiLCJTdXJmYWNlTm9ybWFsVmVydGV4Q2h1bmsiLCJnZXREZWZpbmVzIiwiVVNFX1NVUkZBQ0VfTk9STUFMIiwiZ2V0VW5pZm9ybSIsImdldENodW5rTmFtZSIsImdldENodW5rIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///9516\n')},5309:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   u: () => (/* binding */ TilingFBMChunk)\n/* harmony export */ });\n/* harmony import */ var _GLSLChunk_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(3444);\n\nclass TilingFBMChunk extends _GLSLChunk_js__WEBPACK_IMPORTED_MODULE_0__/* .GLSLChunk */ .C {\n  static registerChunk() {\n    TilingFBMFunctionChunk.registerChunk();\n    TilingFBMUniformChunk.registerChunk();\n  }\n  static getUniform() {\n    return {\n      tiles: {\n        value: 2.0\n      },\n      hashLoop: {\n        value: 8.0\n      },\n      amp: {\n        value: 0.5\n      }\n    };\n  }\n  static getDefines() {\n    return {\n      NUM_OCTAVES: 3.0\n    };\n  }\n}\nclass TilingFBMFunctionChunk extends _GLSLChunk_js__WEBPACK_IMPORTED_MODULE_0__/* .GLSLChunk */ .C {\n  static getChunkName() {\n    return "tiling_fbm_function_chunk";\n  }\n  static getChunk() {\n    //language=GLSL\n    return /* GLSL */`\n        // Based On Dave_Hoskins \n        // https://www.shadertoy.com/view/4dlGW2\n        \n        float hash(in vec2 p, in float hashLoop)\n        {\n            p = mod(p, hashLoop);\n            return fract(1e4 * sin(17.0 * p.x + p.y * 0.1) * (0.1 + abs(sin(p.y * 13.0 + p.x))));\n        }\n        \n        float noise(in vec2 p, in float hashLoop)\n        {\n            p *= hashLoop;\n            vec2 f = fract(p);\n            vec2 u = f*f*(3.0-2.0*f);\n        \n            p = floor(p);\n            float a = hash(p, hashLoop);\n            float b = hash(p + vec2(1.0, 0.0), hashLoop);\n            float c = hash(p + vec2(0.0, 1.0), hashLoop);\n            float d = hash(p + vec2(1.0, 1.0), hashLoop);\n        \n            return mix(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;\n        }\n        \n        // Based On Dave_Hoskins \n        // https://www.shadertoy.com/view/4dlGW2\n        \n        float fbm(in vec2 p)\n        {\n            float v = 0.0;\n            \n            p = mod(p, hashLoop);\n            float a = amp;\n            float hashLoopVal = hashLoop;\n            \n            for (int i = 0; i < NUM_OCTAVES; i++){\n                v += noise(p, hashLoopVal) * a;\n                a *= .5;\n                hashLoopVal *= 2.0;\n            }\n            return v;\n        }\n    `;\n  }\n}\nclass TilingFBMUniformChunk extends _GLSLChunk_js__WEBPACK_IMPORTED_MODULE_0__/* .GLSLChunk */ .C {\n  static getChunkName() {\n    return "tiling_fbm_uniform_chunk";\n  }\n  static getChunk() {\n    //language=GLSL\n    return /* GLSL */`\n      uniform float tiles;  \n      uniform float hashLoop;\n      uniform float amp;\n    `;\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTMwOS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQTJDO0FBQ3BDLE1BQU1DLGNBQWMsU0FBU0QsNkRBQVMsQ0FBQztFQUMxQyxPQUFPRSxhQUFhQSxDQUFBLEVBQUc7SUFDbkJDLHNCQUFzQixDQUFDRCxhQUFhLENBQUMsQ0FBQztJQUN0Q0UscUJBQXFCLENBQUNGLGFBQWEsQ0FBQyxDQUFDO0VBQ3pDO0VBQ0EsT0FBT0csVUFBVUEsQ0FBQSxFQUFHO0lBQ2hCLE9BQU87TUFDSEMsS0FBSyxFQUFFO1FBQUVDLEtBQUssRUFBRTtNQUFJLENBQUM7TUFDckJDLFFBQVEsRUFBRTtRQUFFRCxLQUFLLEVBQUU7TUFBSSxDQUFDO01BQ3hCRSxHQUFHLEVBQUU7UUFBRUYsS0FBSyxFQUFFO01BQUk7SUFDdEIsQ0FBQztFQUNMO0VBQ0EsT0FBT0csVUFBVUEsQ0FBQSxFQUFHO0lBQ2hCLE9BQU87TUFDSEMsV0FBVyxFQUFFO0lBQ2pCLENBQUM7RUFDTDtBQUNKO0FBQ0EsTUFBTVIsc0JBQXNCLFNBQVNILDZEQUFTLENBQUM7RUFDM0MsT0FBT1ksWUFBWUEsQ0FBQSxFQUFHO0lBQ2xCLE9BQU8sMkJBQTJCO0VBQ3RDO0VBQ0EsT0FBT0MsUUFBUUEsQ0FBQSxFQUFHO0lBQ2Q7SUFDQSxPQUFPLFVBQVk7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztFQUNEO0FBQ0o7QUFDQSxNQUFNVCxxQkFBcUIsU0FBU0osNkRBQVMsQ0FBQztFQUMxQyxPQUFPWSxZQUFZQSxDQUFBLEVBQUc7SUFDbEIsT0FBTywwQkFBMEI7RUFDckM7RUFDQSxPQUFPQyxRQUFRQSxDQUFBLEVBQUc7SUFDZDtJQUNBLE9BQU8sVUFBWTtBQUMzQjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0VBQ0Q7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL3RocmVlanMtc2hhZGVyLW1hdGVyaWFscy8uL2VzbS9jaHVuay9UaWxpbmdGQk1DaHVuay5qcz9jYzY4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEdMU0xDaHVuayB9IGZyb20gXCIuL0dMU0xDaHVuay5qc1wiO1xuZXhwb3J0IGNsYXNzIFRpbGluZ0ZCTUNodW5rIGV4dGVuZHMgR0xTTENodW5rIHtcbiAgICBzdGF0aWMgcmVnaXN0ZXJDaHVuaygpIHtcbiAgICAgICAgVGlsaW5nRkJNRnVuY3Rpb25DaHVuay5yZWdpc3RlckNodW5rKCk7XG4gICAgICAgIFRpbGluZ0ZCTVVuaWZvcm1DaHVuay5yZWdpc3RlckNodW5rKCk7XG4gICAgfVxuICAgIHN0YXRpYyBnZXRVbmlmb3JtKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdGlsZXM6IHsgdmFsdWU6IDIuMCB9LFxuICAgICAgICAgICAgaGFzaExvb3A6IHsgdmFsdWU6IDguMCB9LFxuICAgICAgICAgICAgYW1wOiB7IHZhbHVlOiAwLjUgfSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgc3RhdGljIGdldERlZmluZXMoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBOVU1fT0NUQVZFUzogMy4wLFxuICAgICAgICB9O1xuICAgIH1cbn1cbmNsYXNzIFRpbGluZ0ZCTUZ1bmN0aW9uQ2h1bmsgZXh0ZW5kcyBHTFNMQ2h1bmsge1xuICAgIHN0YXRpYyBnZXRDaHVua05hbWUoKSB7XG4gICAgICAgIHJldHVybiBcInRpbGluZ19mYm1fZnVuY3Rpb25fY2h1bmtcIjtcbiAgICB9XG4gICAgc3RhdGljIGdldENodW5rKCkge1xuICAgICAgICAvL2xhbmd1YWdlPUdMU0xcbiAgICAgICAgcmV0dXJuIC8qIEdMU0wgKi8gYFxuICAgICAgICAvLyBCYXNlZCBPbiBEYXZlX0hvc2tpbnMgXG4gICAgICAgIC8vIGh0dHBzOi8vd3d3LnNoYWRlcnRveS5jb20vdmlldy80ZGxHVzJcbiAgICAgICAgXG4gICAgICAgIGZsb2F0IGhhc2goaW4gdmVjMiBwLCBpbiBmbG9hdCBoYXNoTG9vcClcbiAgICAgICAge1xuICAgICAgICAgICAgcCA9IG1vZChwLCBoYXNoTG9vcCk7XG4gICAgICAgICAgICByZXR1cm4gZnJhY3QoMWU0ICogc2luKDE3LjAgKiBwLnggKyBwLnkgKiAwLjEpICogKDAuMSArIGFicyhzaW4ocC55ICogMTMuMCArIHAueCkpKSk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGZsb2F0IG5vaXNlKGluIHZlYzIgcCwgaW4gZmxvYXQgaGFzaExvb3ApXG4gICAgICAgIHtcbiAgICAgICAgICAgIHAgKj0gaGFzaExvb3A7XG4gICAgICAgICAgICB2ZWMyIGYgPSBmcmFjdChwKTtcbiAgICAgICAgICAgIHZlYzIgdSA9IGYqZiooMy4wLTIuMCpmKTtcbiAgICAgICAgXG4gICAgICAgICAgICBwID0gZmxvb3IocCk7XG4gICAgICAgICAgICBmbG9hdCBhID0gaGFzaChwLCBoYXNoTG9vcCk7XG4gICAgICAgICAgICBmbG9hdCBiID0gaGFzaChwICsgdmVjMigxLjAsIDAuMCksIGhhc2hMb29wKTtcbiAgICAgICAgICAgIGZsb2F0IGMgPSBoYXNoKHAgKyB2ZWMyKDAuMCwgMS4wKSwgaGFzaExvb3ApO1xuICAgICAgICAgICAgZmxvYXQgZCA9IGhhc2gocCArIHZlYzIoMS4wLCAxLjApLCBoYXNoTG9vcCk7XG4gICAgICAgIFxuICAgICAgICAgICAgcmV0dXJuIG1peChhLCBiLCB1LngpICsgKGMgLSBhKSAqIHUueSAqICgxLjAgLSB1LngpICsgKGQgLSBiKSAqIHUueCAqIHUueTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gQmFzZWQgT24gRGF2ZV9Ib3NraW5zIFxuICAgICAgICAvLyBodHRwczovL3d3dy5zaGFkZXJ0b3kuY29tL3ZpZXcvNGRsR1cyXG4gICAgICAgIFxuICAgICAgICBmbG9hdCBmYm0oaW4gdmVjMiBwKVxuICAgICAgICB7XG4gICAgICAgICAgICBmbG9hdCB2ID0gMC4wO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBwID0gbW9kKHAsIGhhc2hMb29wKTtcbiAgICAgICAgICAgIGZsb2F0IGEgPSBhbXA7XG4gICAgICAgICAgICBmbG9hdCBoYXNoTG9vcFZhbCA9IGhhc2hMb29wO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBmb3IgKGludCBpID0gMDsgaSA8IE5VTV9PQ1RBVkVTOyBpKyspe1xuICAgICAgICAgICAgICAgIHYgKz0gbm9pc2UocCwgaGFzaExvb3BWYWwpICogYTtcbiAgICAgICAgICAgICAgICBhICo9IC41O1xuICAgICAgICAgICAgICAgIGhhc2hMb29wVmFsICo9IDIuMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB2O1xuICAgICAgICB9XG4gICAgYDtcbiAgICB9XG59XG5jbGFzcyBUaWxpbmdGQk1Vbmlmb3JtQ2h1bmsgZXh0ZW5kcyBHTFNMQ2h1bmsge1xuICAgIHN0YXRpYyBnZXRDaHVua05hbWUoKSB7XG4gICAgICAgIHJldHVybiBcInRpbGluZ19mYm1fdW5pZm9ybV9jaHVua1wiO1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0Q2h1bmsoKSB7XG4gICAgICAgIC8vbGFuZ3VhZ2U9R0xTTFxuICAgICAgICByZXR1cm4gLyogR0xTTCAqLyBgXG4gICAgICB1bmlmb3JtIGZsb2F0IHRpbGVzOyAgXG4gICAgICB1bmlmb3JtIGZsb2F0IGhhc2hMb29wO1xuICAgICAgdW5pZm9ybSBmbG9hdCBhbXA7XG4gICAgYDtcbiAgICB9XG59XG4iXSwibmFtZXMiOlsiR0xTTENodW5rIiwiVGlsaW5nRkJNQ2h1bmsiLCJyZWdpc3RlckNodW5rIiwiVGlsaW5nRkJNRnVuY3Rpb25DaHVuayIsIlRpbGluZ0ZCTVVuaWZvcm1DaHVuayIsImdldFVuaWZvcm0iLCJ0aWxlcyIsInZhbHVlIiwiaGFzaExvb3AiLCJhbXAiLCJnZXREZWZpbmVzIiwiTlVNX09DVEFWRVMiLCJnZXRDaHVua05hbWUiLCJnZXRDaHVuayJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///5309\n')},2197:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   D: () => (/* binding */ fragment),\n/* harmony export */   u: () => (/* binding */ vertex)\n/* harmony export */ });\n/**\n * メッシュが膨張しながら消えるエフェクト\n *\n * @see : https://github.com/mrdoob/three.js/blob/master/src/renderers/shaders/ShaderLib/meshphong.glsl.js\n */\n// language=GLSL\nconst vertex = /* GLSL */`\n#define PHONG\n\nvarying vec3 vViewPosition;\nvarying vec2 uvPosition;\n#include <mesh_position_varying>\n#include <surface_normal_varying_chunk>\n#include <__expansion_uniform_chunk>\n#include <tiling_fbm_uniform_chunk>\nuniform float scaleMax;\nuniform float time;\nuniform float progress;\nvarying float vFbm;\n#include <tiling_fbm_function_chunk>\n\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n    #include <mesh_position_vertex>\n    uvPosition = uv;\n\n    #include <uv_vertex>\n    #include <color_vertex>\n    #include <morphcolor_vertex>\n    #include <batching_vertex>\n\n    #include <beginnormal_vertex>\n    #include <morphnormal_vertex>\n    #include <skinbase_vertex>\n    #include <skinnormal_vertex>\n    #include <defaultnormal_vertex>\n    #include <normal_vertex>\n\n    #include <surface_normal_vertex_chunk>\n\n    #include <begin_vertex>\n    \n    vec2 uvFBM = uvPosition;\n    uvFBM.x = (\n         uvFBM.y > 0.99 \n      || uvFBM.y < 0.01\n    ) \n      ? 0.5\n      : uvFBM.x;\n        \n    vec2 q = vec2(0.0);\n    q.x = fbm( uvFBM + vec2(1.7,9.2) +.16  * time );\n    q.y = fbm( uvFBM + vec2(8.3,2.8) +.356 * time );\n\n    float bottom = clamp(progress-0.5, 0.0, 0.5) *2.0;\n    \n    vec2 pos = uvFBM * tiles;\n    float noise = fbm( pos + q ) * progress;\n    vFbm = clamp( noise + bottom, 0.0, 1.0);\n    vec3 vExpansion = normal * vFbm * scaleMax;\n    transformed += vExpansion;\n    \n    #include <morphtarget_vertex>\n    #include <skinning_vertex>\n    #include <displacementmap_vertex>\n    #include <project_vertex>\n    #include <logdepthbuf_vertex>\n    #include <clipping_planes_vertex>\n\n    vViewPosition = - mvPosition.xyz;\n\n    #include <worldpos_vertex>\n    #include <envmap_vertex>\n    #include <shadowmap_vertex>\n    #include <fog_vertex>\n\n}\n`;\n// language=GLSL\nconst fragment = /* GLSL */`\n#define PHONG\n\n#include <mesh_phong_uniform>\nvarying vec2 uvPosition;\n#include <mesh_position_varying>\n\nvarying float vFbm;\nuniform float progress;\nuniform vec3 dissolveColor;\nuniform vec3 dissolveOutColor;\n\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n// #include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n    #include <clipping_planes_fragment>\n  \n    #include <mesh_phong_diffuse_color>\n    \n    #include <logdepthbuf_fragment>\n    #include <__ShaderMaterial__map_fragment_begin_chunk>\n    #include <map_fragment>\n    #include <color_fragment>\n    \n    diffuseColor.rgb += dissolveColor.rgb * sin(progress*PI);\n    diffuseColor.rgb = mix (diffuseColor.rgb, dissolveOutColor.rgb, vFbm );\n    diffuseColor.a -= vFbm;\n    #include <mesh_phong_switching_alpha_map>\n\n    // #include <alphamap_fragment>\n    #include <alphatest_fragment>\n    #include <alphahash_fragment>\n    #include <specularmap_fragment>\n    #include <normal_fragment_begin>\n    #include <normal_fragment_maps>\n    #include <emissivemap_fragment>\n\n    // accumulation\n    #include <lights_phong_fragment>\n    #include <lights_fragment_begin>\n    #include <lights_fragment_maps>\n    #include <lights_fragment_end>\n\n    // modulation\n    #include <aomap_fragment>\n\n    vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n    \n    #include <envmap_fragment>\n    #include <opaque_fragment>\n    #include <tonemapping_fragment>\n    #include <colorspace_fragment>\n    #include <fog_fragment>\n    #include <premultiplied_alpha_fragment>\n    #include <dithering_fragment>\n    \n}`;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2197\n")},7146:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  FK: () => (/* reexport */ chunk_AnimationChunk/* AnimationChunk */.F),\n  Ns: () => (/* reexport */ Directions),\n  Sn: () => (/* reexport */ ExpansionDissolveMaterial),\n  qE: () => (/* reexport */ ShaderPhongMaterial_ShaderPhongMaterial),\n  uh: () => (/* reexport */ chunk_TilingFBMChunk/* TilingFBMChunk */.u)\n});\n\n// UNUSED EXPORTS: CellularNoiseMaterial, ContourMaterial, ContourNodeMaterial, CrossGridMaterial, ExpansionChunk, ExpansionMaterial, ExpansionUniformChunk, ExpansionVertexChunk, FBMDissolveMaterial, FBMFireMaterial, GLSLChunk, HalftoneGridMaterial, HexDissolveMaterial, HexGridChunk, HexGridMaterial, MapChunk, MaskMapChunk, MeshPhongChunk, OuterGlowMaterial, RepeatPatternChunk, ReversibleChunk, RimBasicMaterial, RimBasicNodeMaterial, RimEffectMaterial, ShaderBasicMaterial, ShaderLineMaterial, ShaderSpriteMaterial, SkyCloudMaterial, SolidClippingMaterial, SpriteChunk, SpriteCloudMaterial, SquareGridMaterial, SurfaceNormalChunk, SurfaceNormalVaryingChunk, SurfaceNormalVertexChunk, SwirlMaterial, WavyAnimationChunk\n\n// EXTERNAL MODULE: ./esm/ShaderPhongMaterial.glsl.js\nvar ShaderPhongMaterial_glsl = __webpack_require__(8238);\n// EXTERNAL MODULE: ./esm/chunk/AnimationChunk.js\nvar chunk_AnimationChunk = __webpack_require__(6837);\n// EXTERNAL MODULE: ./esm/chunk/ExpansionChunk.js\nvar ExpansionChunk = __webpack_require__(1530);\n// EXTERNAL MODULE: ./esm/chunk/MapChunk.js\nvar MapChunk = __webpack_require__(2089);\n// EXTERNAL MODULE: ./esm/chunk/MeshPhongChunk.js\nvar MeshPhongChunk = __webpack_require__(66);\n// EXTERNAL MODULE: ./esm/chunk/SurfaceNormalChunk.js\nvar chunk_SurfaceNormalChunk = __webpack_require__(9516);\n// EXTERNAL MODULE: ./esm/chunk/TilingFBMChunk.js\nvar chunk_TilingFBMChunk = __webpack_require__(5309);\n;// CONCATENATED MODULE: ./esm/chunk/WavyAnimationChunk.js\n\n\n/**\n * IWaveAnimatableインターフェースで定義されたアニメーションを実装するためのGLSLチャンク。\n * 実行にはグリッドid値が必要。idはvec2。\n * 結果はdiffuseColor.aに反映される。\n */\nclass WavyAnimationChunk_WavyAnimationChunk extends (/* unused pure expression or super */ null && (AnimationChunk)) {\n  static registerChunk() {\n    super.registerChunk();\n    WavyAnimationFragmentChunk.registerChunk();\n    WavyAnimationUniformChunk.registerChunk();\n  }\n  static getUniform() {\n    const uniforms = {\n      raisedBottom: {\n        value: 0.05\n      },\n      waveFrequency: {\n        value: 0.2\n      },\n      wavePow: {\n        value: 4.0\n      },\n      direction: {\n        value: Directions.vertical\n      }\n    };\n    return {\n      ...super.getUniform(),\n      ...uniforms\n    };\n  }\n}\nclass WavyAnimationFragmentChunk extends (/* unused pure expression or super */ null && (GLSLChunk)) {\n  static getChunkName() {\n    return "wavy_animation_fragment_chunk";\n  }\n  static getChunk() {\n    return /* GLSL */`\n    float distance = id.y;\n    if( direction == ${Directions.horizontal}){\n      distance = id.x;\n    }else if( direction == ${Directions.radial} ){\n      distance = length(id.xy);\n    }\n\n    float wavy = isAnimate\n      ? pow( sin( (distance * waveFrequency - time) ), wavePow) + raisedBottom\n      : 1.0;\n  \n    diffuseColor.a *= wavy;\n    `;\n  }\n}\nclass WavyAnimationUniformChunk extends (/* unused pure expression or super */ null && (GLSLChunk)) {\n  static getChunkName() {\n    return "wavy_animation_uniform_chunk";\n  }\n  static getChunk() {\n    return /* GLSL */`\n    uniform float raisedBottom;\n    uniform float waveFrequency;\n    uniform float wavePow;\n    uniform int direction;\n    `;\n  }\n}\n/**\n * Wavyアニメーションの波及方向を示すenum。\n */\nvar Directions;\n(function (Directions) {\n  Directions[Directions["vertical"] = 4] = "vertical";\n  Directions[Directions["horizontal"] = 3] = "horizontal";\n  /**\n   * id値(0,0)を中心に同心円状に波及する。\n   */\n  Directions[Directions["radial"] = 5] = "radial";\n})(Directions || (Directions = {}));\n;// CONCATENATED MODULE: ./esm/chunk/index.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n// EXTERNAL MODULE: ./node_modules/three/build/three.module.js\nvar three_module = __webpack_require__(6075);\n;// CONCATENATED MODULE: ./esm/ShaderPhongMaterial.js\n\n\n\n/**\n * MeshPhongMaterialに準じるShaderMaterialクラス。\n *\n * @see https://github.com/mrdoob/three.js/blob/76c64b23d422dcfb36a28353f45b1effa1f68c5a/src/renderers/shaders/ShaderLib.js#L53\n */\nclass ShaderPhongMaterial_ShaderPhongMaterial extends three_module/* ShaderMaterial */.jyz {\n  /**\n   * コンストラクタ。\n   * @param vertexShader\n   * @param fragmentShader\n   * @param parameters\n   */\n  constructor(vertexShader, fragmentShader, parameters) {\n    super(parameters);\n    this._opacity = 1.0;\n    parameters ??= {};\n    vertexShader ??= ShaderPhongMaterial_glsl/* vertex */.u;\n    fragmentShader ??= ShaderPhongMaterial_glsl/* fragment */.D;\n    this.initChunks();\n    this.initUniforms();\n    this.initDefines();\n    this.vertexShader = vertexShader;\n    this.fragmentShader = fragmentShader;\n    this.initDefaultSetting(parameters);\n  }\n  /**\n   * このMaterialに必要なuniformsを生成する。\n   */\n  static getBasicUniforms() {\n    return three_module/* UniformsUtils */.rDY.merge([three_module/* UniformsLib */.rBU.common, three_module/* UniformsLib */.rBU.specularmap, three_module/* UniformsLib */.rBU.envmap, three_module/* UniformsLib */.rBU.aomap, three_module/* UniformsLib */.rBU.lightmap, three_module/* UniformsLib */.rBU.emissivemap, three_module/* UniformsLib */.rBU.bumpmap, three_module/* UniformsLib */.rBU.normalmap, three_module/* UniformsLib */.rBU.displacementmap, three_module/* UniformsLib */.rBU.gradientmap, three_module/* UniformsLib */.rBU.fog, three_module/* UniformsLib */.rBU.lights, {\n      emissive: {\n        value: new three_module/* Color */.Ilk(0x000000)\n      },\n      specular: {\n        value: new three_module/* Color */.Ilk(0x111111)\n      },\n      shininess: {\n        value: 30\n      },\n      hasAlphaMap: {\n        value: false\n      }\n    }, chunk_SurfaceNormalChunk/* SurfaceNormalChunk */.q0.getUniform(), ExpansionChunk/* ExpansionChunk */.xe.getUniform(), MapChunk/* MapChunk */.H.getUniform()]);\n  }\n  /**\n   * ShaderChunkにこのマテリアルに必要なChunkを追加する。\n   */\n  initChunks() {\n    MeshPhongChunk/* MeshPhongChunk */.z.registerChunk();\n    chunk_SurfaceNormalChunk/* SurfaceNormalChunk */.q0.registerChunk();\n    ExpansionChunk/* ExpansionChunk */.xe.registerChunk();\n    MapChunk/* MapChunk */.H.registerChunk();\n  }\n  /**\n   * uniformsを初期化する。\n   */\n  initUniforms() {\n    this.uniforms = three_module/* UniformsUtils */.rDY.merge([ShaderPhongMaterial_ShaderPhongMaterial.getBasicUniforms(), ExpansionChunk/* ExpansionChunk */.xe.getUniform(), {}]);\n  }\n  /**\n   * definesを初期化する。\n   */\n  initDefines() {\n    this.defines = Object.assign({}, MeshPhongChunk/* MeshPhongChunk */.z.getDefines(), chunk_SurfaceNormalChunk/* SurfaceNormalChunk */.q0.getDefines(), ExpansionChunk/* ExpansionChunk */.xe.getDefines(), this.defines);\n  }\n  /**\n   * 1.オプションで指定されなかったパラメーター値を補完する。\n   * 2.uniformsに代入する必要のあるパラメーターを明示的に代入する。\n   *\n   * @param parameters\n   */\n  initDefaultSetting(parameters) {\n    this.uniformOpacity = this._opacity;\n    this.lights = true; //FIXME シェーダーがエラーを起こすのでlights設定は強制でON\n    // パラメータでtransparentフラグが指定されていない場合、デフォルトで透明にします。\n    // これは、フラグメントシェーダー内でalphaを利用してパターンの描画を行うためです。\n    if (parameters?.transparent == null) {\n      this.transparent = true;\n    }\n  }\n  /**\n   * MeshPhongマテリアルと互換性を持つために、colorプロパティはdiffuseへ代入される。\n   */\n  get color() {\n    return this.uniforms.diffuse.value;\n  }\n  set color(value) {\n    this.uniforms.diffuse.value = value;\n  }\n  /**\n   * 透明度\n   * @deprecated Use uniformOpacity, To be removed in version 0.3.0\n   * @see https://github.com/microsoft/TypeScript/pull/37894\n   */\n  //@ts-ignore : これはopacityプロパティとuniforms.opacityプロパティを同期するために利用されます。\n  get opacity() {\n    return this.uniformOpacity;\n  }\n  /**\n   * 透明度\n   */\n  get uniformOpacity() {\n    return this._opacity;\n  }\n  /**\n   * 透明度\n   * @param value\n   * @deprecated Use uniformOpacity, To be removed in version 0.3.0\n   * @see https://github.com/microsoft/TypeScript/pull/37894\n   */\n  //@ts-ignore : これはopacityプロパティとuniforms.opacityプロパティを同期するために利用されます。\n  set opacity(value) {\n    this.uniformOpacity = value;\n  }\n  /**\n   * 透明度\n   * opacityは基底クラスのMaterialのコンストラクタ内で明示的に1.0が代入される。\n   * この段階でuniformsはundefinedなので、そのままでは初期化できない。\n   * このsetterでは受け取った値をprivate変数に保存して、初期化後にuniformsに再代入する。\n   * @param value\n   */\n  set uniformOpacity(value) {\n    this._opacity = value;\n    if (this.uniforms?.opacity) {\n      this.uniforms.opacity.value = value;\n    }\n  }\n  get emissive() {\n    return this.uniforms.emissive.value;\n  }\n  set emissive(value) {\n    this.uniforms.emissive.value = value;\n  }\n  get map() {\n    return MapChunk/* MapChunk */.H.getMap(this);\n  }\n  set map(val) {\n    MapChunk/* MapChunk */.H.setMap(this, val);\n    this.onSetMap(val);\n  }\n  onSetMap(val) {}\n  get alphaMap() {\n    return this.uniforms.alphaMap.value;\n  }\n  set alphaMap(value) {\n    this.uniforms.alphaMap.value = value;\n    this.uniforms.hasAlphaMap.value = value != null;\n    this.onSetAlphaMap(value);\n  }\n  onSetAlphaMap(value) {}\n  /**\n   * 発光状態のために、マテリアルの設定をまとめて変更する。\n   * {@link https://stackoverflow.com/questions/37647853/three-js-depthwrite-vs-depthtest-for-transparent-canvas-texture-map-on-three-p}\n   */\n  startGlow() {\n    this.alphaTest = 0.0;\n    this.depthWrite = false;\n    this.blending = three_module/* AdditiveBlending */.WMw;\n  }\n}\n;// CONCATENATED MODULE: ./esm/ShaderSpriteMaterial.js\n\n\n\nclass ShaderSpriteMaterial_ShaderSpriteMaterial extends (/* unused pure expression or super */ null && (ShaderMaterial)) {\n  /**\n   * コンストラクタ。\n   * @param vertexShader\n   * @param fragmentShader\n   * @param parameters\n   */\n  constructor(vertexShader, fragmentShader, parameters) {\n    super(parameters);\n    /**\n     * @default true\n     */\n    this.sizeAttenuation = true;\n    this._opacity = 1.0;\n    parameters ??= {};\n    vertexShader ??= vertex;\n    fragmentShader ??= fragment;\n    this.initChunks();\n    this.initUniforms();\n    this.initDefines();\n    this.vertexShader = vertexShader;\n    this.fragmentShader = fragmentShader;\n    this.initDefaultSetting(parameters);\n  }\n  /**\n   * ShaderChunkにこのマテリアルに必要なChunkを追加する。\n   */\n  initChunks() {\n    SpriteChunk.registerChunk();\n  }\n  /**\n   * uniformsを初期化する。\n   */\n  initUniforms() {\n    this.uniforms = UniformsUtils.merge([SpriteChunk.getUniform(), {\n      uvTransform: {\n        value: new Matrix3()\n      }\n    }]);\n  }\n  /**\n   * definesを初期化する。\n   */\n  initDefines() {\n    this.defines = Object.assign({}, SpriteChunk.getDefines(), this.defines);\n  }\n  /**\n   * 1.オプションで指定されなかったパラメーター値を補完する。\n   * 2.uniformsに代入する必要のあるパラメーターを明示的に代入する。\n   *\n   * @param parameters\n   */\n  initDefaultSetting(parameters) {\n    this.uniformOpacity = this._opacity;\n  }\n  /**\n   * 透明度\n   * @deprecated Use uniformOpacity, To be removed in version 0.3.0\n   * @see https://github.com/microsoft/TypeScript/pull/37894\n   */\n  //@ts-ignore : これはopacityプロパティとuniforms.opacityプロパティを同期するために利用されます。\n  get opacity() {\n    return this._opacity;\n  }\n  /**\n   * 透明度\n   */\n  get uniformOpacity() {\n    return this._opacity;\n  }\n  /**\n   * 透明度\n   * @deprecated Use uniformOpacity, To be removed in version 0.3.0\n   * @param value\n   */\n  //@ts-ignore : これはopacityプロパティとuniforms.opacityプロパティを同期するために利用されます。\n  set opacity(value) {\n    this.uniformOpacity = value;\n  }\n  /**\n   * 透明度\n   * opacityは基底クラスのMaterialのコンストラクタ内で明示的に1.0が代入される。\n   * この段階でuniformsはundefinedなので、そのままでは初期化できない。\n   * このsetterでは受け取った値をprivate変数に保存して、初期化後にuniformsに再代入する。\n   * @param value\n   */\n  set uniformOpacity(value) {\n    this._opacity = value;\n    if (this.uniforms?.opacity) {\n      this.uniforms.opacity.value = value;\n    }\n  }\n  /**\n   * Spriteマテリアルと互換性を持つために、colorプロパティはdiffuseへ代入される。\n   */\n  get color() {\n    return this.uniforms.diffuse.value;\n  }\n  set color(value) {\n    this.uniforms.diffuse.value = value;\n  }\n  get center() {\n    return this.uniforms.center.value;\n  }\n  set center(value) {\n    this.uniforms.center.value = value;\n  }\n  get rotation() {\n    return this.uniforms.rotation.value;\n  }\n  set rotation(value) {\n    this.uniforms.rotation.value = value;\n  }\n  get uvTransform() {\n    return this.uniforms.uvTransform.value;\n  }\n  set uvTransform(value) {\n    this.uniforms.uvTransform.value = value;\n  }\n  get map() {\n    return this.uniforms.map.value;\n  }\n  set map(value) {\n    this.uniforms.map.value = value;\n  }\n  get alphaMap() {\n    return this.uniforms.alphaMap.value;\n  }\n  set alphaMap(value) {\n    this.uniforms.alphaMap.value = value;\n  }\n}\n;// CONCATENATED MODULE: ./esm/ShaderBasicMaterial.js\n\n\n\n/**\n * MeshBasicMaterialに準じたShaderMaterial\n */\nclass ShaderBasicMaterial_ShaderBasicMaterial extends (/* unused pure expression or super */ null && (ShaderMaterial)) {\n  /**\n   * @param vertexShader\n   * @param fragmentShader\n   * @param parameters\n   */\n  constructor(vertexShader, fragmentShader, parameters) {\n    super(parameters);\n    this._opacity = 1.0;\n    this.uniforms = ShaderBasicMaterial_ShaderBasicMaterial.getBasicUniforms();\n    this.vertexShader = vertexShader ?? vertex;\n    this.fragmentShader = fragmentShader ?? fragment;\n    SurfaceNormalChunk.registerChunk();\n    this.initDefines();\n    this.uniformOpacity = this._opacity;\n  }\n  /**\n   * このMaterialに必要なuniformsを生成する。\n   *\n   * @see https://github.com/mrdoob/three.js/blob/0c26bb4bb8220126447c8373154ac045588441de/src/renderers/shaders/ShaderLib.js#L11\n   */\n  static getBasicUniforms() {\n    return UniformsUtils.merge([UniformsLib.common, UniformsLib.specularmap, UniformsLib.envmap, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.fog]);\n  }\n  get color() {\n    return this.uniforms.diffuse.value;\n  }\n  set color(value) {\n    this.uniforms.diffuse.value = value;\n  }\n  get uniformOpacity() {\n    return this._opacity;\n  }\n  set uniformOpacity(value) {\n    this._opacity = value;\n    if (this.uniforms?.opacity) {\n      this.uniforms.opacity.value = value;\n    }\n  }\n  initDefines() {\n    this.defines = Object.assign({}, SurfaceNormalChunk.getDefines(), this.defines);\n  }\n}\n;// CONCATENATED MODULE: ./esm/contour/ContourMaterial.js\n\n\n\n\n/**\n * テクスチャを等高線状にマップするマテリアル。\n * マッピング以外の機能はMeshPhongMaterialに準じる。\n */\nclass ContourMaterial extends (/* unused pure expression or super */ null && (ShaderPhongMaterial)) {\n  get map() {\n    return this._map;\n  }\n  loadMap(url, geo) {\n    this._map = new TextureLoader().load(url, texture => {\n      if (this.uniforms && this.uniforms.map) {\n        this.uniforms.map.value = texture;\n      }\n    });\n    geo.computeBoundingBox();\n    this.uniforms.top.value = geo.boundingBox.max.y;\n    this.uniforms.bottom.value = geo.boundingBox.min.y;\n  }\n  constructor(parameters) {\n    super(vertex, fragment, parameters);\n  }\n  initDefines() {\n    super.initDefines();\n    this.defines.USE_MESH_POSITION = true;\n  }\n  initUniforms() {\n    this.uniforms = UniformsUtils.merge([ShaderPhongMaterial.getBasicUniforms(), {\n      top: {\n        value: 1.0\n      },\n      bottom: {\n        value: -1.0\n      }\n    }]);\n  }\n  initDefaultSetting(parameters) {\n    super.initDefaultSetting(parameters);\n    if (this.transparent && parameters.alphaTest == null) {\n      this.alphaTest = 0.5;\n    }\n    if (parameters.side == null) {\n      this.side = DoubleSide;\n    } else {\n      this.side = parameters.side;\n    }\n  }\n}\n// EXTERNAL MODULE: ./node_modules/three/examples/jsm/nodes/Nodes.js + 189 modules\nvar Nodes = __webpack_require__(3764);\n;// CONCATENATED MODULE: ./esm/contour/ContourNodeMaterial.js\n\nclass ContourNodeMaterial extends (/* unused pure expression or super */ null && (MeshPhongNodeMaterial)) {\n  constructor() {\n    super();\n    this.scaleY = uniform(2.0);\n    this.smoothMin = uniform(0.93);\n    this.smoothMax = uniform(1.0);\n    this.transparent = true;\n    this.side = 2;\n    this.opacityNode = materialOpacity.mul(cos(positionWorld.y.mul(this.scaleY)).smoothstep(this.smoothMin, this.smoothMax));\n  }\n}\n;// CONCATENATED MODULE: ./esm/GridMaterial.js\n\n\n\n/**\n * グリッド状に分割されたマテリアル。\n */\nclass GridMaterial_GridMaterial extends (/* unused pure expression or super */ null && (ShaderPhongMaterial)) {\n  get division() {\n    return this.uniforms.division.value;\n  }\n  set division(value) {\n    this.uniforms.division.value = value;\n  }\n  get divisionScaleX() {\n    return this.uniforms.divisionScaleX.value;\n  }\n  set divisionScaleX(value) {\n    this.uniforms.divisionScaleX.value = value;\n  }\n  get isReversed() {\n    return this.uniforms.isReversed.value;\n  }\n  set isReversed(value) {\n    this.uniforms.isReversed.value = value;\n  }\n  get maskTexture() {\n    return MaskMapChunk.getMaskTexture(this);\n  }\n  set maskTexture(val) {\n    MaskMapChunk.setMaskTexture(this, val);\n  }\n  initChunks() {\n    super.initChunks();\n    MaskMapChunk.registerChunk();\n    ReversibleChunk.registerChunk();\n  }\n  static getBasicUniforms() {\n    return UniformsUtils.merge([ShaderPhongMaterial.getBasicUniforms(), ReversibleChunk.getUniform(), MaskMapChunk.getUniform(), RepeatPatternChunk.getUniform()]);\n  }\n}\n// EXTERNAL MODULE: ./node_modules/@masatomakino/raf-ticker/esm/index.js + 3 modules\nvar esm = __webpack_require__(5429);\n;// CONCATENATED MODULE: ./esm/WavyGridMaterial.js\n\n\n\n\n/**\n * グリッド状に分割され、Wavyアニメーションを行うマテリアル。\n */\nclass WavyGridMaterial_WavyGridMaterial extends (/* unused pure expression or super */ null && (GridMaterial)) {\n  addTime(delta) {\n    AnimationChunk.addTime(this, delta);\n  }\n  /**\n   * 波アニメーションを行うか否か。\n   */\n  get isAnimate() {\n    return this.uniforms.isAnimate.value;\n  }\n  set isAnimate(value) {\n    this.uniforms.isAnimate.value = value;\n    if (this.isAnimate) {\n      this.startAnimation();\n    } else {\n      this.stopAnimation();\n    }\n  }\n  /**\n   * 波の振幅\n   * 1の場合、幅1ヘックス\n   * 0.5の場合、幅2ヘックスになる\n   */\n  get waveFrequency() {\n    return this.uniforms.waveFrequency.value;\n  }\n  set waveFrequency(value) {\n    this.uniforms.waveFrequency.value = value;\n  }\n  get wavePow() {\n    return this.uniforms.wavePow.value;\n  }\n  set wavePow(value) {\n    this.uniforms.wavePow.value = value;\n  }\n  /**\n   * 明るさの底上げ\n   */\n  get raisedBottom() {\n    return this.uniforms.raisedBottom.value;\n  }\n  set raisedBottom(value) {\n    this.uniforms.raisedBottom.value = value;\n  }\n  /**\n   * 波が発生する方角\n   */\n  get direction() {\n    return this.uniforms.direction.value;\n  }\n  set direction(value) {\n    this.uniforms.direction.value = value;\n  }\n  constructor(vertexShader, fragmentShader, parameters) {\n    super(vertexShader, fragmentShader, parameters);\n    /**\n     * 波の速度\n     * 0.5にすると1の半分の速度になる。\n     * マイナスを指定すると、波の進行方向が反転する。\n     */\n    this.speed = -0.5;\n    /*\n     * IAnimatable implements\n     */\n    this.animationListener = e => {\n      this.addTime(e.delta / 1000);\n    };\n    this.isAnimate = this.isAnimate; //reset and start animation\n  }\n  initChunks() {\n    super.initChunks();\n    WavyAnimationChunk.registerChunk();\n  }\n  static getBasicUniforms() {\n    return UniformsUtils.merge([super.getBasicUniforms(), ReversibleChunk.getUniform(), WavyAnimationChunk.getUniform(), MaskMapChunk.getUniform()]);\n  }\n  initDefaultSetting(parameters) {\n    super.initDefaultSetting(parameters);\n  }\n  startAnimation() {\n    RAFTicker.on("onBeforeTick", this.animationListener);\n  }\n  stopAnimation() {\n    RAFTicker.off("onBeforeTick", this.animationListener);\n  }\n}\n;// CONCATENATED MODULE: ./esm/crossGrid/CrossGridMaterial.js\n\n\n\n\n/**\n * 十字線を正方形グリッドの中心に描画するマテリアル。\n */\nclass CrossGridMaterial extends (/* unused pure expression or super */ null && (WavyGridMaterial)) {\n  /**\n   * グリッド線の太さ\n   * 0.0で線なし、0.5でグリッド面なしになる。\n   */\n  get gridWeight() {\n    return this.uniforms.gridWeight.value;\n  }\n  set gridWeight(value) {\n    this.uniforms.gridWeight.value = value;\n  }\n  get radius() {\n    return this.uniforms.radius.value;\n  }\n  set radius(value) {\n    this.uniforms.radius.value = value;\n  }\n  constructor(parameters) {\n    super(vertex, fragment, parameters);\n  }\n  initUniforms() {\n    this.uniforms = UniformsUtils.merge([WavyGridMaterial.getBasicUniforms(), {\n      gridWeight: {\n        value: 0.03\n      },\n      radius: {\n        value: 0.15\n      }\n    }]);\n  }\n}\n;// CONCATENATED MODULE: ./esm/halftoneGrid/HalftoneGridMaterial.js\n\n\n\n\n/**\n * MaskMapをハーフトーン分解するマテリアル\n */\nclass HalftoneGridMaterial extends (/* unused pure expression or super */ null && (WavyGridMaterial)) {\n  get radius() {\n    return this.uniforms.radius.value;\n  }\n  set radius(value) {\n    this.uniforms.radius.value = value;\n  }\n  constructor(parameters) {\n    super(vertex, fragment, parameters);\n  }\n  initUniforms() {\n    this.uniforms = UniformsUtils.merge([WavyGridMaterial.getBasicUniforms(), {\n      radius: {\n        value: 0.75\n      }\n    }]);\n  }\n}\n;// CONCATENATED MODULE: ./esm/hexGrid/HexGridMaterial.js\n\n\n\n\n\n/**\n * 六角形グリッドマテリアル\n */\nclass HexGridMaterial extends (/* unused pure expression or super */ null && (WavyGridMaterial)) {\n  /**\n   * グリッド線の太さ\n   * 0.0で線なし、0.5でグリッド面なしになる。\n   */\n  get gridWeight() {\n    return this.uniforms.gridWeight.value;\n  }\n  set gridWeight(value) {\n    this.uniforms.gridWeight.value = value;\n  }\n  constructor(parameters) {\n    super(vertex, fragment, parameters);\n  }\n  initUniforms() {\n    this.uniforms = UniformsUtils.merge([WavyGridMaterial.getBasicUniforms(), {\n      gridWeight: {\n        value: 0.03\n      }\n    }]);\n  }\n  initChunks() {\n    super.initChunks();\n    HexGridChunk.registerChunk();\n  }\n}\n;// CONCATENATED MODULE: ./esm/squareGrid/SquareGridMaterial.js\n\n\n\n\n/**\n * 四角形グリッドマテリアル\n */\nclass SquareGridMaterial extends (/* unused pure expression or super */ null && (WavyGridMaterial)) {\n  /**\n   * グリッド線の太さ\n   * 0.0で線なし、0.5でグリッド面なしになる。\n   */\n  get gridWeight() {\n    return this.uniforms.gridWeight.value;\n  }\n  set gridWeight(value) {\n    this.uniforms.gridWeight.value = value;\n  }\n  constructor(parameters) {\n    super(vertex, fragment, parameters);\n  }\n  initUniforms() {\n    this.uniforms = UniformsUtils.merge([WavyGridMaterial.getBasicUniforms(), {\n      gridWeight: {\n        value: 0.03\n      }\n    }]);\n  }\n}\n;// CONCATENATED MODULE: ./esm/skyCloud/SkyCloudMaterial.js\n\n\n\n\n\n\nclass SkyCloudMaterial extends (/* unused pure expression or super */ null && (ShaderPhongMaterial)) {\n  get scale() {\n    return this.uniforms.scale.value;\n  }\n  set scale(value) {\n    this.uniforms.scale.value = value;\n  }\n  /*\n   * implements IAnimatable\n   */\n  addTime(delta) {\n    AnimationChunk.addTime(this, delta);\n  }\n  get isAnimate() {\n    return this.uniforms.isAnimate.value;\n  }\n  set isAnimate(value) {\n    this.uniforms.isAnimate.value = value;\n    if (this.isAnimate) {\n      this.startAnimation();\n    } else {\n      this.stopAnimation();\n    }\n  }\n  get skyColor() {\n    return this.uniforms.skyColor.value;\n  }\n  set skyColor(value) {\n    this.uniforms.skyColor.value = value;\n  }\n  get cloudVolume() {\n    return this.uniforms.cloudVolume.value;\n  }\n  set cloudVolume(value) {\n    this.uniforms.cloudVolume.value = value;\n  }\n  get cloudBottomVolume() {\n    return this.uniforms.cloudBottomVolume.value;\n  }\n  set cloudBottomVolume(value) {\n    this.uniforms.cloudBottomVolume.value = value;\n  }\n  get cloudBottomSaturation() {\n    return this.uniforms.cloudBottomSaturation.value;\n  }\n  set cloudBottomSaturation(value) {\n    this.uniforms.cloudBottomSaturation.value = value;\n  }\n  get cloudTransformSpeed() {\n    return this.uniforms.cloudTransformSpeed.value;\n  }\n  set cloudTransformSpeed(value) {\n    this.uniforms.cloudTransformSpeed.value = value;\n  }\n  /**\n   *\n   * @param parameters\n   */\n  constructor(parameters) {\n    super(vertex, fragment, parameters);\n    /**\n     * 波の速度\n     * 0.5にすると1の半分の速度になる。\n     * マイナスを指定すると、波の進行方向が反転する。\n     */\n    this.speed = -0.02;\n    /*\n     * IAnimatable implements\n     */\n    this.animationListener = e => {\n      this.addTime(e.delta / 1000);\n    };\n    this.isAnimate = this.isAnimate; //reset and start animation\n  }\n  initChunks() {\n    super.initChunks();\n    AnimationChunk.registerChunk();\n  }\n  initUniforms() {\n    this.uniforms = UniformsUtils.merge([ShaderPhongMaterial.getBasicUniforms(), AnimationChunk.getUniform(), {\n      scale: {\n        value: 3.0\n      },\n      cloudTransformSpeed: {\n        value: 0.15\n      },\n      cloudVolume: {\n        value: 16.0\n      },\n      cloudBottomVolume: {\n        value: 0.08\n      },\n      cloudBottomSaturation: {\n        value: 0.5\n      },\n      skyColor: {\n        value: new Color(0.101961, 0.619608, 0.666667)\n      }\n    }]);\n  }\n  startAnimation() {\n    RAFTicker.on("onBeforeTick", this.animationListener);\n  }\n  stopAnimation() {\n    RAFTicker.off("onBeforeTick", this.animationListener);\n  }\n}\n;// CONCATENATED MODULE: ./esm/fbmDissolve/FBMDissolveMaterial.js\n\n\n\n\n\nclass FBMDissolveMaterial extends (/* unused pure expression or super */ null && (ShaderPhongMaterial)) {\n  get tiles() {\n    return this.uniforms.tiles.value;\n  }\n  set tiles(value) {\n    this.uniforms.tiles.value = value;\n  }\n  get hashLoop() {\n    return this.uniforms.hashLoop.value;\n  }\n  set hashLoop(value) {\n    this.uniforms.hashLoop.value = value;\n  }\n  get amp() {\n    return this.uniforms.amp.value;\n  }\n  set amp(value) {\n    this.uniforms.amp.value = value;\n  }\n  get progress() {\n    return this.uniforms.progress.value;\n  }\n  set progress(value) {\n    this.uniforms.progress.value = value;\n  }\n  get edgeWeight() {\n    return this.uniforms.edgeWeight.value;\n  }\n  set edgeWeight(value) {\n    this.uniforms.edgeWeight.value = value;\n  }\n  get edgeColor() {\n    return this.uniforms.edgeColor.value;\n  }\n  set edgeColor(value) {\n    this.uniforms.edgeColor.value = value;\n  }\n  /**\n   *\n   * @param parameters\n   */\n  constructor(parameters) {\n    super(vertex, fragment, parameters);\n  }\n  initUniforms() {\n    this.uniforms = UniformsUtils.merge([ShaderPhongMaterial.getBasicUniforms(), TilingFBMChunk.getUniform(), {\n      progress: {\n        value: 0.0\n      },\n      edgeWeight: {\n        value: 0.1\n      },\n      edgeColor: {\n        value: new Color(1.0, 1.0, 1.0)\n      }\n    }]);\n  }\n  initChunks() {\n    super.initChunks();\n    TilingFBMChunk.registerChunk();\n  }\n  /**\n   * definesを初期化する。\n   */\n  initDefines() {\n    super.initDefines();\n    this.defines = Object.assign({}, TilingFBMChunk.getDefines(), this.defines);\n  }\n}\n;// CONCATENATED MODULE: ./esm/fbmFire/FBMFireMaterial.js\n\n\n\n\n\n\nclass FBMFireMaterial extends (/* unused pure expression or super */ null && (ShaderPhongMaterial)) {\n  get tiles() {\n    return this.uniforms.tiles.value;\n  }\n  set tiles(value) {\n    this.uniforms.tiles.value = value;\n  }\n  get hashLoop() {\n    return this.uniforms.hashLoop.value;\n  }\n  set hashLoop(value) {\n    this.uniforms.hashLoop.value = value;\n  }\n  get amp() {\n    return this.uniforms.amp.value;\n  }\n  set amp(value) {\n    this.uniforms.amp.value = value;\n  }\n  /*\n   * IAnimatable implements\n   */\n  addTime(delta) {\n    AnimationChunk.addTime(this, delta);\n  }\n  /**\n   * アニメーションを行うか否か。\n   */\n  get isAnimate() {\n    return this.uniforms.isAnimate.value;\n  }\n  set isAnimate(value) {\n    this.uniforms.isAnimate.value = value;\n    if (this.isAnimate) {\n      this.startAnimation();\n    } else {\n      this.stopAnimation();\n    }\n  }\n  get strength() {\n    return this.uniforms.strength.value;\n  }\n  set strength(value) {\n    this.uniforms.strength.value = value;\n  }\n  get bloom() {\n    return this.uniforms.bloom.value;\n  }\n  set bloom(value) {\n    this.uniforms.bloom.value = value;\n  }\n  get rimPow() {\n    return this.uniforms.rimPow.value;\n  }\n  set rimPow(value) {\n    this.uniforms.rimPow.value = value;\n  }\n  get rimStrength() {\n    return this.uniforms.rimStrength.value;\n  }\n  set rimStrength(value) {\n    this.uniforms.rimStrength.value = value;\n  }\n  /**\n   *\n   * @param parameters\n   */\n  constructor(parameters) {\n    super(vertex, fragment, parameters);\n    /**\n     * 波の速度\n     * 0.5にすると1の半分の速度になる。\n     * マイナスを指定すると、波の進行方向が反転する。\n     */\n    this.speed = -0.5;\n    /*\n     * IAnimatable implements\n     */\n    this.animationListener = e => {\n      this.addTime(e.delta / 1000);\n    };\n    this.isAnimate = this.isAnimate; //reset and start animation\n  }\n  initUniforms() {\n    this.uniforms = UniformsUtils.merge([ShaderPhongMaterial.getBasicUniforms(), TilingFBMChunk.getUniform(), AnimationChunk.getUniform(), {\n      strength: {\n        value: 0.45\n      },\n      bloom: {\n        value: 0.1\n      },\n      rimStrength: {\n        value: 1.0\n      },\n      rimPow: {\n        value: 1.0\n      }\n    }]);\n  }\n  initChunks() {\n    super.initChunks();\n    TilingFBMChunk.registerChunk();\n    AnimationChunk.registerChunk();\n  }\n  initDefines() {\n    super.initDefines();\n    this.defines = Object.assign({}, TilingFBMChunk.getDefines(), this.defines);\n    this.defines.USE_SURFACE_NORMAL = true;\n  }\n  initDefaultSetting(parameters) {\n    super.initDefaultSetting(parameters);\n  }\n  startAnimation() {\n    RAFTicker.on("onBeforeTick", this.animationListener);\n  }\n  stopAnimation() {\n    RAFTicker.off("onBeforeTick", this.animationListener);\n  }\n}\n;// CONCATENATED MODULE: ./esm/rimBasic/RimBasicMaterial.js\n\n\n\nclass RimBasicMaterial extends (/* unused pure expression or super */ null && (ShaderBasicMaterial)) {\n  get rimPow() {\n    return this.uniforms.rimPow.value;\n  }\n  set rimPow(value) {\n    this.uniforms.rimPow.value = value;\n  }\n  get rimStrength() {\n    return this.uniforms.rimStrength.value;\n  }\n  set rimStrength(value) {\n    this.uniforms.rimStrength.value = value;\n  }\n  get rimColor() {\n    return this.uniforms.rimColor.value;\n  }\n  set rimColor(value) {\n    this.uniforms.rimColor.value = value;\n  }\n  get insidePow() {\n    return this.uniforms.insidePow.value;\n  }\n  set insidePow(value) {\n    this.uniforms.insidePow.value = value;\n  }\n  get insideStrength() {\n    return this.uniforms.insideStrength.value;\n  }\n  set insideStrength(value) {\n    this.uniforms.insideStrength.value = value;\n  }\n  get insideColor() {\n    return this.uniforms.insideColor.value;\n  }\n  set insideColor(value) {\n    this.uniforms.insideColor.value = value;\n  }\n  constructor(param) {\n    super(null, fragment, param);\n    this.uniforms = UniformsUtils.merge([ShaderBasicMaterial.getBasicUniforms(), RimBasicMaterial.getRimUniforms()]);\n    this.initDefines();\n  }\n  static getRimUniforms() {\n    return UniformsUtils.merge([{\n      rimColor: {\n        value: new Color(1.0, 1.0, 1.0)\n      },\n      rimStrength: {\n        value: 1.0\n      },\n      rimPow: {\n        value: 1.0\n      },\n      insideColor: {\n        value: new Color(0.0, 0.0, 0.0)\n      },\n      insideStrength: {\n        value: 1.0\n      },\n      insidePow: {\n        value: 1.0\n      }\n    }]);\n  }\n  initDefines() {\n    super.initDefines();\n    this.defines.USE_SURFACE_NORMAL = true;\n  }\n}\n;// CONCATENATED MODULE: ./esm/tsl/RimFunction.js\n// Three.js Transpiler r165\n\nconst RimFunction_rimEffect = (0,Nodes/* tslFn */.l5R)(([rimColor, rimPow, rimStrength, insideColor, insidePow, insideStrength]) => {\n  return rimAngleEffect(rimColor, rimPow, rimStrength, insideColor, insidePow, insideStrength, (0,Nodes/* vec3 */.R3C)(0.0, 0.0, 1.0));\n});\nconst rimAngleEffect = (0,Nodes/* tslFn */.l5R)(([rimColor, rimPow, rimStrength, insideColor, insidePow, insideStrength, angle]) => {\n  const addColor = (0,Nodes/* vec3 */.R3C)(0.0, 0.0, 0.0).toVar();\n  const rimAngle = (0,Nodes/* max */.Fp7)(0.0, Nodes/* transformedNormalView */.xAL.dot((0,Nodes/* vec3 */.R3C)(angle)));\n  const rimGlow = (0,Nodes/* sub */.luU)(1.0, rimAngle);\n  rimGlow.assign((0,Nodes/* pow */.sQ3)(rimGlow, rimPow));\n  addColor.rgb.addAssign(rimColor.mul(rimGlow.mul(rimStrength)));\n  const insideGlow = (0,Nodes/* pow */.sQ3)(rimAngle, insidePow);\n  addColor.rgb.addAssign(insideColor.mul(insideGlow.mul(insideStrength)));\n  return addColor;\n});\n;// CONCATENATED MODULE: ./esm/rimBasic/RimBasicNodeMaterial.js\n\n\n\nclass RimBasicNodeMaterial extends (/* unused pure expression or super */ null && (MeshBasicNodeMaterial)) {\n  constructor() {\n    super();\n    this.rimColor = uniform(new Color(1, 1, 1));\n    this.rimStrength = uniform(1.0);\n    this.rimPow = uniform(1.0);\n    this.insideColor = uniform(new Color(0.0, 0.0, 0.0));\n    this.insideStrength = uniform(1.0);\n    this.insidePow = uniform(1.0);\n    this.colorNode = materialColor.add(rimEffect(this.rimColor, this.rimPow, this.rimStrength, this.insideColor, this.insidePow, this.insideStrength));\n  }\n}\n;// CONCATENATED MODULE: ./esm/rimEffect/RimEffectMaterial.js\n\n\n\nclass RimEffectMaterial_RimEffectMaterial extends (/* unused pure expression or super */ null && (ShaderPhongMaterial)) {\n  get rimPow() {\n    return this.uniforms.rimPow.value;\n  }\n  set rimPow(value) {\n    this.uniforms.rimPow.value = value;\n  }\n  get rimStrength() {\n    return this.uniforms.rimStrength.value;\n  }\n  set rimStrength(value) {\n    this.uniforms.rimStrength.value = value;\n  }\n  get rimColor() {\n    return this.uniforms.rimColor.value;\n  }\n  set rimColor(value) {\n    this.uniforms.rimColor.value = value;\n  }\n  get insidePow() {\n    return this.uniforms.insidePow.value;\n  }\n  set insidePow(value) {\n    this.uniforms.insidePow.value = value;\n  }\n  get insideStrength() {\n    return this.uniforms.insideStrength.value;\n  }\n  set insideStrength(value) {\n    this.uniforms.insideStrength.value = value;\n  }\n  get insideColor() {\n    return this.uniforms.insideColor.value;\n  }\n  set insideColor(value) {\n    this.uniforms.insideColor.value = value;\n  }\n  /**\n   *\n   * @param parameters\n   */\n  constructor(parameters) {\n    super(null, fragment, parameters);\n  }\n  initUniforms() {\n    this.uniforms = UniformsUtils.merge([ShaderPhongMaterial.getBasicUniforms(), {\n      rimColor: {\n        value: new Color(1.0, 1.0, 1.0)\n      },\n      rimStrength: {\n        value: 1.0\n      },\n      rimPow: {\n        value: 1.0\n      },\n      insideColor: {\n        value: new Color(0.0, 0.0, 0.0)\n      },\n      insideStrength: {\n        value: 1.0\n      },\n      insidePow: {\n        value: 1.0\n      }\n    }]);\n  }\n  initDefines() {\n    super.initDefines();\n    this.defines.USE_LIGHT = true;\n    this.defines.USE_SURFACE_NORMAL = true;\n  }\n}\n;// CONCATENATED MODULE: ./esm/rimEffect/OuterGlowMaterial.js\n\n/**\n * モデルの外周を発光させるマテリアル。\n * 縁の発光と膨張を掛け合わせて、元のモデルの周辺を発光させる。\n */\nclass OuterGlowMaterial extends (/* unused pure expression or super */ null && (RimEffectMaterial)) {\n  get expansionStrength() {\n    return this.uniforms.expansionStrength.value;\n  }\n  set expansionStrength(value) {\n    this.uniforms.expansionStrength.value = value;\n  }\n  initDefines() {\n    super.initDefines();\n    this.defines.USE_LIGHT = false;\n    this.defines.USE_EXPANSION = true;\n  }\n}\n;// CONCATENATED MODULE: ./esm/expansion/ExpansionMaterial.js\n\nclass ExpansionMaterial extends (/* unused pure expression or super */ null && (ShaderPhongMaterial)) {\n  get expansionStrength() {\n    return this.uniforms.expansionStrength.value;\n  }\n  set expansionStrength(value) {\n    this.uniforms.expansionStrength.value = value;\n  }\n  constructor(parameters) {\n    super(null, null, parameters);\n  }\n  initDefines() {\n    super.initDefines();\n    this.defines.USE_EXPANSION = true;\n  }\n}\n;// CONCATENATED MODULE: ./esm/spriteCloud/SpriteCloudMaterial.js\n\n\n\n\nclass SpriteCloudMaterial extends (/* unused pure expression or super */ null && (ShaderSpriteMaterial)) {\n  constructor(parameters) {\n    super(null, fragment, parameters);\n  }\n  /**\n   * uniformsを初期化する。\n   */\n  initUniforms() {\n    super.initUniforms();\n    this.uniforms = UniformsUtils.merge([this.uniforms, {\n      rimStrength: {\n        value: 0.2\n      },\n      bottomStrength: {\n        value: 0.75\n      },\n      rimColor: {\n        value: new Color(0xffffff)\n      },\n      skyColor: {\n        value: new Color(0xcccccc)\n      },\n      rimCenter: {\n        value: 0.6\n      },\n      rimRange: {\n        value: 0.15\n      }\n    }]);\n  }\n  initDefines() {\n    this.defines = Object.assign({\n      USE_UV: true\n    }, SpriteChunk.getDefines(), this.defines);\n  }\n  initDefaultSetting(parameters) {\n    super.initDefaultSetting(parameters);\n  }\n  get rimCenter() {\n    return this.uniforms.rimCenter.value;\n  }\n  set rimCenter(value) {\n    this.uniforms.rimCenter.value = value;\n  }\n  get rimRange() {\n    return this.uniforms.rimRange.value;\n  }\n  set rimRange(value) {\n    this.uniforms.rimRange.value = value;\n  }\n  get rimStrength() {\n    return this.uniforms.rimStrength.value;\n  }\n  set rimStrength(value) {\n    this.uniforms.rimStrength.value = value;\n  }\n  get bottomStrength() {\n    return this.uniforms.bottomStrength.value;\n  }\n  set bottomStrength(value) {\n    this.uniforms.bottomStrength.value = value;\n  }\n  get rimColor() {\n    return this.uniforms.rimColor.value;\n  }\n  set rimColor(value) {\n    this.uniforms.rimColor.value = value;\n  }\n  get skyColor() {\n    return this.uniforms.skyColor.value;\n  }\n  set skyColor(value) {\n    this.uniforms.skyColor.value = value;\n  }\n}\n// EXTERNAL MODULE: ./esm/expansionDissolve/ExpansionDissolveMaterial.glsl.js\nvar ExpansionDissolveMaterial_glsl = __webpack_require__(2197);\n;// CONCATENATED MODULE: ./esm/expansionDissolve/ExpansionDissolveMaterial.js\n\n\n\n\n/**\n * FBMノイズによるジオメトリの膨張でディゾルブを行うマテリアル。\n * 爆発しながら消滅するような表現になる。\n * 膨張の進行度合いはprogressで制御する。\n */\nclass ExpansionDissolveMaterial extends ShaderPhongMaterial_ShaderPhongMaterial {\n  addTime(delta) {\n    if (this.isAnimate) {\n      chunk_AnimationChunk/* AnimationChunk */.F.addTime(this, delta);\n    }\n  }\n  get isAnimate() {\n    return this.uniforms.isAnimate.value;\n  }\n  set isAnimate(value) {\n    this.uniforms.isAnimate.value = value;\n    if (this.isAnimate) {\n      this.startAnimation();\n    } else {\n      this.stopAnimation();\n    }\n  }\n  // ITiledFBM //\n  get tiles() {\n    return this.uniforms.tiles.value;\n  }\n  set tiles(value) {\n    this.uniforms.tiles.value = value;\n  }\n  get hashLoop() {\n    return this.uniforms.hashLoop.value;\n  }\n  set hashLoop(value) {\n    this.uniforms.hashLoop.value = value;\n  }\n  get amp() {\n    return this.uniforms.amp.value;\n  }\n  set amp(value) {\n    this.uniforms.amp.value = value;\n  }\n  get scaleMax() {\n    return this.uniforms.scaleMax.value;\n  }\n  set scaleMax(value) {\n    this.uniforms.scaleMax.value = value;\n  }\n  get time() {\n    return this.uniforms.time.value;\n  }\n  set time(value) {\n    this.uniforms.time.value = value;\n  }\n  get progress() {\n    return this.uniforms.progress.value;\n  }\n  set progress(value) {\n    this.uniforms.progress.value = value;\n  }\n  get dissolveColor() {\n    return this.uniforms.dissolveColor.value;\n  }\n  set dissolveColor(value) {\n    this.uniforms.dissolveColor.value = value;\n  }\n  get dissolveOutColor() {\n    return this.uniforms.dissolveOutColor.value;\n  }\n  set dissolveOutColor(value) {\n    this.uniforms.dissolveOutColor.value = value;\n  }\n  /**\n   *\n   * @param parameters\n   */\n  constructor(parameters) {\n    super(ExpansionDissolveMaterial_glsl/* vertex */.u, ExpansionDissolveMaterial_glsl/* fragment */.D, parameters);\n    // IAnimatable //\n    this.speed = -0.5;\n    /*\n     * IAnimatable implements\n     */\n    this.animationListener = e => {\n      this.addTime(e.delta / 1000);\n    };\n    this.isAnimate = this.isAnimate;\n  }\n  initUniforms() {\n    this.uniforms = three_module/* UniformsUtils */.rDY.merge([ShaderPhongMaterial_ShaderPhongMaterial.getBasicUniforms(), chunk_TilingFBMChunk/* TilingFBMChunk */.u.getUniform(), chunk_AnimationChunk/* AnimationChunk */.F.getUniform(), {\n      scaleMax: {\n        value: 20.0\n      },\n      progress: {\n        value: 0.0\n      },\n      dissolveColor: {\n        value: new three_module/* Color */.Ilk(1.0, 1.0, 1.0)\n      },\n      dissolveOutColor: {\n        value: new three_module/* Color */.Ilk(0.0, 0.0, 0.0)\n      }\n    }]);\n  }\n  initChunks() {\n    super.initChunks();\n    chunk_TilingFBMChunk/* TilingFBMChunk */.u.registerChunk();\n  }\n  initDefines() {\n    super.initDefines();\n    this.defines = Object.assign(this.defines, chunk_TilingFBMChunk/* TilingFBMChunk */.u.getDefines());\n    this.defines.USE_EXPANSION = true;\n  }\n  startAnimation() {\n    esm/* RAFTicker */.F.on("onBeforeTick", this.animationListener);\n  }\n  stopAnimation() {\n    esm/* RAFTicker */.F.off("onBeforeTick", this.animationListener);\n  }\n}\n;// CONCATENATED MODULE: ./esm/swirl/SwirlMaterial.js\n\n\n\n\nclass SwirlMaterial extends (/* unused pure expression or super */ null && (ShaderPhongMaterial)) {\n  addTime(delta) {\n    if (this.isAnimate) {\n      AnimationChunk.addTime(this, delta);\n    }\n  }\n  get isAnimate() {\n    return this.uniforms.isAnimate.value;\n  }\n  set isAnimate(value) {\n    this.uniforms.isAnimate.value = value;\n    if (this.isAnimate) {\n      this.startAnimation();\n    } else {\n      this.stopAnimation();\n    }\n  }\n  onSetMap(val) {\n    super.onSetMap(val);\n    this.setRepeat(val);\n  }\n  onSetAlphaMap(value) {\n    super.onSetAlphaMap(value);\n    this.setRepeat(value);\n  }\n  /**\n   * リピートモードは強制的にRepeatWrappingに\n   * @param value\n   */\n  setRepeat(value) {\n    if (value) {\n      value.wrapS = RepeatWrapping;\n      value.wrapT = RepeatWrapping;\n    }\n  }\n  get uvRotation() {\n    return this.uniforms.uvRotation.value;\n  }\n  set uvRotation(value) {\n    this.uniforms.uvRotation.value = value;\n  }\n  get swirlRotation() {\n    return this.uniforms.swirlRotation.value;\n  }\n  set swirlRotation(value) {\n    this.uniforms.swirlRotation.value = value;\n  }\n  get radius() {\n    return this.uniforms.radius.value;\n  }\n  set radius(value) {\n    this.uniforms.radius.value = value;\n  }\n  get center() {\n    return this.uniforms.center.value;\n  }\n  set center(value) {\n    this.uniforms.center.value = value;\n  }\n  constructor(parameters) {\n    super(null, fragment, parameters);\n    /*\n     * implements IAnimatable\n     */\n    this.speed = -0.02;\n    /*\n     * IAnimatable implements\n     */\n    this.animationListener = e => {\n      this.addTime(e.delta / 1000);\n    };\n    this.isAnimate = this.isAnimate;\n  }\n  initChunks() {\n    super.initChunks();\n    AnimationChunk.registerChunk();\n  }\n  initUniforms() {\n    this.uniforms = UniformsUtils.merge([ShaderPhongMaterial.getBasicUniforms(), AnimationChunk.getUniform(), {\n      uvRotation: {\n        value: 0.0\n      },\n      swirlRotation: {\n        value: 3.14\n      },\n      radius: {\n        value: 0.5\n      },\n      center: {\n        value: new Vector2(0.5, 0.5)\n      }\n    }]);\n  }\n  startAnimation() {\n    RAFTicker.on("onBeforeTick", this.animationListener);\n  }\n  stopAnimation() {\n    RAFTicker.off("onBeforeTick", this.animationListener);\n  }\n}\n;// CONCATENATED MODULE: ./esm/cellularNoise/CellularNoiseMaterial.js\n\n\n\n\nclass CellularNoiseMaterial extends (/* unused pure expression or super */ null && (ShaderPhongMaterial)) {\n  addTime(delta) {\n    if (this.isAnimate) {\n      AnimationChunk.addTime(this, delta);\n    }\n  }\n  get isAnimate() {\n    return this.uniforms.isAnimate.value;\n  }\n  set isAnimate(value) {\n    this.uniforms.isAnimate.value = value;\n    if (this.isAnimate) {\n      this.startAnimation();\n    } else {\n      this.stopAnimation();\n    }\n  }\n  get grid() {\n    return this.uniforms.grid.value;\n  }\n  set grid(value) {\n    this.uniforms.grid.value = value;\n  }\n  get divisionScaleX() {\n    return this.uniforms.divisionScaleX.value;\n  }\n  set divisionScaleX(value) {\n    this.uniforms.divisionScaleX.value = value;\n  }\n  constructor(parameters) {\n    super(null, fragment, parameters);\n    /*\n     * implements IAnimatable\n     */\n    this.speed = -0.02;\n    /*\n     * IAnimatable implements\n     */\n    this.animationListener = e => {\n      this.addTime(e.delta / 1000);\n    };\n    this.isAnimate = this.isAnimate;\n  }\n  initChunks() {\n    super.initChunks();\n    AnimationChunk.registerChunk();\n  }\n  initUniforms() {\n    this.uniforms = UniformsUtils.merge([ShaderPhongMaterial.getBasicUniforms(), AnimationChunk.getUniform(), {\n      grid: {\n        value: 3.0\n      },\n      divisionScaleX: {\n        value: 1.0\n      }\n    }]);\n  }\n  startAnimation() {\n    RAFTicker.on("onBeforeTick", this.animationListener);\n  }\n  stopAnimation() {\n    RAFTicker.off("onBeforeTick", this.animationListener);\n  }\n}\n;// CONCATENATED MODULE: ./esm/solidClipping/SolidClippingMaterial.js\n/**\n * ライトに影響を受けない、ソリッドな切断面をもつマテリアル\n */\n\n\n\nclass SolidClippingMaterial extends (/* unused pure expression or super */ null && (ShaderPhongMaterial)) {\n  get cutSectionColor() {\n    return this.uniforms.cutSectionColor.value;\n  }\n  set cutSectionColor(value) {\n    this.uniforms.cutSectionColor.value = value;\n  }\n  constructor(parameters) {\n    super(null, fragment, parameters);\n  }\n  initUniforms() {\n    this.uniforms = UniformsUtils.merge([ShaderPhongMaterial.getBasicUniforms(), {\n      cutSectionColor: {\n        value: new Color(1.0, 1.0, 1.0)\n      }\n    }]);\n  }\n  initDefaultSetting(parameters) {\n    super.initDefaultSetting(parameters);\n    this.clipping = true;\n    this.side = DoubleSide;\n  }\n}\n;// CONCATENATED MODULE: ./esm/hexDissolve/HexDissolveMaterial.js\n\n\n\n\n/**\n * 六角形グリッドマテリアル\n */\nclass HexDissolveMaterial extends (/* unused pure expression or super */ null && (GridMaterial)) {\n  /**\n   * ディゾルブの進行度を指定する。\n   * 1.0でディゾルブ完了となる。\n   */\n  get progress() {\n    return this.uniforms.progress.value;\n  }\n  set progress(value) {\n    this.uniforms.progress.value = value;\n  }\n  /**\n   * ディゾルブの開始ずれを指定する。\n   * 最後にディゾルブが始まるグリッドが、progressのどの値で開始されるかを意味する。\n   * ex)\n   * delay = 0.8の時、最後のグリッドはprogress = 0.8 ~ 1.0でディゾルブする。\n   */\n  get delay() {\n    return this.uniforms.delay.value;\n  }\n  set delay(value) {\n    this.uniforms.delay.value = value;\n  }\n  get isAscending() {\n    return this.uniforms.isAscending.value;\n  }\n  set isAscending(value) {\n    this.uniforms.isAscending.value = value;\n  }\n  /**\n   * グリッド線の太さ\n   * 0.0で線なし、0.5でグリッド面なしになる。\n   */\n  get gridWeight() {\n    return this.uniforms.gridWeight.value;\n  }\n  set gridWeight(value) {\n    this.uniforms.gridWeight.value = value;\n  }\n  get gridEmissive() {\n    return this.uniforms.gridEmissive.value;\n  }\n  set gridEmissive(value) {\n    this.uniforms.gridEmissive.value = value;\n  }\n  /**\n   * ディゾルブ中に表示されるグローラインの太さ\n   * 数値はグリッド線の太さの倍率、2.0ならグローアウトラインはディゾルブラインの倍の太さになる。\n   *\n   * 注意 : isReversed = true かつgridEmissiveWeightが2.0以下の場合、グロー線が消えなくなる。\n   * 反転させる場合は、2.0以上を指定すること。\n   */\n  get gridEmissiveWeight() {\n    return this.uniforms.gridEmissiveWeight.value;\n  }\n  set gridEmissiveWeight(value) {\n    this.uniforms.gridEmissiveWeight.value = value;\n  }\n  constructor(parameters) {\n    super(null, fragment, parameters);\n  }\n  initUniforms() {\n    this.uniforms = UniformsUtils.merge([GridMaterial.getBasicUniforms(), {\n      progress: {\n        value: 0.0\n      },\n      delay: {\n        value: 0.8\n      },\n      gridWeight: {\n        value: 0.0\n      },\n      isAscending: {\n        value: true\n      },\n      gridEmissive: {\n        value: new Color(0x000000)\n      },\n      gridEmissiveWeight: {\n        value: 2.5\n      }\n    }]);\n  }\n  initChunks() {\n    super.initChunks();\n    HexGridChunk.registerChunk();\n  }\n}\n;// CONCATENATED MODULE: ./esm/index.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7146\n')}},__webpack_module_cache__={},webpackQueues,webpackExports,webpackError,resolveQueue,deferred;function __webpack_require__(Q){var U=__webpack_module_cache__[Q];if(void 0!==U)return U.exports;var F=__webpack_module_cache__[Q]={exports:{}};return __webpack_modules__[Q](F,F.exports,__webpack_require__),F.exports}__webpack_require__.m=__webpack_modules__,webpackQueues="function"==typeof Symbol?Symbol("webpack queues"):"__webpack_queues__",webpackExports="function"==typeof Symbol?Symbol("webpack exports"):"__webpack_exports__",webpackError="function"==typeof Symbol?Symbol("webpack error"):"__webpack_error__",resolveQueue=Q=>{Q&&Q.d<1&&(Q.d=1,Q.forEach((Q=>Q.r--)),Q.forEach((Q=>Q.r--?Q.r++:Q())))},__webpack_require__.a=(Q,U,F)=>{var B;F&&((B=[]).d=-1);var I,g,n,s=new Set,C=Q.exports,i=new Promise(((Q,U)=>{n=U,g=Q}));i[webpackExports]=C,i[webpackQueues]=Q=>(B&&Q(B),s.forEach(Q),i.catch((Q=>{}))),Q.exports=i,U((Q=>{var U;I=(Q=>Q.map((Q=>{if(null!==Q&&"object"==typeof Q){if(Q[webpackQueues])return Q;if(Q.then){var U=[];U.d=0,Q.then((Q=>{F[webpackExports]=Q,resolveQueue(U)}),(Q=>{F[webpackError]=Q,resolveQueue(U)}));var F={};return F[webpackQueues]=Q=>Q(U),F}}var B={};return B[webpackQueues]=Q=>{},B[webpackExports]=Q,B})))(Q);var F=()=>I.map((Q=>{if(Q[webpackError])throw Q[webpackError];return Q[webpackExports]})),g=new Promise((Q=>{(U=()=>Q(F)).r=0;var g=Q=>Q!==B&&!s.has(Q)&&(s.add(Q),Q&&!Q.d&&(U.r++,Q.push(U)));I.map((Q=>Q[webpackQueues](g)))}));return U.r?g:F()}),(Q=>(Q?n(i[webpackError]=Q):g(C),resolveQueue(B)))),B&&B.d<0&&(B.d=0)},deferred=[],__webpack_require__.O=(Q,U,F,B)=>{if(!U){var I=1/0;for(C=0;C<deferred.length;C++){for(var[U,F,B]=deferred[C],g=!0,n=0;n<U.length;n++)(!1&B||I>=B)&&Object.keys(__webpack_require__.O).every((Q=>__webpack_require__.O[Q](U[n])))?U.splice(n--,1):(g=!1,B<I&&(I=B));if(g){deferred.splice(C--,1);var s=F();void 0!==s&&(Q=s)}}return Q}B=B||0;for(var C=deferred.length;C>0&&deferred[C-1][2]>B;C--)deferred[C]=deferred[C-1];deferred[C]=[U,F,B]},__webpack_require__.d=(Q,U)=>{for(var F in U)__webpack_require__.o(U,F)&&!__webpack_require__.o(Q,F)&&Object.defineProperty(Q,F,{enumerable:!0,get:U[F]})},__webpack_require__.o=(Q,U)=>Object.prototype.hasOwnProperty.call(Q,U),__webpack_require__.j=808,(()=>{var Q={808:0};__webpack_require__.O.j=U=>0===Q[U];var U=(U,F)=>{var B,I,[g,n,s]=F,C=0;if(g.some((U=>0!==Q[U]))){for(B in n)__webpack_require__.o(n,B)&&(__webpack_require__.m[B]=n[B]);if(s)var i=s(__webpack_require__)}for(U&&U(F);C<g.length;C++)I=g[C],__webpack_require__.o(Q,I)&&Q[I]&&Q[I][0](),Q[I]=0;return __webpack_require__.O(i)},F=self.webpackChunkthreejs_shader_materials=self.webpackChunkthreejs_shader_materials||[];F.forEach(U.bind(null,0)),F.push=U.bind(null,F.push.bind(F))})();var __webpack_exports__=__webpack_require__.O(void 0,[736],(()=>__webpack_require__(4161)));__webpack_exports__=__webpack_require__.O(__webpack_exports__)})();