(()=>{"use strict";var e,n={619:(e,n,i)=>{const t="\n#define PHONG\n\nvarying vec3 vViewPosition;\n\n//added by threejs-shader-materials\nvarying vec2 uvPosition;\n#include <mesh_position_varying>\n#include <surface_normal_varying_chunk>\n#include <__expansion_uniform_chunk>\n\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n    #include <mesh_position_vertex>\n    uvPosition = uv;\n\n    #include <uv_vertex>\n    #include <color_vertex>\n    #include <morphcolor_vertex>\n    #include <batching_vertex>\n    \n    #include <beginnormal_vertex>\n    #include <morphnormal_vertex>\n    #include <skinbase_vertex>\n    #include <skinnormal_vertex>\n    #include <defaultnormal_vertex>\n    \n    #include <surface_normal_vertex_chunk>\n\n    #include <normal_vertex>\n    \n    #include <begin_vertex>\n    \n    #include <__expansion_vertex_chunk>\n    \n    #include <morphtarget_vertex>\n    #include <skinning_vertex>\n    #include <displacementmap_vertex>\n    #include <project_vertex>\n    #include <logdepthbuf_vertex>\n    #include <clipping_planes_vertex>\n    \n    vViewPosition = - mvPosition.xyz;\n\n    #include <worldpos_vertex>\n    #include <envmap_vertex>\n    #include <shadowmap_vertex>\n    #include <fog_vertex>\n\n}";var a,r=i(753);class s{static getChunkName(){return""}static getChunk(){return""}static getDefines(){return{}}static registerChunk(){r.vxI&&null==r.vxI[this.getChunkName()]&&(r.vxI[this.getChunkName()]=this.getChunk())}static getUniform(){return{}}}class o extends s{static registerChunk(){u.registerChunk()}static getUniform(){return{time:{value:0},isAnimate:{value:!0}}}static addTime(e,n){e.uniforms.time.value+=n*e.speed}}class u extends s{static getChunkName(){return"time_animation_uniform_chunk"}static getChunk(){return"\n    uniform float time;\n    uniform bool isAnimate;\n    "}}class l extends s{static registerChunk(){c.registerChunk(),d.registerChunk()}static getDefines(){return{USE_EXPANSION:!1}}static getUniform(){return{expansionStrength:{value:0}}}}class c extends s{static getChunkName(){return"__expansion_uniform_chunk"}static getChunk(){return"\n    #ifdef USE_EXPANSION\n      uniform float expansionStrength;\n    #endif\n    "}}class d extends s{static getChunkName(){return"__expansion_vertex_chunk"}static getChunk(){return"\n    #ifdef USE_EXPANSION\n      transformed += normal * expansionStrength;\n    #endif\n    "}}class m extends s{static registerChunk(){super.registerChunk(),g.registerChunk(),h.registerChunk(),p.registerChunk()}static getUniform(){return r.LlO.merge([super.getUniform(),{hasMap:{value:!1},map:{value:null}}])}static getMap(e){return e.uniforms.map.value}static setMap(e,n){e.uniforms.map.value=n,e.uniforms.hasMap.value=null!=n}}class g extends s{static getChunkName(){return"map_uniform_chunk"}static getChunk(){return"\n      uniform bool hasMap;\n      uniform sampler2D map;\n    "}}class h extends s{static getChunkName(){return"map_fragment_chunk"}static getChunk(){return"\n      if( hasMap ){\n        vec4 texelColor = texture2D( map, mapUV );\n        diffuseColor *= texelColor;\n      }\n    "}}class p extends s{static getChunkName(){return"__ShaderMaterial__map_fragment_begin_chunk"}static getChunk(){return"\n      vec2 mapUV = uvPosition;\n    "}}class f extends s{static registerChunk(){_.registerChunk(),v.registerChunk()}static getUniform(){return{division:{value:32},divisionScaleX:{value:1}}}}class _ extends s{static getChunkName(){return"repeat_pattern_uniform_chunk"}static getChunk(){return"\n      uniform float division;\n      uniform float divisionScaleX;\n    "}}class v extends s{static getChunkName(){return"repeat_pattern_fragment_chunk"}static getChunk(){return"\n      vec2 uv =\n        uvPosition\n        * vec2( division * divisionScaleX, division);\n    "}}class k extends f{static registerChunk(){super.registerChunk(),C.registerChunk(),x.registerChunk()}static getUniform(){return r.LlO.merge([super.getUniform(),{hasMaskTexture:{value:!1},maskTexture:{value:null}}])}static getMaskTexture(e){return e.uniforms.maskTexture.value}static setMaskTexture(e,n){e.uniforms.maskTexture.value=n,e.uniforms.hasMaskTexture.value=null!=n}}class C extends s{static getChunkName(){return"mask_map_uniform_chunk"}static getChunk(){return"\n      uniform bool hasMaskTexture;\n      uniform sampler2D maskTexture;\n    "}}class x extends s{static getChunkName(){return"mask_map_fragment_chunk"}static getChunk(){return"\n      float mask = 1.0;\n      if( hasMaskTexture ){\n        vec2 uVm = id / vec2( division * divisionScaleX, division);\n        mask = texture2D( maskTexture, uVm ).g;\n      }\n    "}}class w extends s{static registerChunk(){y.registerChunk(),M.registerChunk(),U.registerChunk(),S.registerChunk(),b.registerChunk()}static getDefines(){return{USE_MESH_POSITION:!1}}}class y extends s{static getChunkName(){return"mesh_phong_uniform"}static getChunk(){return"\n      uniform vec3 diffuse;\n      uniform vec3 emissive;\n      uniform vec3 specular;\n      uniform float shininess;\n      uniform float opacity;\n      uniform bool hasAlphaMap;\n      uniform sampler2D alphaMap;\n    "}}class M extends s{static getChunkName(){return"mesh_phong_diffuse_color"}static getChunk(){return"\n    vec4 diffuseColor = vec4( diffuse, opacity );\n    ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n    vec3 totalEmissiveRadiance = emissive;\n    "}}class U extends s{static getChunkName(){return"mesh_phong_switching_alpha_map"}static getChunk(){return"\n      if( hasAlphaMap ){\n        diffuseColor.a *= texture2D( alphaMap, mapUV ).g;\n      }\n    "}}class S extends s{static getChunkName(){return"mesh_position_varying"}static getChunk(){return"\n    #ifdef USE_MESH_POSITION\n    varying vec3 meshPosition;\n    #endif\n    "}}class b extends s{static getChunkName(){return"mesh_position_vertex"}static getChunk(){return"\n    #ifdef USE_MESH_POSITION\n    meshPosition = position;\n    #endif\n    "}}class P extends s{static registerChunk(){L.registerChunk()}static getUniform(){return{isReversed:{value:!1}}}}class L extends s{static getChunkName(){return"reversible_uniform_chunk"}static getChunk(){return"\n      uniform bool isReversed;\n    "}}class N extends s{static registerChunk(){O.registerChunk(),I.registerChunk()}static getDefines(){return{USE_SURFACE_NORMAL:!1}}static getUniform(){return{}}}class O extends s{static getChunkName(){return"surface_normal_varying_chunk"}static getChunk(){return"\n    #ifdef USE_SURFACE_NORMAL\n      varying vec3 surfaceNormal;\n    #endif\n    "}}class I extends s{static getChunkName(){return"surface_normal_vertex_chunk"}static getChunk(){return"\n    #ifdef USE_SURFACE_NORMAL\n      surfaceNormal = normalize( transformedNormal );\n    #endif\n    "}}class G extends o{static registerChunk(){super.registerChunk(),A.registerChunk(),E.registerChunk()}static getUniform(){const e={raisedBottom:{value:.05},waveFrequency:{value:.2},wavePow:{value:4},direction:{value:a.vertical}};return{...super.getUniform(),...e}}}class A extends s{static getChunkName(){return"wavy_animation_fragment_chunk"}static getChunk(){return`\n    float distance = id.y;\n    if( direction == ${a.horizontal}){\n      distance = id.x;\n    }else if( direction == ${a.radial} ){\n      distance = length(id.xy);\n    }\n\n    float wavy = isAnimate\n      ? pow( sin( (distance * waveFrequency - time) ), wavePow) + raisedBottom\n      : 1.0;\n  \n    diffuseColor.a *= wavy;\n    `}}class E extends s{static getChunkName(){return"wavy_animation_uniform_chunk"}static getChunk(){return"\n    uniform float raisedBottom;\n    uniform float waveFrequency;\n    uniform float wavePow;\n    uniform int direction;\n    "}}!function(e){e[e.vertical=4]="vertical",e[e.horizontal=3]="horizontal",e[e.radial=5]="radial"}(a||(a={}));class F extends r.BKk{constructor(e,n,i){super(i),this._opacity=1,i??={},e??=t,n??="\n#define PHONG\n\n#include <mesh_phong_uniform>\n\n//added by threejs-shader-materials\n#include <mesh_position_varying>\nvarying vec2 uvPosition;\n\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n// #include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n    #include <clipping_planes_fragment>\n    \n    #include <mesh_phong_diffuse_color>\n    \n    #include <logdepthbuf_fragment>\n    #include <__ShaderMaterial__map_fragment_begin_chunk>\n    #include <map_fragment>\n    #include <color_fragment>\n    // #include <alphamap_fragment>\n    #include <mesh_phong_switching_alpha_map>\n    #include <alphatest_fragment>\n    #include <alphahash_fragment>\n    #include <specularmap_fragment>\n    #include <normal_fragment_begin>\n    #include <normal_fragment_maps>\n    #include <emissivemap_fragment>\n\n    // accumulation\n    #include <lights_phong_fragment>\n    #include <lights_fragment_begin>\n    #include <lights_fragment_maps>\n    #include <lights_fragment_end>\n\n    // modulation\n    #include <aomap_fragment>\n\n    vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n    \n    #include <envmap_fragment>\n    #include <opaque_fragment>\n    #include <tonemapping_fragment>\n    #include <colorspace_fragment>\n    #include <fog_fragment>\n    #include <premultiplied_alpha_fragment>\n    #include <dithering_fragment>\n\n}",this.initChunks(),this.initUniforms(),this.initDefines(),this.vertexShader=e,this.fragmentShader=n,this.initDefaultSetting(i)}static getBasicUniforms(){return r.LlO.merge([r.fCn.common,r.fCn.specularmap,r.fCn.envmap,r.fCn.aomap,r.fCn.lightmap,r.fCn.emissivemap,r.fCn.bumpmap,r.fCn.normalmap,r.fCn.displacementmap,r.fCn.gradientmap,r.fCn.fog,r.fCn.lights,{emissive:{value:new r.Q1f(0)},specular:{value:new r.Q1f(1118481)},shininess:{value:30},hasAlphaMap:{value:!1}},N.getUniform(),l.getUniform(),m.getUniform()])}initChunks(){w.registerChunk(),N.registerChunk(),l.registerChunk(),m.registerChunk()}initUniforms(){this.uniforms=r.LlO.merge([F.getBasicUniforms(),l.getUniform(),{}])}initDefines(){this.defines=Object.assign({},w.getDefines(),N.getDefines(),l.getDefines(),this.defines)}initDefaultSetting(e){this.uniformOpacity=this._opacity,this.lights=!0,null==e?.transparent&&(this.transparent=!0)}get color(){return this.uniforms.diffuse.value}set color(e){this.uniforms.diffuse.value=e}get opacity(){return this.uniformOpacity}get uniformOpacity(){return this._opacity}set opacity(e){this.uniformOpacity=e}set uniformOpacity(e){this._opacity=e,this.uniforms?.opacity&&(this.uniforms.opacity.value=e)}get emissive(){return this.uniforms.emissive.value}set emissive(e){this.uniforms.emissive.value=e}get map(){return m.getMap(this)}set map(e){m.setMap(this,e),this.onSetMap(e)}onSetMap(e){}get alphaMap(){return this.uniforms.alphaMap.value}set alphaMap(e){this.uniforms.alphaMap.value=e,this.uniforms.hasAlphaMap.value=null!=e,this.onSetAlphaMap(e)}onSetAlphaMap(e){}startGlow(){this.alphaTest=0,this.depthWrite=!1,this.blending=r.EZo}}r.BKk,r.BKk,r.BKk;var T=i(293);T.zE5;class B extends F{get division(){return this.uniforms.division.value}set division(e){this.uniforms.division.value=e}get divisionScaleX(){return this.uniforms.divisionScaleX.value}set divisionScaleX(e){this.uniforms.divisionScaleX.value=e}get isReversed(){return this.uniforms.isReversed.value}set isReversed(e){this.uniforms.isReversed.value=e}get maskTexture(){return k.getMaskTexture(this)}set maskTexture(e){k.setMaskTexture(this,e)}initChunks(){super.initChunks(),k.registerChunk(),P.registerChunk()}static getBasicUniforms(){return r.LlO.merge([F.getBasicUniforms(),P.getUniform(),k.getUniform(),f.getUniform()])}}var R=i(603);class D extends B{addTime(e){o.addTime(this,e)}get isAnimate(){return this.uniforms.isAnimate.value}set isAnimate(e){this.uniforms.isAnimate.value=e,this.isAnimate?this.startAnimation():this.stopAnimation()}get waveFrequency(){return this.uniforms.waveFrequency.value}set waveFrequency(e){this.uniforms.waveFrequency.value=e}get wavePow(){return this.uniforms.wavePow.value}set wavePow(e){this.uniforms.wavePow.value=e}get raisedBottom(){return this.uniforms.raisedBottom.value}set raisedBottom(e){this.uniforms.raisedBottom.value=e}get direction(){return this.uniforms.direction.value}set direction(e){this.uniforms.direction.value=e}constructor(e,n,i){super(e,n,i),this.speed=-.5,this.animationListener=e=>{this.addTime(e.delta/1e3)},this.isAnimate=this.isAnimate}initChunks(){super.initChunks(),G.registerChunk()}static getBasicUniforms(){return r.LlO.merge([super.getBasicUniforms(),P.getUniform(),G.getUniform(),k.getUniform()])}initDefaultSetting(e){super.initDefaultSetting(e)}startAnimation(){R.w.on("onBeforeTick",this.animationListener)}stopAnimation(){R.w.off("onBeforeTick",this.animationListener)}}class j extends D{get gridWeight(){return this.uniforms.gridWeight.value}set gridWeight(e){this.uniforms.gridWeight.value=e}get radius(){return this.uniforms.radius.value}set radius(e){this.uniforms.radius.value=e}constructor(e){super(t,"\n#define PHONG\n\n#include <mesh_phong_uniform>\nvarying vec2 uvPosition;\n#include <mesh_position_varying>\n\n//user settings\n#include <time_animation_uniform_chunk>\n#include <wavy_animation_uniform_chunk>\n#include <repeat_pattern_uniform_chunk>\n#include <mask_map_uniform_chunk>\n#include <reversible_uniform_chunk>\nuniform float gridWeight;\nuniform float radius;\n\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n// #include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\n\nvoid main() {\n    #include <clipping_planes_fragment>\n  \n    #include <mesh_phong_diffuse_color>\n    \n    #include <logdepthbuf_fragment>\n    #include <__ShaderMaterial__map_fragment_begin_chunk>\n    #include <map_fragment>\n    #include <color_fragment>\n\n    #include <repeat_pattern_fragment_chunk>    \n    vec2 localPos = mod(uv, 1.0) - 0.5;\n    vec2 id = uv - localPos;\n    #include <wavy_animation_fragment_chunk>\n\n    #include <mask_map_fragment_chunk>\n    float w = gridWeight;\n    w = clamp( w, 0.0, 1.0);\n    \n    float margin = clamp ( w * 0.33, 0.00, 0.05 );\n    \n    //十字を描画\n    float gridLine;\n    gridLine  = smoothstep ( -w-margin, -w, localPos.x );\n    gridLine -= smoothstep ( w, w+margin, localPos.x );\n    gridLine += smoothstep ( -w-margin, -w, localPos.y );\n    gridLine -= smoothstep ( w, w+margin, localPos.y );\n    gridLine  = clamp( gridLine, 0.0, 1.0 ); \n\n    //半径でマスク\n    float r = radius - (1.0-mask);\n    gridLine -= smoothstep( r, r+margin, localPos.x);\n    gridLine -= smoothstep( -r, -r-margin, localPos.x);\n    gridLine -= smoothstep( r, r+margin, localPos.y);\n    gridLine -= smoothstep( -r, -r-margin, localPos.y);\n    gridLine = clamp( gridLine, 0.0, 1.0 );\n    \n    gridLine = isReversed\n        ? 1.0 - gridLine\n        : gridLine;\n    diffuseColor.a *= gridLine;\n\n    #include <mesh_phong_switching_alpha_map>\n\n\t// #include <alphamap_fragment>\n    #include <alphatest_fragment>\n    #include <alphahash_fragment>\n    #include <specularmap_fragment>\n    #include <normal_fragment_begin>\n    #include <normal_fragment_maps>\n    #include <emissivemap_fragment>\n\n    // accumulation\n    #include <lights_phong_fragment>\n    #include <lights_fragment_begin>\n    #include <lights_fragment_maps>\n    #include <lights_fragment_end>\n\n    // modulation\n    #include <aomap_fragment>\n\n    vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t\n    #include <envmap_fragment>\n    #include <opaque_fragment>\n    #include <tonemapping_fragment>\n    #include <colorspace_fragment>\n    #include <fog_fragment>\n    #include <premultiplied_alpha_fragment>\n    #include <dithering_fragment>\n}",e)}initUniforms(){this.uniforms=r.LlO.merge([D.getBasicUniforms(),{gridWeight:{value:.03},radius:{value:.15}}])}}(0,T.Fn)((([e,n,i,t,a,r])=>z(e,n,i,t,a,r,(0,T.eR5)(0,0,1))));const z=(0,T.Fn)((([e,n,i,t,a,r,s])=>{const o=(0,T.eR5)(0,0,0).toVar(),u=(0,T.T9B)(0,T.ono.dot((0,T.eR5)(s))),l=(0,T.jbE)(1,u);l.assign((0,T.n7C)(l,n)),o.rgb.addAssign(e.mul(l.mul(i)));const c=(0,T.n7C)(u,a);return o.rgb.addAssign(t.mul(c.mul(r))),o}));T.P8l;class W{static initColorGUI(e,n,i="color"){const t={},a=n[i];return t[i]=a.getHex(),e.addColor(t,i).onChange((e=>{a.setHex(e)})),t}static initColorNodeGUI(e,n,i="color"){const t={},a=n[i];return t[i]=a.value.getHex(),e.addColor(t,i).onChange((e=>{a.value.setHex(e)})),t}static initBasicMaterialGUI(e,n,i="Material"){const t=e.addFolder(i);return this.initMaterialFolder(t,n),t.open(),t}static initMaterialGUI(e,n,i="Material"){const t=this.initBasicMaterialGUI(e,n,i);this.initColorGUI(t,n,"emissive")}static initMaterialFolder(e,n,i=!1){this.initColorGUI(e,n),e.add(n,"transparent");const t=i?"opacity":"uniformOpacity";e.add(n,t,0,1)}static initSpriteMaterialGUI(e,n,i="Material"){const t=e.addFolder(i);this.initMaterialFolder(t,n),t.open()}static initGridMaterialGUI(e,n){this.initMaterialGUI(e,n);const i={mask:"",alphaMap:""},t=e.addFolder("WavyGridMaterial");return t.add(n,"isReversed"),t.add(n,"division",2,256).step(1),t.add(n,"divisionScaleX",0,4).step(1),t.add(i,"mask",{none:"",earth:"./textures/landmask.png"}).onChange((e=>{n.maskTexture=""===e?null:(new r.Tap).load(e)})),t.add(i,"alphaMap",{none:"",earth:"./textures/landmask.png"}).onChange((e=>{n.alphaMap=""===e?null:(new r.Tap).load(e)})),t.open(),t}static initWavyMaterialGUI(e,n){const i=this.initGridMaterialGUI(e,n).addFolder("WavyAnimation");i.add(n,"isAnimate"),i.add(n,"speed",-2,2),i.add(n,"waveFrequency",0,1),i.add(n,"wavePow",0,4),i.add(n,"direction",{horizontal:a.horizontal,vertical:a.vertical,radial:a.radial}),i.add(n,"raisedBottom",0,1),i.open()}static initAnimationGUI(e,n,i="Animation"){const t=e.addFolder(i);t.add(n,"isAnimate"),t.add(n,"speed",-2,2),t.open()}static initRimGUI(e,n,i="Rim Effect Material"){const t=e.addFolder(i);W.initColorGUI(t,n,"rimColor"),t.add(n,"rimStrength",0,4).step(.01),t.add(n,"rimPow",0,4).step(.01),W.initColorGUI(t,n,"insideColor"),t.add(n,"insideStrength",0,4).step(.01),t.add(n,"insidePow",0,8).step(.01),t.open()}static initExpansionGUI(e,n,i="ExpansionMaterial"){const t=e.addFolder("ExpansionMaterial");t.add(n,"expansionStrength",-12,12).step(.01),t.open()}static initFBMTilingGUI(e,n,i="FBM Tiling"){const t=e.addFolder("FBM Tiling");t.add(n,"tiles",1,8).step(1),t.add(n,"hashLoop",2,16).step(1),t.add(n,"amp",0,2).step(.01),t.open()}static initSkyGUI(e,n,i,t){const a={turbidity:10,rayleigh:.15,mieCoefficient:.005,mieDirectionalG:.8,inclination:.07,azimuth:.25,exposure:.75},r=4e5;function s(){const e=n.material.uniforms;e.turbidity.value=a.turbidity,e.rayleigh.value=a.rayleigh,e.mieCoefficient.value=a.mieCoefficient,e.mieDirectionalG.value=a.mieDirectionalG;const s=Math.PI*(a.inclination-.5),o=2*Math.PI*(a.azimuth-.5);i.position.x=r*Math.cos(o),i.position.y=r*Math.sin(o)*Math.sin(s),i.position.z=r*Math.sin(o)*Math.cos(s),e.sunPosition.value.copy(i.position),t.toneMappingExposure=a.exposure}s();const o=e.addFolder("Sky");o.add(a,"turbidity",1,20,.1).onChange(s),o.add(a,"rayleigh",0,4,.001).onChange(s),o.add(a,"mieCoefficient",0,.1,.001).onChange(s),o.add(a,"mieDirectionalG",0,1,.001).onChange(s),o.add(a,"inclination",0,1,1e-4).onChange(s),o.add(a,"azimuth",0,1,1e-4).onChange(s),o.add(a,"exposure",0,1,1e-4).onChange(s),o.open()}}var H=i(580),X=i(785);class q{static initScene(){return new r.Z58}static initLight(e){const n=new r.$p8(16777215,Math.PI);return e.add(n),n}static initCamera(e,n,i,t=400){const a=new r.ubm(45,n/i,1,t);return a.position.set(0,0,100),a.updateMatrixWorld(!1),e.add(a),a}static initControl(e,n){let i;null!=n&&(i=n.domElement);const t=new H.N(e,i);return t.update(),t}static initRenderer(e,n,i=0,t=!0){const a=new r.JeP({antialias:t});return a.setClearColor(new r.Q1f(i)),a.setSize(e,n),a.setPixelRatio(window.devicePixelRatio),a.domElement.style.backgroundColor="#"+i.toString(16).padStart(6,"0"),document.body.appendChild(a.domElement),console.log("three.js revision: ",r.sPf),a}static initHelper(e){const n=new r.IzY(30);e.add(n)}static initSky(e,n,i){i.toneMapping=r.FV;const t=new r.eaF(new r.Gu$(2e4,16,8),new r.V9B({color:16777215}));t.position.y=-7e5,t.visible=!1,e.add(t);const a=new X.m;a.scale.setScalar(45e3),e.add(a),W.initSkyGUI(n,a,t,i)}}var V=i(638);class ${constructor(){const e=q.initScene();e.fog=new r.jUj(0,80,160),q.initLight(e);const n=q.initCamera(e,640,480),i=q.initRenderer(640,480);q.initControl(n,i),q.initHelper(e);const t=this.initObject(e);R.w.on("tick",(t=>{i.render(e,n)})),this.initGUI(t)}initObject(e){const n=new r.HiM(16777215,7e3);n.position.set(10,20,30),e.add(n);const i=new r.F1l(n);e.add(i);const t=new r.Gu$(10,64,64),s=new j({fog:void 0!==e.fog});s.color=new r.Q1f(16737894),s.direction=a.vertical;const o=new r.eaF(t,s);return e.add(o),s}initGUI(e){const n=new V.Ay;W.initWavyMaterialGUI(n,e),this.initGUIMaterial(n,e)}initGUIMaterial(e,n){const i=e.addFolder("CrossGridMaterial");i.add(n,"gridWeight",0,.5),i.add(n,"radius",0,.5),i.open()}}window.onload=()=>{new $}}},i={};function t(e){var a=i[e];if(void 0!==a)return a.exports;var r=i[e]={exports:{}};return n[e](r,r.exports,t),r.exports}t.m=n,e=[],t.O=(n,i,a,r)=>{if(!i){var s=1/0;for(c=0;c<e.length;c++){for(var[i,a,r]=e[c],o=!0,u=0;u<i.length;u++)(!1&r||s>=r)&&Object.keys(t.O).every((e=>t.O[e](i[u])))?i.splice(u--,1):(o=!1,r<s&&(s=r));if(o){e.splice(c--,1);var l=a();void 0!==l&&(n=l)}}return n}r=r||0;for(var c=e.length;c>0&&e[c-1][2]>r;c--)e[c]=e[c-1];e[c]=[i,a,r]},t.d=(e,n)=>{for(var i in n)t.o(n,i)&&!t.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:n[i]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),t.j=514,(()=>{var e={514:0};t.O.j=n=>0===e[n];var n=(n,i)=>{var a,r,[s,o,u]=i,l=0;if(s.some((n=>0!==e[n]))){for(a in o)t.o(o,a)&&(t.m[a]=o[a]);if(u)var c=u(t)}for(n&&n(i);l<s.length;l++)r=s[l],t.o(e,r)&&e[r]&&e[r][0](),e[r]=0;return t.O(c)},i=self.webpackChunk_masatomakino_threejs_shader_materials=self.webpackChunk_masatomakino_threejs_shader_materials||[];i.forEach(n.bind(null,0)),i.push=n.bind(null,i.push.bind(i))})();var a=t.O(void 0,[121],(()=>t(619)));a=t.O(a)})();