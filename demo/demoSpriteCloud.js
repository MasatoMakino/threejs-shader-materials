(()=>{"use strict";var t,n={749:(t,n,e)=>{var i,r=e(75),o=e(12),a=e(659);!function(t){t[t.vertical=4]="vertical",t[t.horizontal=3]="horizontal",t[t.radial=5]="radial"}(i||(i={}));var s=e(163);class l{static getChunkName(){return""}static getChunk(){return""}static getDefines(){return{}}static registerChunk(){r.WdD&&null==r.WdD[this.getChunkName()]&&(r.WdD[this.getChunkName()]=this.getChunk())}static getUniform(){return{}}}class u extends l{static registerChunk(){d.registerChunk(),c.registerChunk(),m.registerChunk(),g.registerChunk()}static getDefines(){return{USE_SIZEATTENUATION:!0}}static getUniform(){return r.rDY.merge([r.rBU.sprite,r.rBU.fog,r.rBU.lights])}}class d extends l{static getChunkName(){return"sprite_vertex_uniform_chunk"}static getChunk(){return"\n      uniform float rotation;\n      uniform vec2 center;\n    "}}class c extends l{static getChunkName(){return"sprite_fragment_uniform_chunk"}static getChunk(){return"\n      uniform vec3 diffuse;\n      uniform float opacity;\n    "}}class m extends l{static getChunkName(){return"sprite_diffuse_color_chunk"}static getChunk(){return"\n      vec3 outgoingLight = vec3( 0.0 );\n      vec4 diffuseColor = vec4( diffuse, opacity );\n    "}}class g extends l{static getChunkName(){return"sprite_mv_position_chunk"}static getChunk(){return"\n\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n    "}}class f extends r.jyz{constructor(t,n,e){super(e),this._opacity=1,null!=e||(e={}),null!=t||(t="\n#include <sprite_vertex_uniform_chunk>\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n\t#include <uv_vertex>\n\t#include <sprite_mv_position_chunk>\n\n\tgl_Position = projectionMatrix * mvPosition;\n\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}\n"),null!=n||(n="\n#include <sprite_fragment_uniform_chunk>\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n    #include <clipping_planes_fragment>\n    #include <sprite_diffuse_color_chunk>\n\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphatest_fragment>\n    outgoingLight = diffuseColor.rgb;\n    gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n"),this.initChunks(),this.initUniforms(),this.initDefines(),this.vertexShader=t,this.fragmentShader=n,this.initDefaultSetting(e)}initChunks(){u.registerChunk()}initUniforms(){this.uniforms=r.rDY.merge([u.getUniform(),{}])}initDefines(){this.defines=Object.assign({},u.getDefines(),this.defines)}initDefaultSetting(t){this.uniformOpacity=this._opacity}get opacity(){return this._opacity}get uniformOpacity(){return this._opacity}set opacity(t){this.uniformOpacity=t}set uniformOpacity(t){var n;this._opacity=t,(null===(n=this.uniforms)||void 0===n?void 0:n.opacity)&&(this.uniforms.opacity.value=t)}get color(){return this.uniforms.diffuse.value}set color(t){this.uniforms.diffuse.value=t}get center(){return this.uniforms.center.value}set center(t){this.uniforms.center.value=t}get rotation(){return this.uniforms.rotation.value}set rotation(t){this.uniforms.rotation.value=t}get uvTransform(){return this.uniforms.uvTransform.value}set uvTransform(t){this.uniforms.uvTransform.value=t}get map(){return this.uniforms.map.value}set map(t){this.uniforms.map.value=t}}class h extends f{constructor(t){super(null,"\n\nuniform float rimStrength;\nuniform float bottomStrength;\nuniform vec3 rimColor;\nuniform vec3 skyColor;\n\nuniform float rimCenter;\nuniform float rimRange;\n\n#include <sprite_fragment_uniform_chunk>\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\n    vec3 color = diffuse;\n    #include <clipping_planes_fragment>\n    #include <sprite_diffuse_color_chunk>\n\t#include <logdepthbuf_fragment>\n\t\n\t#include <map_fragment>\n\t#include <alphatest_fragment>\n\t\n\tfloat bottom = 0.0;\t\n\t#ifdef USE_MAP\n      bottom = 1.0 - texture2D( map, vUv ).g;\n      bottom *= bottomStrength;\n    #endif\n    \n    float rim = 0.0;\n    #ifdef USE_MAP\n      float a = texture2D( map, vUv ).a ;\n      float edge = \n          smoothstep( rimCenter-rimRange, rimCenter, a )\n        - smoothstep( rimCenter, rimCenter+rimRange, a );\n    #endif\n    \n    outgoingLight = mix( diffuse, skyColor, bottom);\n    outgoingLight += rimColor * edge * rimStrength;\n    \n    gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n    \n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}\n",t)}initUniforms(){super.initUniforms(),this.uniforms=r.rDY.merge([this.uniforms,{rimStrength:{value:.2},bottomStrength:{value:.75},rimColor:{value:new r.Ilk(16777215)},skyColor:{value:new r.Ilk(13421772)},rimCenter:{value:.6},rimRange:{value:.15}}])}initDefaultSetting(t){super.initDefaultSetting(t)}get rimCenter(){return this.uniforms.rimCenter.value}set rimCenter(t){this.uniforms.rimCenter.value=t}get rimRange(){return this.uniforms.rimRange.value}set rimRange(t){this.uniforms.rimRange.value=t}get rimStrength(){return this.uniforms.rimStrength.value}set rimStrength(t){this.uniforms.rimStrength.value=t}get bottomStrength(){return this.uniforms.bottomStrength.value}set bottomStrength(t){this.uniforms.bottomStrength.value=t}get rimColor(){return this.uniforms.rimColor.value}set rimColor(t){this.uniforms.rimColor.value=t}get skyColor(){return this.uniforms.skyColor.value}set skyColor(t){this.uniforms.skyColor.value=t}}class p{static initColorGUI(t,n,e="color"){const i={},r=n[e];return i[e]=r.getHex(),t.addColor(i,e).onChange((t=>{r.setHex(t)})),i}static initBasicMaterialGUI(t,n,e="Material"){const i=t.addFolder(e);return this.initMaterialFolder(i,n),i.open(),i}static initMaterialGUI(t,n,e="Material"){const i=this.initBasicMaterialGUI(t,n,e);this.initColorGUI(i,n,"emissive")}static initMaterialFolder(t,n){this.initColorGUI(t,n),t.add(n,"transparent"),t.add(n,"uniformOpacity",0,1)}static initSpriteMaterialGUI(t,n,e="Material"){const i=t.addFolder(e);this.initMaterialFolder(i,n),i.open()}static initGridMaterialGUI(t,n){this.initMaterialGUI(t,n);const e={mask:"",alphaMap:""},i=t.addFolder("WavyGridMaterial");return i.add(n,"isReversed"),i.add(n,"division",2,256).step(1),i.add(n,"divisionScaleX",0,4).step(1),i.add(e,"mask",{none:"",earth:"./textures/landmask.png"}).onChange((t=>{n.maskTexture=""===t?null:(new r.dpR).load(t)})),i.add(e,"alphaMap",{none:"",earth:"./textures/landmask.png"}).onChange((t=>{n.alphaMap=""===t?null:(new r.dpR).load(t)})),i.open(),i}static initWavyMaterialGUI(t,n){const e=this.initGridMaterialGUI(t,n).addFolder("WavyAnimation");e.add(n,"isAnimate"),e.add(n,"speed",-2,2),e.add(n,"waveFrequency",0,1),e.add(n,"wavePow",0,4),e.add(n,"direction",{horizontal:i.horizontal,vertical:i.vertical,radial:i.radial}),e.add(n,"raisedBottom",0,1),e.open()}static initAnimationGUI(t,n,e="Animation"){const i=t.addFolder(e);i.add(n,"isAnimate"),i.add(n,"speed",-2,2),i.open()}static initRimGUI(t,n,e="Rim Effect Material"){const i=t.addFolder(e);p.initColorGUI(i,n,"rimColor"),i.add(n,"rimStrength",0,4).step(.01),i.add(n,"rimPow",0,4).step(.01),p.initColorGUI(i,n,"insideColor"),i.add(n,"insideStrength",0,4).step(.01),i.add(n,"insidePow",0,8).step(.01),i.open()}static initExpansionGUI(t,n,e="ExpansionMaterial"){const i=t.addFolder("ExpansionMaterial");i.add(n,"expansionStrength",-12,12).step(.01),i.open()}static initFBMTilingGUI(t,n,e="FBM Tiling"){const i=t.addFolder("FBM Tiling");i.add(n,"tiles",1,8).step(1),i.add(n,"hashLoop",2,16).step(1),i.add(n,"amp",0,2).step(.01),i.open()}static initSkyGUI(t,n,e,i){const r={turbidity:10,rayleigh:.15,mieCoefficient:.005,mieDirectionalG:.8,inclination:.07,azimuth:.25,exposure:.75},o=4e5;function a(){const t=n.material.uniforms;t.turbidity.value=r.turbidity,t.rayleigh.value=r.rayleigh,t.mieCoefficient.value=r.mieCoefficient,t.mieDirectionalG.value=r.mieDirectionalG;const a=Math.PI*(r.inclination-.5),s=2*Math.PI*(r.azimuth-.5);e.position.x=o*Math.cos(s),e.position.y=o*Math.sin(s)*Math.sin(a),e.position.z=o*Math.sin(s)*Math.cos(a),t.sunPosition.value.copy(e.position),i.toneMappingExposure=r.exposure}a();const s=t.addFolder("Sky");s.add(r,"turbidity",1,20,.1).onChange(a),s.add(r,"rayleigh",0,4,.001).onChange(a),s.add(r,"mieCoefficient",0,.1,.001).onChange(a),s.add(r,"mieDirectionalG",0,1,.001).onChange(a),s.add(r,"inclination",0,1,1e-4).onChange(a),s.add(r,"azimuth",0,1,1e-4).onChange(a),s.add(r,"exposure",0,1,1e-4).onChange(a),s.open()}}class v{static initScene(){return new r.xsS}static initLight(t){const n=new r.Mig(16777215,1);return t.add(n),n}static initCamera(t,n,e,i=400){const o=new r.cPb(45,n/e,1,i);return o.position.set(0,0,100),o.updateMatrixWorld(!1),t.add(o),o}static initControl(t,n){let e;null!=n&&(e=n.domElement);const i=new o.z(t,e);return i.update(),i}static initRenderer(t,n,e=0,i="webgl-canvas",o=!0){const a=document.getElementById(i);a.style.zIndex=0,a.style.position="absolute";const s=new r.CP7({canvas:a,antialias:o});return s.setClearColor(new r.Ilk(e)),s.setSize(t,n),s.setPixelRatio(window.devicePixelRatio),s}static initHelper(t){const n=new r.y8_(30);t.add(n)}static initSky(t,n,e){e.toneMapping=r.LY2;const i=new r.Kj0(new r.Aip(2e4,16,8),new r.vBJ({color:16777215}));i.position.y=-7e5,i.visible=!1,t.add(i);const o=new a.q;o.scale.setScalar(45e3),t.add(o),p.initSkyGUI(n,o,i,e)}}var _=e(899);class C{constructor(){const t=v.initScene();t.fog=new r.ybr(5601177,300,600),v.initLight(t);const n=v.initCamera(t,640,480),e=v.initRenderer(640,480);v.initControl(n,e),v.initHelper(t);const i=this.initObject(t),o=new _.ZP;v.initSky(t,o,e),this.initGUI(o,i),s.Fz.addEventListener(s.M9.tick,(i=>{e.render(t,n)}))}initObject(t){const n=new h({fog:void 0!==t.fog,transparent:!0});n.color=new r.Ilk(14540253);const e=new r.dpR;n.map=e.load("./textures/cloud.png"),n.skyColor=new r.Ilk(10070715),n.rimColor=new r.Ilk(16777215);const i=new r.jyi(n);return i.scale.set(40,40,1),i.position.x=0,t.add(i),n}initGUI(t,n){p.initSpriteMaterialGUI(t,n);const e=t.addFolder("SpriteCloud");p.initColorGUI(e,n,"skyColor"),e.add(n,"bottomStrength",0,5),p.initColorGUI(e,n,"rimColor"),e.add(n,"rimStrength",0,5),e.add(n,"rimCenter",0,1),e.add(n,"rimRange",0,1),e.open()}}window.onload=()=>{new C}}},e={};function i(t){var r=e[t];if(void 0!==r)return r.exports;var o=e[t]={exports:{}};return n[t](o,o.exports,i),o.exports}i.m=n,t=[],i.O=(n,e,r,o)=>{if(!e){var a=1/0;for(d=0;d<t.length;d++){for(var[e,r,o]=t[d],s=!0,l=0;l<e.length;l++)(!1&o||a>=o)&&Object.keys(i.O).every((t=>i.O[t](e[l])))?e.splice(l--,1):(s=!1,o<a&&(a=o));if(s){t.splice(d--,1);var u=r();void 0!==u&&(n=u)}}return n}o=o||0;for(var d=t.length;d>0&&t[d-1][2]>o;d--)t[d]=t[d-1];t[d]=[e,r,o]},i.n=t=>{var n=t&&t.__esModule?()=>t.default:()=>t;return i.d(n,{a:n}),n},i.d=(t,n)=>{for(var e in n)i.o(n,e)&&!i.o(t,e)&&Object.defineProperty(t,e,{enumerable:!0,get:n[e]})},i.o=(t,n)=>Object.prototype.hasOwnProperty.call(t,n),i.j=680,(()=>{var t={680:0};i.O.j=n=>0===t[n];var n=(n,e)=>{var r,o,[a,s,l]=e,u=0;if(a.some((n=>0!==t[n]))){for(r in s)i.o(s,r)&&(i.m[r]=s[r]);if(l)var d=l(i)}for(n&&n(e);u<a.length;u++)o=a[u],i.o(t,o)&&t[o]&&t[o][0](),t[o]=0;return i.O(d)},e=self.webpackChunkthreejs_shader_materials=self.webpackChunkthreejs_shader_materials||[];e.forEach(n.bind(null,0)),e.push=n.bind(null,e.push.bind(e))})();var r=i.O(void 0,[736],(()=>i(749)));r=i.O(r)})();