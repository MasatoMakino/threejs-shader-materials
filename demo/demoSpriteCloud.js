(()=>{"use strict";var __webpack_modules__={7187:(__webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   G: () => (/* binding */ Common)\n/* harmony export */ });\n/* harmony import */ var _CommonGUI_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2494);\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6075);\n/* harmony import */ var three_examples_jsm_controls_OrbitControls_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(8012);\n/* harmony import */ var three_examples_jsm_objects_Sky_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(1659);\n/* harmony import */ var three_examples_jsm_renderers_webgpu_WebGPURenderer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(5481);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([three_examples_jsm_renderers_webgpu_WebGPURenderer_js__WEBPACK_IMPORTED_MODULE_3__]);\nthree_examples_jsm_renderers_webgpu_WebGPURenderer_js__WEBPACK_IMPORTED_MODULE_3__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n\n\nclass Common {\n  static initScene() {\n    const scene = new three__WEBPACK_IMPORTED_MODULE_1__/* .Scene */ .xsS();\n    return scene;\n  }\n  static initLight(scene) {\n    const ambientLight = new three__WEBPACK_IMPORTED_MODULE_1__/* .AmbientLight */ .Mig(0xffffff, Math.PI);\n    scene.add(ambientLight);\n    return ambientLight;\n  }\n  static initCamera(scene, W, H, far = 400) {\n    const camera = new three__WEBPACK_IMPORTED_MODULE_1__/* .PerspectiveCamera */ .cPb(45, W / H, 1, far);\n    camera.position.set(0, 0, 100);\n    camera.updateMatrixWorld(false);\n    scene.add(camera);\n    return camera;\n  }\n  static initControl(camera, render) {\n    let domElement;\n    if (render != null) {\n      domElement = render.domElement;\n    }\n    const control = new three_examples_jsm_controls_OrbitControls_js__WEBPACK_IMPORTED_MODULE_2__/* .OrbitControls */ .z(camera, domElement);\n    control.update();\n    return control;\n  }\n  static initRenderer(W, H, color = 0x000000, antialias = true, isGPU = false) {\n    const convertRGBToHex = rgb => {\n      const hex = rgb.toString(16);\n      return "#" + hex.padStart(6, "0");\n    };\n    const getRenderer = () => {\n      if (isGPU) {\n        return new three_examples_jsm_renderers_webgpu_WebGPURenderer_js__WEBPACK_IMPORTED_MODULE_3__/* ["default"] */ .Z({\n          antialias: antialias\n        });\n      }\n      return new three__WEBPACK_IMPORTED_MODULE_1__/* .WebGLRenderer */ .CP7({\n        antialias: antialias\n      });\n    };\n    const renderer = getRenderer();\n    renderer.setClearColor(new three__WEBPACK_IMPORTED_MODULE_1__/* .Color */ .Ilk(color));\n    renderer.setSize(W, H);\n    renderer.setPixelRatio(window.devicePixelRatio);\n    renderer.domElement.style.backgroundColor = convertRGBToHex(color);\n    document.body.appendChild(renderer.domElement);\n    console.log("three.js revision: ", three__WEBPACK_IMPORTED_MODULE_1__/* .REVISION */ .UZH);\n    return renderer;\n  }\n  static initHelper(scene) {\n    const axesHelper = new three__WEBPACK_IMPORTED_MODULE_1__/* .AxesHelper */ .y8_(30);\n    scene.add(axesHelper);\n  }\n  static initSky(scene, gui, renderer) {\n    renderer.toneMapping = three__WEBPACK_IMPORTED_MODULE_1__/* .ACESFilmicToneMapping */ .LY2;\n    const sunSphere = new three__WEBPACK_IMPORTED_MODULE_1__/* .Mesh */ .Kj0(new three__WEBPACK_IMPORTED_MODULE_1__/* .SphereGeometry */ .xo$(20000, 16, 8), new three__WEBPACK_IMPORTED_MODULE_1__/* .MeshBasicMaterial */ .vBJ({\n      color: 0xffffff\n    }));\n    sunSphere.position.y = -700000;\n    sunSphere.visible = false;\n    scene.add(sunSphere);\n    const sky = new three_examples_jsm_objects_Sky_js__WEBPACK_IMPORTED_MODULE_4__/* .Sky */ .q();\n    sky.scale.setScalar(45000);\n    scene.add(sky);\n    _CommonGUI_js__WEBPACK_IMPORTED_MODULE_0__/* .CommonGUI */ .z.initSkyGUI(gui, sky, sunSphere, renderer);\n  }\n}\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///7187\n')},2494:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   z: () => (/* binding */ CommonGUI)\n/* harmony export */ });\n/* harmony import */ var _esm_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2722);\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(6075);\n\n\nclass CommonGUI {\n  static initColorGUI(folder, mat, propName = "color") {\n    const prop = {};\n    const targetColor = mat[propName];\n    prop[propName] = targetColor.getHex();\n    folder.addColor(prop, propName).onChange(val => {\n      targetColor.setHex(val);\n    });\n    return prop;\n  }\n  static initColorNodeGUI(folder, mat, propName = "color") {\n    const prop = {};\n    const targetColor = mat[propName];\n    prop[propName] = targetColor.value.getHex();\n    folder.addColor(prop, propName).onChange(val => {\n      targetColor.value.setHex(val);\n    });\n    return prop;\n  }\n  static initBasicMaterialGUI(gui, mat, folderName = "Material") {\n    const folder = gui.addFolder(folderName);\n    this.initMaterialFolder(folder, mat);\n    folder.open();\n    return folder;\n  }\n  static initMaterialGUI(gui, mat, folderName = "Material") {\n    const folder = this.initBasicMaterialGUI(gui, mat, folderName);\n    this.initColorGUI(folder, mat, "emissive");\n  }\n  static initMaterialFolder(folder, mat, isNode = false) {\n    this.initColorGUI(folder, mat);\n    folder.add(mat, "transparent");\n    const opacityName = isNode ? "opacity" : "uniformOpacity";\n    folder.add(mat, opacityName, 0.0, 1.0);\n  }\n  static initSpriteMaterialGUI(gui, mat, folderName = "Material") {\n    const folder = gui.addFolder(folderName);\n    this.initMaterialFolder(folder, mat);\n    folder.open();\n  }\n  static initGridMaterialGUI(gui, mat) {\n    this.initMaterialGUI(gui, mat);\n    const prop = {\n      mask: "",\n      alphaMap: ""\n    };\n    const folder = gui.addFolder("WavyGridMaterial");\n    folder.add(mat, "isReversed");\n    folder.add(mat, "division", 2.0, 256.0).step(1);\n    folder.add(mat, "divisionScaleX", 0.0, 4.0).step(1);\n    folder.add(prop, "mask", {\n      none: "",\n      earth: "./textures/landmask.png"\n    }).onChange(val => {\n      if (val === "") {\n        mat.maskTexture = null;\n      } else {\n        mat.maskTexture = new three__WEBPACK_IMPORTED_MODULE_1__/* .TextureLoader */ .dpR().load(val);\n      }\n    });\n    folder.add(prop, "alphaMap", {\n      none: "",\n      earth: "./textures/landmask.png"\n    }).onChange(val => {\n      if (val === "") {\n        mat.alphaMap = null;\n      } else {\n        mat.alphaMap = new three__WEBPACK_IMPORTED_MODULE_1__/* .TextureLoader */ .dpR().load(val);\n      }\n    });\n    folder.open();\n    return folder;\n  }\n  static initWavyMaterialGUI(gui, mat) {\n    const folder = this.initGridMaterialGUI(gui, mat);\n    const animationFolder = folder.addFolder("WavyAnimation");\n    animationFolder.add(mat, "isAnimate");\n    animationFolder.add(mat, "speed", -2, 2);\n    animationFolder.add(mat, "waveFrequency", 0.0, 1.0);\n    animationFolder.add(mat, "wavePow", 0.0, 4.0);\n    animationFolder.add(mat, "direction", {\n      horizontal: _esm_index_js__WEBPACK_IMPORTED_MODULE_0__/* .Directions */ .Ns.horizontal,\n      vertical: _esm_index_js__WEBPACK_IMPORTED_MODULE_0__/* .Directions */ .Ns.vertical,\n      radial: _esm_index_js__WEBPACK_IMPORTED_MODULE_0__/* .Directions */ .Ns.radial\n    });\n    animationFolder.add(mat, "raisedBottom", 0.0, 1.0);\n    animationFolder.open();\n  }\n  static initAnimationGUI(gui, mat, folderName = "Animation") {\n    const folder = gui.addFolder(folderName);\n    folder.add(mat, "isAnimate");\n    folder.add(mat, "speed", -2, 2);\n    folder.open();\n  }\n  static initRimGUI(gui, mat, folderName = "Rim Effect Material") {\n    const folder = gui.addFolder(folderName);\n    CommonGUI.initColorGUI(folder, mat, "rimColor");\n    folder.add(mat, "rimStrength", 0.0, 4.0).step(0.01);\n    folder.add(mat, "rimPow", 0.0, 4.0).step(0.01);\n    CommonGUI.initColorGUI(folder, mat, "insideColor");\n    folder.add(mat, "insideStrength", 0.0, 4.0).step(0.01);\n    folder.add(mat, "insidePow", 0.0, 8.0).step(0.01);\n    folder.open();\n  }\n  static initExpansionGUI(gui, mat, folderName = "ExpansionMaterial") {\n    const folder = gui.addFolder("ExpansionMaterial");\n    const ampRange = 12.0;\n    folder.add(mat, "expansionStrength", -ampRange, ampRange).step(0.01);\n    folder.open();\n  }\n  static initFBMTilingGUI(gui, mat, folderName = "FBM Tiling") {\n    const folder = gui.addFolder("FBM Tiling");\n    folder.add(mat, "tiles", 1.0, 8.0).step(1.0);\n    folder.add(mat, "hashLoop", 2.0, 16.0).step(1.0);\n    folder.add(mat, "amp", 0.0, 2.0).step(0.01);\n    folder.open();\n  }\n  static initSkyGUI(gui, sky, sunSphere, renderer) {\n    const effectController = {\n      turbidity: 10,\n      rayleigh: 0.15,\n      mieCoefficient: 0.005,\n      mieDirectionalG: 0.8,\n      inclination: 0.07,\n      // elevation / inclination\n      azimuth: 0.25,\n      // Facing front,\n      exposure: 0.75\n    };\n    const distance = 400000;\n    function guiChanged() {\n      const uniforms = sky.material.uniforms;\n      uniforms["turbidity"].value = effectController.turbidity;\n      uniforms["rayleigh"].value = effectController.rayleigh;\n      uniforms["mieCoefficient"].value = effectController.mieCoefficient;\n      uniforms["mieDirectionalG"].value = effectController.mieDirectionalG;\n      const theta = Math.PI * (effectController.inclination - 0.5);\n      const phi = 2 * Math.PI * (effectController.azimuth - 0.5);\n      sunSphere.position.x = distance * Math.cos(phi);\n      sunSphere.position.y = distance * Math.sin(phi) * Math.sin(theta);\n      sunSphere.position.z = distance * Math.sin(phi) * Math.cos(theta);\n      uniforms["sunPosition"].value.copy(sunSphere.position);\n      renderer.toneMappingExposure = effectController.exposure;\n    }\n    guiChanged();\n    const folder = gui.addFolder("Sky");\n    folder.add(effectController, "turbidity", 1.0, 20.0, 0.1).onChange(guiChanged);\n    folder.add(effectController, "rayleigh", 0.0, 4, 0.001).onChange(guiChanged);\n    folder.add(effectController, "mieCoefficient", 0.0, 0.1, 0.001).onChange(guiChanged);\n    folder.add(effectController, "mieDirectionalG", 0.0, 1, 0.001).onChange(guiChanged);\n    folder.add(effectController, "inclination", 0, 1, 0.0001).onChange(guiChanged);\n    folder.add(effectController, "azimuth", 0, 1, 0.0001).onChange(guiChanged);\n    folder.add(effectController, "exposure", 0, 1, 0.0001).onChange(guiChanged);\n    folder.open();\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2494\n')},6142:(__webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n/* unused harmony export Study */\n/* harmony import */ var _esm_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2722);\n/* harmony import */ var _Common_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(7187);\n/* harmony import */ var _CommonGUI_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(2494);\n/* harmony import */ var _masatomakino_raf_ticker__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(5429);\n/* harmony import */ var lil_gui__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(7429);\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(6075);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_Common_js__WEBPACK_IMPORTED_MODULE_1__]);\n_Common_js__WEBPACK_IMPORTED_MODULE_1__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n\n\n\nclass Study {\n  constructor() {\n    const W = 640;\n    const H = 480;\n    const scene = _Common_js__WEBPACK_IMPORTED_MODULE_1__/* .Common */ .G.initScene();\n    scene.fog = new three__WEBPACK_IMPORTED_MODULE_4__/* .Fog */ .ybr(0x557799, 300, 600);\n    _Common_js__WEBPACK_IMPORTED_MODULE_1__/* .Common */ .G.initLight(scene);\n    const camera = _Common_js__WEBPACK_IMPORTED_MODULE_1__/* .Common */ .G.initCamera(scene, W, H);\n    const renderer = _Common_js__WEBPACK_IMPORTED_MODULE_1__/* .Common */ .G.initRenderer(W, H);\n    const control = _Common_js__WEBPACK_IMPORTED_MODULE_1__/* .Common */ .G.initControl(camera, renderer);\n    _Common_js__WEBPACK_IMPORTED_MODULE_1__/* .Common */ .G.initHelper(scene);\n    const mat = this.initObject(scene);\n    const gui = new lil_gui__WEBPACK_IMPORTED_MODULE_5__/* ["default"] */ .ZP();\n    _Common_js__WEBPACK_IMPORTED_MODULE_1__/* .Common */ .G.initSky(scene, gui, renderer);\n    this.initGUI(gui, mat);\n    _masatomakino_raf_ticker__WEBPACK_IMPORTED_MODULE_3__/* .RAFTicker */ .F.on("tick", e => {\n      renderer.render(scene, camera);\n    });\n  }\n  initObject(scene) {\n    const mat = new _esm_index_js__WEBPACK_IMPORTED_MODULE_0__/* .SpriteCloudMaterial */ .zG({\n      fog: scene.fog !== undefined,\n      transparent: true\n    });\n    mat.color = new three__WEBPACK_IMPORTED_MODULE_4__/* .Color */ .Ilk(0xdddddd);\n    const loader = new three__WEBPACK_IMPORTED_MODULE_4__/* .TextureLoader */ .dpR();\n    mat.map = loader.load("./textures/cloud.png");\n    mat.skyColor = new three__WEBPACK_IMPORTED_MODULE_4__/* .Color */ .Ilk(0x99aabb);\n    mat.rimColor = new three__WEBPACK_IMPORTED_MODULE_4__/* .Color */ .Ilk(0xffffff);\n    const sprite = new three__WEBPACK_IMPORTED_MODULE_4__/* .Sprite */ .jyi(mat);\n    sprite.scale.set(40, 40, 1.0);\n    sprite.position.x = 0;\n    scene.add(sprite);\n    return mat;\n  }\n  initGUI(gui, mat) {\n    _CommonGUI_js__WEBPACK_IMPORTED_MODULE_2__/* .CommonGUI */ .z.initSpriteMaterialGUI(gui, mat);\n    const cloudGUI = gui.addFolder("SpriteCloud");\n    _CommonGUI_js__WEBPACK_IMPORTED_MODULE_2__/* .CommonGUI */ .z.initColorGUI(cloudGUI, mat, "skyColor");\n    cloudGUI.add(mat, "bottomStrength", 0.0, 5.0);\n    _CommonGUI_js__WEBPACK_IMPORTED_MODULE_2__/* .CommonGUI */ .z.initColorGUI(cloudGUI, mat, "rimColor");\n    cloudGUI.add(mat, "rimStrength", 0.0, 5.0);\n    cloudGUI.add(mat, "rimCenter", 0.0, 1.0);\n    cloudGUI.add(mat, "rimRange", 0.0, 1.0);\n    cloudGUI.open();\n  }\n}\nwindow.onload = () => {\n  const study = new Study();\n};\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjE0Mi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQXNEO0FBQ2pCO0FBQ007QUFDVTtBQUMzQjtBQUNnQztBQUVuRCxNQUFNUyxLQUFLLENBQUM7RUFDakJDLFdBQVdBLENBQUEsRUFBRztJQUNaLE1BQU1DLENBQUMsR0FBRyxHQUFHO0lBQ2IsTUFBTUMsQ0FBQyxHQUFHLEdBQUc7SUFFYixNQUFNQyxLQUFLLEdBQUdaLHVEQUFNLENBQUNhLFNBQVMsQ0FBQyxDQUFDO0lBQ2hDRCxLQUFLLENBQUNFLEdBQUcsR0FBRyxJQUFJVCxpREFBRyxDQUFDLFFBQVEsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDO0lBQ3ZDTCx1REFBTSxDQUFDZSxTQUFTLENBQUNILEtBQUssQ0FBQztJQUN2QixNQUFNSSxNQUFNLEdBQUdoQix1REFBTSxDQUFDaUIsVUFBVSxDQUFDTCxLQUFLLEVBQUVGLENBQUMsRUFBRUMsQ0FBQyxDQUFDO0lBQzdDLE1BQU1PLFFBQVEsR0FBR2xCLHVEQUFNLENBQUNtQixZQUFZLENBQUNULENBQUMsRUFBRUMsQ0FBQyxDQUFDO0lBQzFDLE1BQU1TLE9BQU8sR0FBR3BCLHVEQUFNLENBQUNxQixXQUFXLENBQUNMLE1BQU0sRUFBRUUsUUFBUSxDQUFDO0lBQ3BEbEIsdURBQU0sQ0FBQ3NCLFVBQVUsQ0FBQ1YsS0FBSyxDQUFDO0lBQ3hCLE1BQU1XLEdBQUcsR0FBRyxJQUFJLENBQUNDLFVBQVUsQ0FBQ1osS0FBSyxDQUFDO0lBRWxDLE1BQU1hLEdBQUcsR0FBRyxJQUFJdEIseURBQUcsQ0FBQyxDQUFDO0lBQ3JCSCx1REFBTSxDQUFDMEIsT0FBTyxDQUFDZCxLQUFLLEVBQUVhLEdBQUcsRUFBRVAsUUFBUSxDQUFDO0lBQ3BDLElBQUksQ0FBQ1MsT0FBTyxDQUFDRixHQUFHLEVBQUVGLEdBQUcsQ0FBQztJQUN0QnJCLHdFQUFTLENBQUMwQixFQUFFLENBQUMsTUFBTSxFQUFHQyxDQUFDLElBQUs7TUFDMUJYLFFBQVEsQ0FBQ1ksTUFBTSxDQUFDbEIsS0FBSyxFQUFFSSxNQUFNLENBQUM7SUFDaEMsQ0FBQyxDQUFDO0VBQ0o7RUFFQVEsVUFBVUEsQ0FBQ1osS0FBSyxFQUFFO0lBQ2hCLE1BQU1XLEdBQUcsR0FBRyxJQUFJeEIsd0VBQW1CLENBQUM7TUFDbENlLEdBQUcsRUFBRUYsS0FBSyxDQUFDRSxHQUFHLEtBQUtpQixTQUFTO01BQzVCQyxXQUFXLEVBQUU7SUFDZixDQUFDLENBQUM7SUFDRlQsR0FBRyxDQUFDVSxLQUFLLEdBQUcsSUFBSTdCLG1EQUFLLENBQUMsUUFBUSxDQUFDO0lBQy9CLE1BQU04QixNQUFNLEdBQUcsSUFBSTNCLDJEQUFhLENBQUMsQ0FBQztJQUNsQ2dCLEdBQUcsQ0FBQ1ksR0FBRyxHQUFHRCxNQUFNLENBQUNFLElBQUksQ0FBQyxzQkFBc0IsQ0FBQztJQUM3Q2IsR0FBRyxDQUFDYyxRQUFRLEdBQUcsSUFBSWpDLG1EQUFLLENBQUMsUUFBUSxDQUFDO0lBQ2xDbUIsR0FBRyxDQUFDZSxRQUFRLEdBQUcsSUFBSWxDLG1EQUFLLENBQUMsUUFBUSxDQUFDO0lBRWxDLE1BQU1tQyxNQUFNLEdBQUcsSUFBSWpDLG9EQUFNLENBQUNpQixHQUFHLENBQUM7SUFDOUJnQixNQUFNLENBQUNDLEtBQUssQ0FBQ0MsR0FBRyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsR0FBRyxDQUFDO0lBQzdCRixNQUFNLENBQUNHLFFBQVEsQ0FBQ0MsQ0FBQyxHQUFHLENBQUM7SUFFckIvQixLQUFLLENBQUNnQyxHQUFHLENBQUNMLE1BQU0sQ0FBQztJQUNqQixPQUFPaEIsR0FBRztFQUNaO0VBRUFJLE9BQU9BLENBQUNGLEdBQUcsRUFBRUYsR0FBRyxFQUFFO0lBQ2hCdEIsNkRBQVMsQ0FBQzRDLHFCQUFxQixDQUFDcEIsR0FBRyxFQUFFRixHQUFHLENBQUM7SUFFekMsTUFBTXVCLFFBQVEsR0FBR3JCLEdBQUcsQ0FBQ3NCLFNBQVMsQ0FBQyxhQUFhLENBQUM7SUFDN0M5Qyw2REFBUyxDQUFDK0MsWUFBWSxDQUFDRixRQUFRLEVBQUV2QixHQUFHLEVBQUUsVUFBVSxDQUFDO0lBQ2pEdUIsUUFBUSxDQUFDRixHQUFHLENBQUNyQixHQUFHLEVBQUUsZ0JBQWdCLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQztJQUM3Q3RCLDZEQUFTLENBQUMrQyxZQUFZLENBQUNGLFFBQVEsRUFBRXZCLEdBQUcsRUFBRSxVQUFVLENBQUM7SUFDakR1QixRQUFRLENBQUNGLEdBQUcsQ0FBQ3JCLEdBQUcsRUFBRSxhQUFhLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQztJQUMxQ3VCLFFBQVEsQ0FBQ0YsR0FBRyxDQUFDckIsR0FBRyxFQUFFLFdBQVcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDO0lBQ3hDdUIsUUFBUSxDQUFDRixHQUFHLENBQUNyQixHQUFHLEVBQUUsVUFBVSxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUM7SUFFdkN1QixRQUFRLENBQUNHLElBQUksQ0FBQyxDQUFDO0VBQ2pCO0FBQ0Y7QUFFQUMsTUFBTSxDQUFDQyxNQUFNLEdBQUcsTUFBTTtFQUNwQixNQUFNQyxLQUFLLEdBQUcsSUFBSTVDLEtBQUssQ0FBQyxDQUFDO0FBQzNCLENBQUMsQyIsInNvdXJjZXMiOlsid2VicGFjazovL3RocmVlanMtc2hhZGVyLW1hdGVyaWFscy8uL2RlbW9TcmMvZGVtb1Nwcml0ZUNsb3VkLmpzPzdhZWUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU3ByaXRlQ2xvdWRNYXRlcmlhbCB9IGZyb20gXCIuLi9lc20vaW5kZXguanNcIjtcbmltcG9ydCB7IENvbW1vbiB9IGZyb20gXCIuL0NvbW1vbi5qc1wiO1xuaW1wb3J0IHsgQ29tbW9uR1VJIH0gZnJvbSBcIi4vQ29tbW9uR1VJLmpzXCI7XG5pbXBvcnQgeyBSQUZUaWNrZXIgfSBmcm9tIFwiQG1hc2F0b21ha2luby9yYWYtdGlja2VyXCI7XG5pbXBvcnQgR1VJIGZyb20gXCJsaWwtZ3VpXCI7XG5pbXBvcnQgeyBDb2xvciwgRm9nLCBTcHJpdGUsIFRleHR1cmVMb2FkZXIgfSBmcm9tIFwidGhyZWVcIjtcblxuZXhwb3J0IGNsYXNzIFN0dWR5IHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgY29uc3QgVyA9IDY0MDtcbiAgICBjb25zdCBIID0gNDgwO1xuXG4gICAgY29uc3Qgc2NlbmUgPSBDb21tb24uaW5pdFNjZW5lKCk7XG4gICAgc2NlbmUuZm9nID0gbmV3IEZvZygweDU1Nzc5OSwgMzAwLCA2MDApO1xuICAgIENvbW1vbi5pbml0TGlnaHQoc2NlbmUpO1xuICAgIGNvbnN0IGNhbWVyYSA9IENvbW1vbi5pbml0Q2FtZXJhKHNjZW5lLCBXLCBIKTtcbiAgICBjb25zdCByZW5kZXJlciA9IENvbW1vbi5pbml0UmVuZGVyZXIoVywgSCk7XG4gICAgY29uc3QgY29udHJvbCA9IENvbW1vbi5pbml0Q29udHJvbChjYW1lcmEsIHJlbmRlcmVyKTtcbiAgICBDb21tb24uaW5pdEhlbHBlcihzY2VuZSk7XG4gICAgY29uc3QgbWF0ID0gdGhpcy5pbml0T2JqZWN0KHNjZW5lKTtcblxuICAgIGNvbnN0IGd1aSA9IG5ldyBHVUkoKTtcbiAgICBDb21tb24uaW5pdFNreShzY2VuZSwgZ3VpLCByZW5kZXJlcik7XG4gICAgdGhpcy5pbml0R1VJKGd1aSwgbWF0KTtcbiAgICBSQUZUaWNrZXIub24oXCJ0aWNrXCIsIChlKSA9PiB7XG4gICAgICByZW5kZXJlci5yZW5kZXIoc2NlbmUsIGNhbWVyYSk7XG4gICAgfSk7XG4gIH1cblxuICBpbml0T2JqZWN0KHNjZW5lKSB7XG4gICAgY29uc3QgbWF0ID0gbmV3IFNwcml0ZUNsb3VkTWF0ZXJpYWwoe1xuICAgICAgZm9nOiBzY2VuZS5mb2cgIT09IHVuZGVmaW5lZCxcbiAgICAgIHRyYW5zcGFyZW50OiB0cnVlLFxuICAgIH0pO1xuICAgIG1hdC5jb2xvciA9IG5ldyBDb2xvcigweGRkZGRkZCk7XG4gICAgY29uc3QgbG9hZGVyID0gbmV3IFRleHR1cmVMb2FkZXIoKTtcbiAgICBtYXQubWFwID0gbG9hZGVyLmxvYWQoXCIuL3RleHR1cmVzL2Nsb3VkLnBuZ1wiKTtcbiAgICBtYXQuc2t5Q29sb3IgPSBuZXcgQ29sb3IoMHg5OWFhYmIpO1xuICAgIG1hdC5yaW1Db2xvciA9IG5ldyBDb2xvcigweGZmZmZmZik7XG5cbiAgICBjb25zdCBzcHJpdGUgPSBuZXcgU3ByaXRlKG1hdCk7XG4gICAgc3ByaXRlLnNjYWxlLnNldCg0MCwgNDAsIDEuMCk7XG4gICAgc3ByaXRlLnBvc2l0aW9uLnggPSAwO1xuXG4gICAgc2NlbmUuYWRkKHNwcml0ZSk7XG4gICAgcmV0dXJuIG1hdDtcbiAgfVxuXG4gIGluaXRHVUkoZ3VpLCBtYXQpIHtcbiAgICBDb21tb25HVUkuaW5pdFNwcml0ZU1hdGVyaWFsR1VJKGd1aSwgbWF0KTtcblxuICAgIGNvbnN0IGNsb3VkR1VJID0gZ3VpLmFkZEZvbGRlcihcIlNwcml0ZUNsb3VkXCIpO1xuICAgIENvbW1vbkdVSS5pbml0Q29sb3JHVUkoY2xvdWRHVUksIG1hdCwgXCJza3lDb2xvclwiKTtcbiAgICBjbG91ZEdVSS5hZGQobWF0LCBcImJvdHRvbVN0cmVuZ3RoXCIsIDAuMCwgNS4wKTtcbiAgICBDb21tb25HVUkuaW5pdENvbG9yR1VJKGNsb3VkR1VJLCBtYXQsIFwicmltQ29sb3JcIik7XG4gICAgY2xvdWRHVUkuYWRkKG1hdCwgXCJyaW1TdHJlbmd0aFwiLCAwLjAsIDUuMCk7XG4gICAgY2xvdWRHVUkuYWRkKG1hdCwgXCJyaW1DZW50ZXJcIiwgMC4wLCAxLjApO1xuICAgIGNsb3VkR1VJLmFkZChtYXQsIFwicmltUmFuZ2VcIiwgMC4wLCAxLjApO1xuXG4gICAgY2xvdWRHVUkub3BlbigpO1xuICB9XG59XG5cbndpbmRvdy5vbmxvYWQgPSAoKSA9PiB7XG4gIGNvbnN0IHN0dWR5ID0gbmV3IFN0dWR5KCk7XG59O1xuIl0sIm5hbWVzIjpbIlNwcml0ZUNsb3VkTWF0ZXJpYWwiLCJDb21tb24iLCJDb21tb25HVUkiLCJSQUZUaWNrZXIiLCJHVUkiLCJDb2xvciIsIkZvZyIsIlNwcml0ZSIsIlRleHR1cmVMb2FkZXIiLCJTdHVkeSIsImNvbnN0cnVjdG9yIiwiVyIsIkgiLCJzY2VuZSIsImluaXRTY2VuZSIsImZvZyIsImluaXRMaWdodCIsImNhbWVyYSIsImluaXRDYW1lcmEiLCJyZW5kZXJlciIsImluaXRSZW5kZXJlciIsImNvbnRyb2wiLCJpbml0Q29udHJvbCIsImluaXRIZWxwZXIiLCJtYXQiLCJpbml0T2JqZWN0IiwiZ3VpIiwiaW5pdFNreSIsImluaXRHVUkiLCJvbiIsImUiLCJyZW5kZXIiLCJ1bmRlZmluZWQiLCJ0cmFuc3BhcmVudCIsImNvbG9yIiwibG9hZGVyIiwibWFwIiwibG9hZCIsInNreUNvbG9yIiwicmltQ29sb3IiLCJzcHJpdGUiLCJzY2FsZSIsInNldCIsInBvc2l0aW9uIiwieCIsImFkZCIsImluaXRTcHJpdGVNYXRlcmlhbEdVSSIsImNsb3VkR1VJIiwiYWRkRm9sZGVyIiwiaW5pdENvbG9yR1VJIiwib3BlbiIsIndpbmRvdyIsIm9ubG9hZCIsInN0dWR5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///6142\n')},6865:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   D: () => (/* binding */ fragment),\n/* harmony export */   u: () => (/* binding */ vertex)\n/* harmony export */ });\n/**\n * SpriteMaterialに準じたシェーダー\n *\n * @see : https://github.com/mrdoob/three.js/blob/master/src/renderers/shaders/ShaderLib/sprite.glsl.js\n */\n// language=GLSL\nconst vertex = /* GLSL */`\n#include <sprite_vertex_uniform_chunk>\n\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n\t#include <uv_vertex>\n\t#include <sprite_mv_position_chunk>\n\n\tgl_Position = projectionMatrix * mvPosition;\n\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}`;\n// language=GLSL\nconst fragment = /* GLSL */`\n#include <sprite_fragment_uniform_chunk>\n\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n\t#include <clipping_planes_fragment>\n\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\n\toutgoingLight = diffuseColor.rgb;\n\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\n}`;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjg2NS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sTUFBTUEsTUFBTSxHQUFHLFVBQVk7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNPLE1BQU1DLFFBQVEsR0FBRyxVQUFZO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdGhyZWVqcy1zaGFkZXItbWF0ZXJpYWxzLy4vZXNtL1NoYWRlclNwcml0ZU1hdGVyaWFsLmdsc2wuanM/OGFhMyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFNwcml0ZU1hdGVyaWFs44Gr5rqW44GY44Gf44K344Kn44O844OA44O8XG4gKlxuICogQHNlZSA6IGh0dHBzOi8vZ2l0aHViLmNvbS9tcmRvb2IvdGhyZWUuanMvYmxvYi9tYXN0ZXIvc3JjL3JlbmRlcmVycy9zaGFkZXJzL1NoYWRlckxpYi9zcHJpdGUuZ2xzbC5qc1xuICovXG4vLyBsYW5ndWFnZT1HTFNMXG5leHBvcnQgY29uc3QgdmVydGV4ID0gLyogR0xTTCAqLyBgXG4jaW5jbHVkZSA8c3ByaXRlX3ZlcnRleF91bmlmb3JtX2NodW5rPlxuXG4jaW5jbHVkZSA8Y29tbW9uPlxuI2luY2x1ZGUgPHV2X3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPGZvZ19wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc192ZXJ0ZXg+XG5cbnZvaWQgbWFpbigpIHtcblx0I2luY2x1ZGUgPHV2X3ZlcnRleD5cblx0I2luY2x1ZGUgPHNwcml0ZV9tdl9wb3NpdGlvbl9jaHVuaz5cblxuXHRnbF9Qb3NpdGlvbiA9IHByb2plY3Rpb25NYXRyaXggKiBtdlBvc2l0aW9uO1xuXG5cdCNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl92ZXJ0ZXg+XG5cdCNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfdmVydGV4PlxuXHQjaW5jbHVkZSA8Zm9nX3ZlcnRleD5cbn1gO1xuLy8gbGFuZ3VhZ2U9R0xTTFxuZXhwb3J0IGNvbnN0IGZyYWdtZW50ID0gLyogR0xTTCAqLyBgXG4jaW5jbHVkZSA8c3ByaXRlX2ZyYWdtZW50X3VuaWZvcm1fY2h1bms+XG5cbiNpbmNsdWRlIDxjb21tb24+XG4jaW5jbHVkZSA8dXZfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxtYXBfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxhbHBoYW1hcF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGFscGhhdGVzdF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGFscGhhaGFzaF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGZvZ19wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfZnJhZ21lbnQ+XG5cbnZvaWQgbWFpbigpIHtcblxuXHQjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX2ZyYWdtZW50PlxuXG5cdHZlYzMgb3V0Z29pbmdMaWdodCA9IHZlYzMoIDAuMCApO1xuXHR2ZWM0IGRpZmZ1c2VDb2xvciA9IHZlYzQoIGRpZmZ1c2UsIG9wYWNpdHkgKTtcblxuXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxtYXBfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxhbHBoYW1hcF9mcmFnbWVudD5cblx0I2luY2x1ZGUgPGFscGhhdGVzdF9mcmFnbWVudD5cblx0I2luY2x1ZGUgPGFscGhhaGFzaF9mcmFnbWVudD5cblxuXHRvdXRnb2luZ0xpZ2h0ID0gZGlmZnVzZUNvbG9yLnJnYjtcblxuXHQjaW5jbHVkZSA8b3BhcXVlX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8dG9uZW1hcHBpbmdfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxjb2xvcnNwYWNlX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8Zm9nX2ZyYWdtZW50PlxuXG59YDtcbiJdLCJuYW1lcyI6WyJ2ZXJ0ZXgiLCJmcmFnbWVudCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///6865\n")},2882:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  m: () => (/* binding */ SpriteChunk)\n});\n\n// EXTERNAL MODULE: ./node_modules/three/build/three.module.js\nvar three_module = __webpack_require__(6075);\n;// CONCATENATED MODULE: ./esm/chunk/GLSLChunk.js\n\n/**\n * ShaderChunkに登録を行うGLSLのコード片を格納するクラス。\n * GLSLコードの共有化を目的とする。\n */\nclass GLSLChunk {\n  /**\n   * ShaderChunkに登録する名前。\n   */\n  static getChunkName() {\n    return "";\n  }\n  /**\n   * ShaderChunkに登録するGLSLコード。\n   */\n  static getChunk() {\n    return "";\n  }\n  /**\n   * Chunkに関連する定数Defineを格納したオブジェクトを取得する。\n   * @see https://threejs.org/docs/#api/en/materials/ShaderMaterial.defines\n   */\n  static getDefines() {\n    return {};\n  }\n  /**\n   * ShaderChunkにGLSLコードを登録する。\n   */\n  static registerChunk() {\n    if (three_module/* ShaderChunk */.WdD && three_module/* ShaderChunk */.WdD[this.getChunkName()] == null) {\n      three_module/* ShaderChunk */.WdD[this.getChunkName()] = this.getChunk();\n    }\n  }\n  /**\n   * Chunkに関連する共有変数Uniformsを格納したオブジェクトを取得する。\n   * @see https://threejs.org/docs/#api/en/materials/ShaderMaterial.uniforms\n   */\n  static getUniform() {\n    return {};\n  }\n}\n;// CONCATENATED MODULE: ./esm/chunk/SpriteChunk.js\n\n\n/**\n * SpriteMaterialと同等の機能を備えたShaderMaterialを実装するために必要なGLSLコードを格納したクラス。\n */\nclass SpriteChunk extends GLSLChunk {\n  static registerChunk() {\n    SpriteVertexUniformChunk.registerChunk();\n    SpriteFragmentUniformChunk.registerChunk();\n    SpriteDiffuseColorChunk.registerChunk();\n    SpriteMVPositionChunk.registerChunk();\n  }\n  static getUniform() {\n    return three_module/* UniformsUtils */.rDY.merge([three_module/* UniformsLib */.rBU.sprite, three_module/* UniformsLib */.rBU.fog, three_module/* UniformsLib */.rBU.lights]);\n  }\n}\nclass SpriteVertexUniformChunk extends GLSLChunk {\n  static getChunkName() {\n    return "sprite_vertex_uniform_chunk";\n  }\n  static getChunk() {\n    return /* GLSL */`\n      uniform float rotation;\n      uniform vec2 center;\n    `;\n  }\n}\nclass SpriteFragmentUniformChunk extends GLSLChunk {\n  static getChunkName() {\n    return "sprite_fragment_uniform_chunk";\n  }\n  static getChunk() {\n    return /* GLSL */`\n      uniform vec3 diffuse;\n      uniform float opacity;\n    `;\n  }\n}\nclass SpriteDiffuseColorChunk extends GLSLChunk {\n  static getChunkName() {\n    return "sprite_diffuse_color_chunk";\n  }\n  static getChunk() {\n    return /* GLSL */`\n      vec3 outgoingLight = vec3( 0.0 );\n      vec4 diffuseColor = vec4( diffuse, opacity );\n    `;\n  }\n}\nclass SpriteMVPositionChunk extends GLSLChunk {\n  static getChunkName() {\n    return "sprite_mv_position_chunk";\n  }\n  static getChunk() {\n    return /* GLSL */`\n\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n    `;\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjg4Mi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBb0M7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDTyxNQUFNQyxTQUFTLENBQUM7RUFDbkI7QUFDSjtBQUNBO0VBQ0ksT0FBT0MsWUFBWUEsQ0FBQSxFQUFHO0lBQ2xCLE9BQU8sRUFBRTtFQUNiO0VBQ0E7QUFDSjtBQUNBO0VBQ0ksT0FBT0MsUUFBUUEsQ0FBQSxFQUFHO0lBQ2QsT0FBTyxFQUFFO0VBQ2I7RUFDQTtBQUNKO0FBQ0E7QUFDQTtFQUNJLE9BQU9DLFVBQVVBLENBQUEsRUFBRztJQUNoQixPQUFPLENBQUMsQ0FBQztFQUNiO0VBQ0E7QUFDSjtBQUNBO0VBQ0ksT0FBT0MsYUFBYUEsQ0FBQSxFQUFHO0lBQ25CLElBQUlMLGlDQUFXLElBQUlBLGlDQUFXLENBQUMsSUFBSSxDQUFDRSxZQUFZLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxFQUFFO01BQ3pERixpQ0FBVyxDQUFDLElBQUksQ0FBQ0UsWUFBWSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQ0MsUUFBUSxDQUFDLENBQUM7SUFDdEQ7RUFDSjtFQUNBO0FBQ0o7QUFDQTtBQUNBO0VBQ0ksT0FBT0csVUFBVUEsQ0FBQSxFQUFHO0lBQ2hCLE9BQU8sQ0FBQyxDQUFDO0VBQ2I7QUFDSixDOztBQ3hDMkM7QUFDUTtBQUNuRDtBQUNBO0FBQ0E7QUFDTyxNQUFNRyxXQUFXLFNBQVNSLFNBQVMsQ0FBQztFQUN2QyxPQUFPSSxhQUFhQSxDQUFBLEVBQUc7SUFDbkJLLHdCQUF3QixDQUFDTCxhQUFhLENBQUMsQ0FBQztJQUN4Q00sMEJBQTBCLENBQUNOLGFBQWEsQ0FBQyxDQUFDO0lBQzFDTyx1QkFBdUIsQ0FBQ1AsYUFBYSxDQUFDLENBQUM7SUFDdkNRLHFCQUFxQixDQUFDUixhQUFhLENBQUMsQ0FBQztFQUN6QztFQUNBLE9BQU9DLFVBQVVBLENBQUEsRUFBRztJQUNoQixPQUFPRSxtQ0FBYSxDQUFDTSxLQUFLLENBQUMsQ0FDdkJQLGlDQUFXLENBQUNRLE1BQU0sRUFDbEJSLGlDQUFXLENBQUNTLEdBQUcsRUFDZlQsaUNBQVcsQ0FBQ1UsTUFBTSxDQUNyQixDQUFDO0VBQ047QUFDSjtBQUNBLE1BQU1QLHdCQUF3QixTQUFTVCxTQUFTLENBQUM7RUFDN0MsT0FBT0MsWUFBWUEsQ0FBQSxFQUFHO0lBQ2xCLE9BQU8sNkJBQTZCO0VBQ3hDO0VBQ0EsT0FBT0MsUUFBUUEsQ0FBQSxFQUFHO0lBQ2QsT0FBTyxVQUFZO0FBQzNCO0FBQ0E7QUFDQSxLQUFLO0VBQ0Q7QUFDSjtBQUNBLE1BQU1RLDBCQUEwQixTQUFTVixTQUFTLENBQUM7RUFDL0MsT0FBT0MsWUFBWUEsQ0FBQSxFQUFHO0lBQ2xCLE9BQU8sK0JBQStCO0VBQzFDO0VBQ0EsT0FBT0MsUUFBUUEsQ0FBQSxFQUFHO0lBQ2QsT0FBTyxVQUFZO0FBQzNCO0FBQ0E7QUFDQSxLQUFLO0VBQ0Q7QUFDSjtBQUNBLE1BQU1TLHVCQUF1QixTQUFTWCxTQUFTLENBQUM7RUFDNUMsT0FBT0MsWUFBWUEsQ0FBQSxFQUFHO0lBQ2xCLE9BQU8sNEJBQTRCO0VBQ3ZDO0VBQ0EsT0FBT0MsUUFBUUEsQ0FBQSxFQUFHO0lBQ2QsT0FBTyxVQUFZO0FBQzNCO0FBQ0E7QUFDQSxLQUFLO0VBQ0Q7QUFDSjtBQUNBLE1BQU1VLHFCQUFxQixTQUFTWixTQUFTLENBQUM7RUFDMUMsT0FBT0MsWUFBWUEsQ0FBQSxFQUFHO0lBQ2xCLE9BQU8sMEJBQTBCO0VBQ3JDO0VBQ0EsT0FBT0MsUUFBUUEsQ0FBQSxFQUFHO0lBQ2QsT0FBTyxVQUFZO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0VBQ0Q7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL3RocmVlanMtc2hhZGVyLW1hdGVyaWFscy8uL2VzbS9jaHVuay9HTFNMQ2h1bmsuanM/NjJhNyIsIndlYnBhY2s6Ly90aHJlZWpzLXNoYWRlci1tYXRlcmlhbHMvLi9lc20vY2h1bmsvU3ByaXRlQ2h1bmsuanM/OTM3YiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTaGFkZXJDaHVuayB9IGZyb20gXCJ0aHJlZVwiO1xuLyoqXG4gKiBTaGFkZXJDaHVua+OBq+eZu+mMsuOCkuihjOOBhkdMU0zjga7jgrPjg7zjg4nniYfjgpLmoLzntI3jgZnjgovjgq/jg6njgrnjgIJcbiAqIEdMU0zjgrPjg7zjg4njga7lhbHmnInljJbjgpLnm67nmoTjgajjgZnjgovjgIJcbiAqL1xuZXhwb3J0IGNsYXNzIEdMU0xDaHVuayB7XG4gICAgLyoqXG4gICAgICogU2hhZGVyQ2h1bmvjgavnmbvpjLLjgZnjgovlkI3liY3jgIJcbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0Q2h1bmtOYW1lKCkge1xuICAgICAgICByZXR1cm4gXCJcIjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2hhZGVyQ2h1bmvjgavnmbvpjLLjgZnjgotHTFNM44Kz44O844OJ44CCXG4gICAgICovXG4gICAgc3RhdGljIGdldENodW5rKCkge1xuICAgICAgICByZXR1cm4gXCJcIjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2h1bmvjgavplqLpgKPjgZnjgovlrprmlbBEZWZpbmXjgpLmoLzntI3jgZfjgZ/jgqrjg5bjgrjjgqfjgq/jg4jjgpLlj5blvpfjgZnjgovjgIJcbiAgICAgKiBAc2VlIGh0dHBzOi8vdGhyZWVqcy5vcmcvZG9jcy8jYXBpL2VuL21hdGVyaWFscy9TaGFkZXJNYXRlcmlhbC5kZWZpbmVzXG4gICAgICovXG4gICAgc3RhdGljIGdldERlZmluZXMoKSB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2hhZGVyQ2h1bmvjgatHTFNM44Kz44O844OJ44KS55m76Yyy44GZ44KL44CCXG4gICAgICovXG4gICAgc3RhdGljIHJlZ2lzdGVyQ2h1bmsoKSB7XG4gICAgICAgIGlmIChTaGFkZXJDaHVuayAmJiBTaGFkZXJDaHVua1t0aGlzLmdldENodW5rTmFtZSgpXSA9PSBudWxsKSB7XG4gICAgICAgICAgICBTaGFkZXJDaHVua1t0aGlzLmdldENodW5rTmFtZSgpXSA9IHRoaXMuZ2V0Q2h1bmsoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBDaHVua+OBq+mWoumAo+OBmeOCi+WFseacieWkieaVsFVuaWZvcm1z44KS5qC857SN44GX44Gf44Kq44OW44K444Kn44Kv44OI44KS5Y+W5b6X44GZ44KL44CCXG4gICAgICogQHNlZSBodHRwczovL3RocmVlanMub3JnL2RvY3MvI2FwaS9lbi9tYXRlcmlhbHMvU2hhZGVyTWF0ZXJpYWwudW5pZm9ybXNcbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0VW5pZm9ybSgpIHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgIH1cbn1cbiIsImltcG9ydCB7IEdMU0xDaHVuayB9IGZyb20gXCIuL0dMU0xDaHVuay5qc1wiO1xuaW1wb3J0IHsgVW5pZm9ybXNMaWIsIFVuaWZvcm1zVXRpbHMgfSBmcm9tIFwidGhyZWVcIjtcbi8qKlxuICogU3ByaXRlTWF0ZXJpYWzjgajlkIznrYnjga7mqZ/og73jgpLlgpnjgYjjgZ9TaGFkZXJNYXRlcmlhbOOCkuWun+ijheOBmeOCi+OBn+OCgeOBq+W/heimgeOBqkdMU0zjgrPjg7zjg4njgpLmoLzntI3jgZfjgZ/jgq/jg6njgrnjgIJcbiAqL1xuZXhwb3J0IGNsYXNzIFNwcml0ZUNodW5rIGV4dGVuZHMgR0xTTENodW5rIHtcbiAgICBzdGF0aWMgcmVnaXN0ZXJDaHVuaygpIHtcbiAgICAgICAgU3ByaXRlVmVydGV4VW5pZm9ybUNodW5rLnJlZ2lzdGVyQ2h1bmsoKTtcbiAgICAgICAgU3ByaXRlRnJhZ21lbnRVbmlmb3JtQ2h1bmsucmVnaXN0ZXJDaHVuaygpO1xuICAgICAgICBTcHJpdGVEaWZmdXNlQ29sb3JDaHVuay5yZWdpc3RlckNodW5rKCk7XG4gICAgICAgIFNwcml0ZU1WUG9zaXRpb25DaHVuay5yZWdpc3RlckNodW5rKCk7XG4gICAgfVxuICAgIHN0YXRpYyBnZXRVbmlmb3JtKCkge1xuICAgICAgICByZXR1cm4gVW5pZm9ybXNVdGlscy5tZXJnZShbXG4gICAgICAgICAgICBVbmlmb3Jtc0xpYi5zcHJpdGUsXG4gICAgICAgICAgICBVbmlmb3Jtc0xpYi5mb2csXG4gICAgICAgICAgICBVbmlmb3Jtc0xpYi5saWdodHMsXG4gICAgICAgIF0pO1xuICAgIH1cbn1cbmNsYXNzIFNwcml0ZVZlcnRleFVuaWZvcm1DaHVuayBleHRlbmRzIEdMU0xDaHVuayB7XG4gICAgc3RhdGljIGdldENodW5rTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIFwic3ByaXRlX3ZlcnRleF91bmlmb3JtX2NodW5rXCI7XG4gICAgfVxuICAgIHN0YXRpYyBnZXRDaHVuaygpIHtcbiAgICAgICAgcmV0dXJuIC8qIEdMU0wgKi8gYFxuICAgICAgdW5pZm9ybSBmbG9hdCByb3RhdGlvbjtcbiAgICAgIHVuaWZvcm0gdmVjMiBjZW50ZXI7XG4gICAgYDtcbiAgICB9XG59XG5jbGFzcyBTcHJpdGVGcmFnbWVudFVuaWZvcm1DaHVuayBleHRlbmRzIEdMU0xDaHVuayB7XG4gICAgc3RhdGljIGdldENodW5rTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIFwic3ByaXRlX2ZyYWdtZW50X3VuaWZvcm1fY2h1bmtcIjtcbiAgICB9XG4gICAgc3RhdGljIGdldENodW5rKCkge1xuICAgICAgICByZXR1cm4gLyogR0xTTCAqLyBgXG4gICAgICB1bmlmb3JtIHZlYzMgZGlmZnVzZTtcbiAgICAgIHVuaWZvcm0gZmxvYXQgb3BhY2l0eTtcbiAgICBgO1xuICAgIH1cbn1cbmNsYXNzIFNwcml0ZURpZmZ1c2VDb2xvckNodW5rIGV4dGVuZHMgR0xTTENodW5rIHtcbiAgICBzdGF0aWMgZ2V0Q2h1bmtOYW1lKCkge1xuICAgICAgICByZXR1cm4gXCJzcHJpdGVfZGlmZnVzZV9jb2xvcl9jaHVua1wiO1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0Q2h1bmsoKSB7XG4gICAgICAgIHJldHVybiAvKiBHTFNMICovIGBcbiAgICAgIHZlYzMgb3V0Z29pbmdMaWdodCA9IHZlYzMoIDAuMCApO1xuICAgICAgdmVjNCBkaWZmdXNlQ29sb3IgPSB2ZWM0KCBkaWZmdXNlLCBvcGFjaXR5ICk7XG4gICAgYDtcbiAgICB9XG59XG5jbGFzcyBTcHJpdGVNVlBvc2l0aW9uQ2h1bmsgZXh0ZW5kcyBHTFNMQ2h1bmsge1xuICAgIHN0YXRpYyBnZXRDaHVua05hbWUoKSB7XG4gICAgICAgIHJldHVybiBcInNwcml0ZV9tdl9wb3NpdGlvbl9jaHVua1wiO1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0Q2h1bmsoKSB7XG4gICAgICAgIHJldHVybiAvKiBHTFNMICovIGBcblx0dmVjNCBtdlBvc2l0aW9uID0gbW9kZWxWaWV3TWF0cml4ICogdmVjNCggMC4wLCAwLjAsIDAuMCwgMS4wICk7XG5cblx0dmVjMiBzY2FsZTtcblx0c2NhbGUueCA9IGxlbmd0aCggdmVjMyggbW9kZWxNYXRyaXhbIDAgXS54LCBtb2RlbE1hdHJpeFsgMCBdLnksIG1vZGVsTWF0cml4WyAwIF0ueiApICk7XG5cdHNjYWxlLnkgPSBsZW5ndGgoIHZlYzMoIG1vZGVsTWF0cml4WyAxIF0ueCwgbW9kZWxNYXRyaXhbIDEgXS55LCBtb2RlbE1hdHJpeFsgMSBdLnogKSApO1xuXG5cdCNpZm5kZWYgVVNFX1NJWkVBVFRFTlVBVElPTlxuXHRcdGJvb2wgaXNQZXJzcGVjdGl2ZSA9ICggcHJvamVjdGlvbk1hdHJpeFsgMiBdWyAzIF0gPT0gLSAxLjAgKTtcblx0XHRpZiAoIGlzUGVyc3BlY3RpdmUgKSBzY2FsZSAqPSAtIG12UG9zaXRpb24uejtcblx0I2VuZGlmXG5cblx0dmVjMiBhbGlnbmVkUG9zaXRpb24gPSAoIHBvc2l0aW9uLnh5IC0gKCBjZW50ZXIgLSB2ZWMyKCAwLjUgKSApICkgKiBzY2FsZTtcblxuXHR2ZWMyIHJvdGF0ZWRQb3NpdGlvbjtcblx0cm90YXRlZFBvc2l0aW9uLnggPSBjb3MoIHJvdGF0aW9uICkgKiBhbGlnbmVkUG9zaXRpb24ueCAtIHNpbiggcm90YXRpb24gKSAqIGFsaWduZWRQb3NpdGlvbi55O1xuXHRyb3RhdGVkUG9zaXRpb24ueSA9IHNpbiggcm90YXRpb24gKSAqIGFsaWduZWRQb3NpdGlvbi54ICsgY29zKCByb3RhdGlvbiApICogYWxpZ25lZFBvc2l0aW9uLnk7XG5cdG12UG9zaXRpb24ueHkgKz0gcm90YXRlZFBvc2l0aW9uO1xuICAgIGA7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbIlNoYWRlckNodW5rIiwiR0xTTENodW5rIiwiZ2V0Q2h1bmtOYW1lIiwiZ2V0Q2h1bmsiLCJnZXREZWZpbmVzIiwicmVnaXN0ZXJDaHVuayIsImdldFVuaWZvcm0iLCJVbmlmb3Jtc0xpYiIsIlVuaWZvcm1zVXRpbHMiLCJTcHJpdGVDaHVuayIsIlNwcml0ZVZlcnRleFVuaWZvcm1DaHVuayIsIlNwcml0ZUZyYWdtZW50VW5pZm9ybUNodW5rIiwiU3ByaXRlRGlmZnVzZUNvbG9yQ2h1bmsiLCJTcHJpdGVNVlBvc2l0aW9uQ2h1bmsiLCJtZXJnZSIsInNwcml0ZSIsImZvZyIsImxpZ2h0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///2882\n')},2722:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval('\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  Ns: () => (/* reexport */ Directions),\n  zG: () => (/* reexport */ SpriteCloudMaterial)\n});\n\n// UNUSED EXPORTS: AnimationChunk, CellularNoiseMaterial, ContourMaterial, CrossGridMaterial, ExpansionChunk, ExpansionDissolveMaterial, ExpansionMaterial, ExpansionUniformChunk, ExpansionVertexChunk, FBMDissolveMaterial, FBMFireMaterial, GLSLChunk, HalftoneGridMaterial, HexDissolveMaterial, HexGridChunk, HexGridMaterial, MapChunk, MaskMapChunk, MeshPhongChunk, OuterGlowMaterial, RepeatPatternChunk, ReversibleChunk, RimBasicMaterial, RimBasicNodeMaterial, RimEffectMaterial, ShaderBasicMaterial, ShaderLineMaterial, ShaderPhongMaterial, ShaderSpriteMaterial, SkyCloudMaterial, SolidClippingMaterial, SpriteChunk, SquareGridMaterial, SurfaceNormalChunk, SurfaceNormalVaryingChunk, SurfaceNormalVertexChunk, SwirlMaterial, TilingFBMChunk, WavyAnimationChunk\n\n// EXTERNAL MODULE: ./esm/chunk/SpriteChunk.js + 1 modules\nvar SpriteChunk = __webpack_require__(2882);\n;// CONCATENATED MODULE: ./esm/chunk/WavyAnimationChunk.js\n\n\n/**\n * IWaveAnimatableインターフェースで定義されたアニメーションを実装するためのGLSLチャンク。\n * 実行にはグリッドid値が必要。idはvec2。\n * 結果はdiffuseColor.aに反映される。\n */\nclass WavyAnimationChunk_WavyAnimationChunk extends (/* unused pure expression or super */ null && (AnimationChunk)) {\n  static registerChunk() {\n    super.registerChunk();\n    WavyAnimationFragmentChunk.registerChunk();\n    WavyAnimationUniformChunk.registerChunk();\n  }\n  static getUniform() {\n    const uniforms = {\n      raisedBottom: {\n        value: 0.05\n      },\n      waveFrequency: {\n        value: 0.2\n      },\n      wavePow: {\n        value: 4.0\n      },\n      direction: {\n        value: Directions.vertical\n      }\n    };\n    return {\n      ...super.getUniform(),\n      ...uniforms\n    };\n  }\n}\nclass WavyAnimationFragmentChunk extends (/* unused pure expression or super */ null && (GLSLChunk)) {\n  static getChunkName() {\n    return "wavy_animation_fragment_chunk";\n  }\n  static getChunk() {\n    return /* GLSL */`\n    float distance = id.y;\n    if( direction == ${Directions.horizontal}){\n      distance = id.x;\n    }else if( direction == ${Directions.radial} ){\n      distance = length(id.xy);\n    }\n\n    float wavy = isAnimate\n      ? pow( sin( (distance * waveFrequency - time) ), wavePow) + raisedBottom\n      : 1.0;\n  \n    diffuseColor.a *= wavy;\n    `;\n  }\n}\nclass WavyAnimationUniformChunk extends (/* unused pure expression or super */ null && (GLSLChunk)) {\n  static getChunkName() {\n    return "wavy_animation_uniform_chunk";\n  }\n  static getChunk() {\n    return /* GLSL */`\n    uniform float raisedBottom;\n    uniform float waveFrequency;\n    uniform float wavePow;\n    uniform int direction;\n    `;\n  }\n}\n/**\n * Wavyアニメーションの波及方向を示すenum。\n */\nvar Directions;\n(function (Directions) {\n  Directions[Directions["vertical"] = 4] = "vertical";\n  Directions[Directions["horizontal"] = 3] = "horizontal";\n  /**\n   * id値(0,0)を中心に同心円状に波及する。\n   */\n  Directions[Directions["radial"] = 5] = "radial";\n})(Directions || (Directions = {}));\n;// CONCATENATED MODULE: ./esm/chunk/index.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n;// CONCATENATED MODULE: ./esm/ShaderPhongMaterial.js\n\n\n\n/**\n * MeshPhongMaterialに準じるShaderMaterialクラス。\n *\n * @see https://github.com/mrdoob/three.js/blob/76c64b23d422dcfb36a28353f45b1effa1f68c5a/src/renderers/shaders/ShaderLib.js#L53\n */\nclass ShaderPhongMaterial_ShaderPhongMaterial extends (/* unused pure expression or super */ null && (ShaderMaterial)) {\n  /**\n   * コンストラクタ。\n   * @param vertexShader\n   * @param fragmentShader\n   * @param parameters\n   */\n  constructor(vertexShader, fragmentShader, parameters) {\n    super(parameters);\n    this._opacity = 1.0;\n    parameters ??= {};\n    vertexShader ??= vertex;\n    fragmentShader ??= fragment;\n    this.initChunks();\n    this.initUniforms();\n    this.initDefines();\n    this.vertexShader = vertexShader;\n    this.fragmentShader = fragmentShader;\n    this.initDefaultSetting(parameters);\n  }\n  /**\n   * このMaterialに必要なuniformsを生成する。\n   */\n  static getBasicUniforms() {\n    return UniformsUtils.merge([UniformsLib.common, UniformsLib.specularmap, UniformsLib.envmap, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.emissivemap, UniformsLib.bumpmap, UniformsLib.normalmap, UniformsLib.displacementmap, UniformsLib.gradientmap, UniformsLib.fog, UniformsLib.lights, {\n      emissive: {\n        value: new Color(0x000000)\n      },\n      specular: {\n        value: new Color(0x111111)\n      },\n      shininess: {\n        value: 30\n      },\n      hasAlphaMap: {\n        value: false\n      }\n    }, SurfaceNormalChunk.getUniform(), ExpansionChunk.getUniform(), MapChunk.getUniform()]);\n  }\n  /**\n   * ShaderChunkにこのマテリアルに必要なChunkを追加する。\n   */\n  initChunks() {\n    MeshPhongChunk.registerChunk();\n    SurfaceNormalChunk.registerChunk();\n    ExpansionChunk.registerChunk();\n    MapChunk.registerChunk();\n  }\n  /**\n   * uniformsを初期化する。\n   */\n  initUniforms() {\n    this.uniforms = UniformsUtils.merge([ShaderPhongMaterial_ShaderPhongMaterial.getBasicUniforms(), ExpansionChunk.getUniform(), {}]);\n  }\n  /**\n   * definesを初期化する。\n   */\n  initDefines() {\n    this.defines = Object.assign({}, MeshPhongChunk.getDefines(), SurfaceNormalChunk.getDefines(), ExpansionChunk.getDefines(), this.defines);\n  }\n  /**\n   * 1.オプションで指定されなかったパラメーター値を補完する。\n   * 2.uniformsに代入する必要のあるパラメーターを明示的に代入する。\n   *\n   * @param parameters\n   */\n  initDefaultSetting(parameters) {\n    this.uniformOpacity = this._opacity;\n    this.lights = true; //FIXME シェーダーがエラーを起こすのでlights設定は強制でON\n    // パラメータでtransparentフラグが指定されていない場合、デフォルトで透明にします。\n    // これは、フラグメントシェーダー内でalphaを利用してパターンの描画を行うためです。\n    if (parameters?.transparent == null) {\n      this.transparent = true;\n    }\n  }\n  /**\n   * MeshPhongマテリアルと互換性を持つために、colorプロパティはdiffuseへ代入される。\n   */\n  get color() {\n    return this.uniforms.diffuse.value;\n  }\n  set color(value) {\n    this.uniforms.diffuse.value = value;\n  }\n  /**\n   * 透明度\n   * @deprecated Use uniformOpacity, To be removed in version 0.3.0\n   * @see https://github.com/microsoft/TypeScript/pull/37894\n   */\n  //@ts-ignore : これはopacityプロパティとuniforms.opacityプロパティを同期するために利用されます。\n  get opacity() {\n    return this.uniformOpacity;\n  }\n  /**\n   * 透明度\n   */\n  get uniformOpacity() {\n    return this._opacity;\n  }\n  /**\n   * 透明度\n   * @param value\n   * @deprecated Use uniformOpacity, To be removed in version 0.3.0\n   * @see https://github.com/microsoft/TypeScript/pull/37894\n   */\n  //@ts-ignore : これはopacityプロパティとuniforms.opacityプロパティを同期するために利用されます。\n  set opacity(value) {\n    this.uniformOpacity = value;\n  }\n  /**\n   * 透明度\n   * opacityは基底クラスのMaterialのコンストラクタ内で明示的に1.0が代入される。\n   * この段階でuniformsはundefinedなので、そのままでは初期化できない。\n   * このsetterでは受け取った値をprivate変数に保存して、初期化後にuniformsに再代入する。\n   * @param value\n   */\n  set uniformOpacity(value) {\n    this._opacity = value;\n    if (this.uniforms?.opacity) {\n      this.uniforms.opacity.value = value;\n    }\n  }\n  get emissive() {\n    return this.uniforms.emissive.value;\n  }\n  set emissive(value) {\n    this.uniforms.emissive.value = value;\n  }\n  get map() {\n    return MapChunk.getMap(this);\n  }\n  set map(val) {\n    MapChunk.setMap(this, val);\n    this.onSetMap(val);\n  }\n  onSetMap(val) {}\n  get alphaMap() {\n    return this.uniforms.alphaMap.value;\n  }\n  set alphaMap(value) {\n    this.uniforms.alphaMap.value = value;\n    this.uniforms.hasAlphaMap.value = value != null;\n    this.onSetAlphaMap(value);\n  }\n  onSetAlphaMap(value) {}\n  /**\n   * 発光状態のために、マテリアルの設定をまとめて変更する。\n   * {@link https://stackoverflow.com/questions/37647853/three-js-depthwrite-vs-depthtest-for-transparent-canvas-texture-map-on-three-p}\n   */\n  startGlow() {\n    this.alphaTest = 0.0;\n    this.depthWrite = false;\n    this.blending = AdditiveBlending;\n  }\n}\n// EXTERNAL MODULE: ./esm/ShaderSpriteMaterial.glsl.js\nvar ShaderSpriteMaterial_glsl = __webpack_require__(6865);\n// EXTERNAL MODULE: ./node_modules/three/build/three.module.js\nvar three_module = __webpack_require__(6075);\n;// CONCATENATED MODULE: ./esm/ShaderSpriteMaterial.js\n\n\n\nclass ShaderSpriteMaterial extends three_module/* ShaderMaterial */.jyz {\n  /**\n   * コンストラクタ。\n   * @param vertexShader\n   * @param fragmentShader\n   * @param parameters\n   */\n  constructor(vertexShader, fragmentShader, parameters) {\n    super(parameters);\n    /**\n     * @default true\n     */\n    this.sizeAttenuation = true;\n    this._opacity = 1.0;\n    parameters ??= {};\n    vertexShader ??= ShaderSpriteMaterial_glsl/* vertex */.u;\n    fragmentShader ??= ShaderSpriteMaterial_glsl/* fragment */.D;\n    this.initChunks();\n    this.initUniforms();\n    this.initDefines();\n    this.vertexShader = vertexShader;\n    this.fragmentShader = fragmentShader;\n    this.initDefaultSetting(parameters);\n  }\n  /**\n   * ShaderChunkにこのマテリアルに必要なChunkを追加する。\n   */\n  initChunks() {\n    SpriteChunk/* SpriteChunk */.m.registerChunk();\n  }\n  /**\n   * uniformsを初期化する。\n   */\n  initUniforms() {\n    this.uniforms = three_module/* UniformsUtils */.rDY.merge([SpriteChunk/* SpriteChunk */.m.getUniform(), {\n      uvTransform: {\n        value: new three_module/* Matrix3 */.Vkp()\n      }\n    }]);\n  }\n  /**\n   * definesを初期化する。\n   */\n  initDefines() {\n    this.defines = Object.assign({}, SpriteChunk/* SpriteChunk */.m.getDefines(), this.defines);\n  }\n  /**\n   * 1.オプションで指定されなかったパラメーター値を補完する。\n   * 2.uniformsに代入する必要のあるパラメーターを明示的に代入する。\n   *\n   * @param parameters\n   */\n  initDefaultSetting(parameters) {\n    this.uniformOpacity = this._opacity;\n  }\n  /**\n   * 透明度\n   * @deprecated Use uniformOpacity, To be removed in version 0.3.0\n   * @see https://github.com/microsoft/TypeScript/pull/37894\n   */\n  //@ts-ignore : これはopacityプロパティとuniforms.opacityプロパティを同期するために利用されます。\n  get opacity() {\n    return this._opacity;\n  }\n  /**\n   * 透明度\n   */\n  get uniformOpacity() {\n    return this._opacity;\n  }\n  /**\n   * 透明度\n   * @deprecated Use uniformOpacity, To be removed in version 0.3.0\n   * @param value\n   */\n  //@ts-ignore : これはopacityプロパティとuniforms.opacityプロパティを同期するために利用されます。\n  set opacity(value) {\n    this.uniformOpacity = value;\n  }\n  /**\n   * 透明度\n   * opacityは基底クラスのMaterialのコンストラクタ内で明示的に1.0が代入される。\n   * この段階でuniformsはundefinedなので、そのままでは初期化できない。\n   * このsetterでは受け取った値をprivate変数に保存して、初期化後にuniformsに再代入する。\n   * @param value\n   */\n  set uniformOpacity(value) {\n    this._opacity = value;\n    if (this.uniforms?.opacity) {\n      this.uniforms.opacity.value = value;\n    }\n  }\n  /**\n   * Spriteマテリアルと互換性を持つために、colorプロパティはdiffuseへ代入される。\n   */\n  get color() {\n    return this.uniforms.diffuse.value;\n  }\n  set color(value) {\n    this.uniforms.diffuse.value = value;\n  }\n  get center() {\n    return this.uniforms.center.value;\n  }\n  set center(value) {\n    this.uniforms.center.value = value;\n  }\n  get rotation() {\n    return this.uniforms.rotation.value;\n  }\n  set rotation(value) {\n    this.uniforms.rotation.value = value;\n  }\n  get uvTransform() {\n    return this.uniforms.uvTransform.value;\n  }\n  set uvTransform(value) {\n    this.uniforms.uvTransform.value = value;\n  }\n  get map() {\n    return this.uniforms.map.value;\n  }\n  set map(value) {\n    this.uniforms.map.value = value;\n  }\n  get alphaMap() {\n    return this.uniforms.alphaMap.value;\n  }\n  set alphaMap(value) {\n    this.uniforms.alphaMap.value = value;\n  }\n}\n;// CONCATENATED MODULE: ./esm/ShaderBasicMaterial.js\n\n\n\n/**\n * MeshBasicMaterialに準じたShaderMaterial\n */\nclass ShaderBasicMaterial_ShaderBasicMaterial extends (/* unused pure expression or super */ null && (ShaderMaterial)) {\n  /**\n   * @param vertexShader\n   * @param fragmentShader\n   * @param parameters\n   */\n  constructor(vertexShader, fragmentShader, parameters) {\n    super(parameters);\n    this._opacity = 1.0;\n    this.uniforms = ShaderBasicMaterial_ShaderBasicMaterial.getBasicUniforms();\n    this.vertexShader = vertexShader ?? vertex;\n    this.fragmentShader = fragmentShader ?? fragment;\n    SurfaceNormalChunk.registerChunk();\n    this.initDefines();\n    this.uniformOpacity = this._opacity;\n  }\n  /**\n   * このMaterialに必要なuniformsを生成する。\n   *\n   * @see https://github.com/mrdoob/three.js/blob/0c26bb4bb8220126447c8373154ac045588441de/src/renderers/shaders/ShaderLib.js#L11\n   */\n  static getBasicUniforms() {\n    return UniformsUtils.merge([UniformsLib.common, UniformsLib.specularmap, UniformsLib.envmap, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.fog]);\n  }\n  get color() {\n    return this.uniforms.diffuse.value;\n  }\n  set color(value) {\n    this.uniforms.diffuse.value = value;\n  }\n  get uniformOpacity() {\n    return this._opacity;\n  }\n  set uniformOpacity(value) {\n    this._opacity = value;\n    if (this.uniforms?.opacity) {\n      this.uniforms.opacity.value = value;\n    }\n  }\n  initDefines() {\n    this.defines = Object.assign({}, SurfaceNormalChunk.getDefines(), this.defines);\n  }\n}\n;// CONCATENATED MODULE: ./esm/contour/ContourMaterial.js\n\n\n\n\n/**\n * テクスチャを等高線状にマップするマテリアル。\n * マッピング以外の機能はMeshPhongMaterialに準じる。\n */\nclass ContourMaterial extends (/* unused pure expression or super */ null && (ShaderPhongMaterial)) {\n  get map() {\n    return this._map;\n  }\n  loadMap(url, geo) {\n    this._map = new TextureLoader().load(url, texture => {\n      if (this.uniforms && this.uniforms.map) {\n        this.uniforms.map.value = texture;\n      }\n    });\n    geo.computeBoundingBox();\n    this.uniforms.top.value = geo.boundingBox.max.y;\n    this.uniforms.bottom.value = geo.boundingBox.min.y;\n  }\n  constructor(parameters) {\n    super(vertex, fragment, parameters);\n  }\n  initDefines() {\n    super.initDefines();\n    this.defines.USE_MESH_POSITION = true;\n  }\n  initUniforms() {\n    this.uniforms = UniformsUtils.merge([ShaderPhongMaterial.getBasicUniforms(), {\n      top: {\n        value: 1.0\n      },\n      bottom: {\n        value: -1.0\n      }\n    }]);\n  }\n  initDefaultSetting(parameters) {\n    super.initDefaultSetting(parameters);\n    if (this.transparent && parameters.alphaTest == null) {\n      this.alphaTest = 0.5;\n    }\n    if (parameters.side == null) {\n      this.side = DoubleSide;\n    } else {\n      this.side = parameters.side;\n    }\n  }\n}\n;// CONCATENATED MODULE: ./esm/GridMaterial.js\n\n\n\n/**\n * グリッド状に分割されたマテリアル。\n */\nclass GridMaterial_GridMaterial extends (/* unused pure expression or super */ null && (ShaderPhongMaterial)) {\n  get division() {\n    return this.uniforms.division.value;\n  }\n  set division(value) {\n    this.uniforms.division.value = value;\n  }\n  get divisionScaleX() {\n    return this.uniforms.divisionScaleX.value;\n  }\n  set divisionScaleX(value) {\n    this.uniforms.divisionScaleX.value = value;\n  }\n  get isReversed() {\n    return this.uniforms.isReversed.value;\n  }\n  set isReversed(value) {\n    this.uniforms.isReversed.value = value;\n  }\n  get maskTexture() {\n    return MaskMapChunk.getMaskTexture(this);\n  }\n  set maskTexture(val) {\n    MaskMapChunk.setMaskTexture(this, val);\n  }\n  initChunks() {\n    super.initChunks();\n    MaskMapChunk.registerChunk();\n    ReversibleChunk.registerChunk();\n  }\n  static getBasicUniforms() {\n    return UniformsUtils.merge([ShaderPhongMaterial.getBasicUniforms(), ReversibleChunk.getUniform(), MaskMapChunk.getUniform(), RepeatPatternChunk.getUniform()]);\n  }\n}\n// EXTERNAL MODULE: ./node_modules/@masatomakino/raf-ticker/esm/index.js + 3 modules\nvar esm = __webpack_require__(5429);\n;// CONCATENATED MODULE: ./esm/WavyGridMaterial.js\n\n\n\n\n/**\n * グリッド状に分割され、Wavyアニメーションを行うマテリアル。\n */\nclass WavyGridMaterial_WavyGridMaterial extends (/* unused pure expression or super */ null && (GridMaterial)) {\n  addTime(delta) {\n    AnimationChunk.addTime(this, delta);\n  }\n  /**\n   * 波アニメーションを行うか否か。\n   */\n  get isAnimate() {\n    return this.uniforms.isAnimate.value;\n  }\n  set isAnimate(value) {\n    this.uniforms.isAnimate.value = value;\n    if (this.isAnimate) {\n      this.startAnimation();\n    } else {\n      this.stopAnimation();\n    }\n  }\n  /**\n   * 波の振幅\n   * 1の場合、幅1ヘックス\n   * 0.5の場合、幅2ヘックスになる\n   */\n  get waveFrequency() {\n    return this.uniforms.waveFrequency.value;\n  }\n  set waveFrequency(value) {\n    this.uniforms.waveFrequency.value = value;\n  }\n  get wavePow() {\n    return this.uniforms.wavePow.value;\n  }\n  set wavePow(value) {\n    this.uniforms.wavePow.value = value;\n  }\n  /**\n   * 明るさの底上げ\n   */\n  get raisedBottom() {\n    return this.uniforms.raisedBottom.value;\n  }\n  set raisedBottom(value) {\n    this.uniforms.raisedBottom.value = value;\n  }\n  /**\n   * 波が発生する方角\n   */\n  get direction() {\n    return this.uniforms.direction.value;\n  }\n  set direction(value) {\n    this.uniforms.direction.value = value;\n  }\n  constructor(vertexShader, fragmentShader, parameters) {\n    super(vertexShader, fragmentShader, parameters);\n    /**\n     * 波の速度\n     * 0.5にすると1の半分の速度になる。\n     * マイナスを指定すると、波の進行方向が反転する。\n     */\n    this.speed = -0.5;\n    /*\n     * IAnimatable implements\n     */\n    this.animationListener = e => {\n      this.addTime(e.delta / 1000);\n    };\n    this.isAnimate = this.isAnimate; //reset and start animation\n  }\n  initChunks() {\n    super.initChunks();\n    WavyAnimationChunk.registerChunk();\n  }\n  static getBasicUniforms() {\n    return UniformsUtils.merge([super.getBasicUniforms(), ReversibleChunk.getUniform(), WavyAnimationChunk.getUniform(), MaskMapChunk.getUniform()]);\n  }\n  initDefaultSetting(parameters) {\n    super.initDefaultSetting(parameters);\n  }\n  startAnimation() {\n    RAFTicker.on("onBeforeTick", this.animationListener);\n  }\n  stopAnimation() {\n    RAFTicker.off("onBeforeTick", this.animationListener);\n  }\n}\n;// CONCATENATED MODULE: ./esm/crossGrid/CrossGridMaterial.js\n\n\n\n\n/**\n * 十字線を正方形グリッドの中心に描画するマテリアル。\n */\nclass CrossGridMaterial extends (/* unused pure expression or super */ null && (WavyGridMaterial)) {\n  /**\n   * グリッド線の太さ\n   * 0.0で線なし、0.5でグリッド面なしになる。\n   */\n  get gridWeight() {\n    return this.uniforms.gridWeight.value;\n  }\n  set gridWeight(value) {\n    this.uniforms.gridWeight.value = value;\n  }\n  get radius() {\n    return this.uniforms.radius.value;\n  }\n  set radius(value) {\n    this.uniforms.radius.value = value;\n  }\n  constructor(parameters) {\n    super(vertex, fragment, parameters);\n  }\n  initUniforms() {\n    this.uniforms = UniformsUtils.merge([WavyGridMaterial.getBasicUniforms(), {\n      gridWeight: {\n        value: 0.03\n      },\n      radius: {\n        value: 0.15\n      }\n    }]);\n  }\n}\n;// CONCATENATED MODULE: ./esm/halftoneGrid/HalftoneGridMaterial.js\n\n\n\n\n/**\n * MaskMapをハーフトーン分解するマテリアル\n */\nclass HalftoneGridMaterial extends (/* unused pure expression or super */ null && (WavyGridMaterial)) {\n  get radius() {\n    return this.uniforms.radius.value;\n  }\n  set radius(value) {\n    this.uniforms.radius.value = value;\n  }\n  constructor(parameters) {\n    super(vertex, fragment, parameters);\n  }\n  initUniforms() {\n    this.uniforms = UniformsUtils.merge([WavyGridMaterial.getBasicUniforms(), {\n      radius: {\n        value: 0.75\n      }\n    }]);\n  }\n}\n;// CONCATENATED MODULE: ./esm/hexGrid/HexGridMaterial.js\n\n\n\n\n\n/**\n * 六角形グリッドマテリアル\n */\nclass HexGridMaterial extends (/* unused pure expression or super */ null && (WavyGridMaterial)) {\n  /**\n   * グリッド線の太さ\n   * 0.0で線なし、0.5でグリッド面なしになる。\n   */\n  get gridWeight() {\n    return this.uniforms.gridWeight.value;\n  }\n  set gridWeight(value) {\n    this.uniforms.gridWeight.value = value;\n  }\n  constructor(parameters) {\n    super(vertex, fragment, parameters);\n  }\n  initUniforms() {\n    this.uniforms = UniformsUtils.merge([WavyGridMaterial.getBasicUniforms(), {\n      gridWeight: {\n        value: 0.03\n      }\n    }]);\n  }\n  initChunks() {\n    super.initChunks();\n    HexGridChunk.registerChunk();\n  }\n}\n;// CONCATENATED MODULE: ./esm/squareGrid/SquareGridMaterial.js\n\n\n\n\n/**\n * 四角形グリッドマテリアル\n */\nclass SquareGridMaterial extends (/* unused pure expression or super */ null && (WavyGridMaterial)) {\n  /**\n   * グリッド線の太さ\n   * 0.0で線なし、0.5でグリッド面なしになる。\n   */\n  get gridWeight() {\n    return this.uniforms.gridWeight.value;\n  }\n  set gridWeight(value) {\n    this.uniforms.gridWeight.value = value;\n  }\n  constructor(parameters) {\n    super(vertex, fragment, parameters);\n  }\n  initUniforms() {\n    this.uniforms = UniformsUtils.merge([WavyGridMaterial.getBasicUniforms(), {\n      gridWeight: {\n        value: 0.03\n      }\n    }]);\n  }\n}\n;// CONCATENATED MODULE: ./esm/skyCloud/SkyCloudMaterial.js\n\n\n\n\n\n\nclass SkyCloudMaterial extends (/* unused pure expression or super */ null && (ShaderPhongMaterial)) {\n  get scale() {\n    return this.uniforms.scale.value;\n  }\n  set scale(value) {\n    this.uniforms.scale.value = value;\n  }\n  /*\n   * implements IAnimatable\n   */\n  addTime(delta) {\n    AnimationChunk.addTime(this, delta);\n  }\n  get isAnimate() {\n    return this.uniforms.isAnimate.value;\n  }\n  set isAnimate(value) {\n    this.uniforms.isAnimate.value = value;\n    if (this.isAnimate) {\n      this.startAnimation();\n    } else {\n      this.stopAnimation();\n    }\n  }\n  get skyColor() {\n    return this.uniforms.skyColor.value;\n  }\n  set skyColor(value) {\n    this.uniforms.skyColor.value = value;\n  }\n  get cloudVolume() {\n    return this.uniforms.cloudVolume.value;\n  }\n  set cloudVolume(value) {\n    this.uniforms.cloudVolume.value = value;\n  }\n  get cloudBottomVolume() {\n    return this.uniforms.cloudBottomVolume.value;\n  }\n  set cloudBottomVolume(value) {\n    this.uniforms.cloudBottomVolume.value = value;\n  }\n  get cloudBottomSaturation() {\n    return this.uniforms.cloudBottomSaturation.value;\n  }\n  set cloudBottomSaturation(value) {\n    this.uniforms.cloudBottomSaturation.value = value;\n  }\n  get cloudTransformSpeed() {\n    return this.uniforms.cloudTransformSpeed.value;\n  }\n  set cloudTransformSpeed(value) {\n    this.uniforms.cloudTransformSpeed.value = value;\n  }\n  /**\n   *\n   * @param parameters\n   */\n  constructor(parameters) {\n    super(vertex, fragment, parameters);\n    /**\n     * 波の速度\n     * 0.5にすると1の半分の速度になる。\n     * マイナスを指定すると、波の進行方向が反転する。\n     */\n    this.speed = -0.02;\n    /*\n     * IAnimatable implements\n     */\n    this.animationListener = e => {\n      this.addTime(e.delta / 1000);\n    };\n    this.isAnimate = this.isAnimate; //reset and start animation\n  }\n  initChunks() {\n    super.initChunks();\n    AnimationChunk.registerChunk();\n  }\n  initUniforms() {\n    this.uniforms = UniformsUtils.merge([ShaderPhongMaterial.getBasicUniforms(), AnimationChunk.getUniform(), {\n      scale: {\n        value: 3.0\n      },\n      cloudTransformSpeed: {\n        value: 0.15\n      },\n      cloudVolume: {\n        value: 16.0\n      },\n      cloudBottomVolume: {\n        value: 0.08\n      },\n      cloudBottomSaturation: {\n        value: 0.5\n      },\n      skyColor: {\n        value: new Color(0.101961, 0.619608, 0.666667)\n      }\n    }]);\n  }\n  startAnimation() {\n    RAFTicker.on("onBeforeTick", this.animationListener);\n  }\n  stopAnimation() {\n    RAFTicker.off("onBeforeTick", this.animationListener);\n  }\n}\n;// CONCATENATED MODULE: ./esm/fbmDissolve/FBMDissolveMaterial.js\n\n\n\n\n\nclass FBMDissolveMaterial extends (/* unused pure expression or super */ null && (ShaderPhongMaterial)) {\n  get tiles() {\n    return this.uniforms.tiles.value;\n  }\n  set tiles(value) {\n    this.uniforms.tiles.value = value;\n  }\n  get hashLoop() {\n    return this.uniforms.hashLoop.value;\n  }\n  set hashLoop(value) {\n    this.uniforms.hashLoop.value = value;\n  }\n  get amp() {\n    return this.uniforms.amp.value;\n  }\n  set amp(value) {\n    this.uniforms.amp.value = value;\n  }\n  get progress() {\n    return this.uniforms.progress.value;\n  }\n  set progress(value) {\n    this.uniforms.progress.value = value;\n  }\n  get edgeWeight() {\n    return this.uniforms.edgeWeight.value;\n  }\n  set edgeWeight(value) {\n    this.uniforms.edgeWeight.value = value;\n  }\n  get edgeColor() {\n    return this.uniforms.edgeColor.value;\n  }\n  set edgeColor(value) {\n    this.uniforms.edgeColor.value = value;\n  }\n  /**\n   *\n   * @param parameters\n   */\n  constructor(parameters) {\n    super(vertex, fragment, parameters);\n  }\n  initUniforms() {\n    this.uniforms = UniformsUtils.merge([ShaderPhongMaterial.getBasicUniforms(), TilingFBMChunk.getUniform(), {\n      progress: {\n        value: 0.0\n      },\n      edgeWeight: {\n        value: 0.1\n      },\n      edgeColor: {\n        value: new Color(1.0, 1.0, 1.0)\n      }\n    }]);\n  }\n  initChunks() {\n    super.initChunks();\n    TilingFBMChunk.registerChunk();\n  }\n  /**\n   * definesを初期化する。\n   */\n  initDefines() {\n    super.initDefines();\n    this.defines = Object.assign({}, TilingFBMChunk.getDefines(), this.defines);\n  }\n}\n;// CONCATENATED MODULE: ./esm/fbmFire/FBMFireMaterial.js\n\n\n\n\n\n\nclass FBMFireMaterial extends (/* unused pure expression or super */ null && (ShaderPhongMaterial)) {\n  get tiles() {\n    return this.uniforms.tiles.value;\n  }\n  set tiles(value) {\n    this.uniforms.tiles.value = value;\n  }\n  get hashLoop() {\n    return this.uniforms.hashLoop.value;\n  }\n  set hashLoop(value) {\n    this.uniforms.hashLoop.value = value;\n  }\n  get amp() {\n    return this.uniforms.amp.value;\n  }\n  set amp(value) {\n    this.uniforms.amp.value = value;\n  }\n  /*\n   * IAnimatable implements\n   */\n  addTime(delta) {\n    AnimationChunk.addTime(this, delta);\n  }\n  /**\n   * アニメーションを行うか否か。\n   */\n  get isAnimate() {\n    return this.uniforms.isAnimate.value;\n  }\n  set isAnimate(value) {\n    this.uniforms.isAnimate.value = value;\n    if (this.isAnimate) {\n      this.startAnimation();\n    } else {\n      this.stopAnimation();\n    }\n  }\n  get strength() {\n    return this.uniforms.strength.value;\n  }\n  set strength(value) {\n    this.uniforms.strength.value = value;\n  }\n  get bloom() {\n    return this.uniforms.bloom.value;\n  }\n  set bloom(value) {\n    this.uniforms.bloom.value = value;\n  }\n  get rimPow() {\n    return this.uniforms.rimPow.value;\n  }\n  set rimPow(value) {\n    this.uniforms.rimPow.value = value;\n  }\n  get rimStrength() {\n    return this.uniforms.rimStrength.value;\n  }\n  set rimStrength(value) {\n    this.uniforms.rimStrength.value = value;\n  }\n  /**\n   *\n   * @param parameters\n   */\n  constructor(parameters) {\n    super(vertex, fragment, parameters);\n    /**\n     * 波の速度\n     * 0.5にすると1の半分の速度になる。\n     * マイナスを指定すると、波の進行方向が反転する。\n     */\n    this.speed = -0.5;\n    /*\n     * IAnimatable implements\n     */\n    this.animationListener = e => {\n      this.addTime(e.delta / 1000);\n    };\n    this.isAnimate = this.isAnimate; //reset and start animation\n  }\n  initUniforms() {\n    this.uniforms = UniformsUtils.merge([ShaderPhongMaterial.getBasicUniforms(), TilingFBMChunk.getUniform(), AnimationChunk.getUniform(), {\n      strength: {\n        value: 0.45\n      },\n      bloom: {\n        value: 0.1\n      },\n      rimStrength: {\n        value: 1.0\n      },\n      rimPow: {\n        value: 1.0\n      }\n    }]);\n  }\n  initChunks() {\n    super.initChunks();\n    TilingFBMChunk.registerChunk();\n    AnimationChunk.registerChunk();\n  }\n  initDefines() {\n    super.initDefines();\n    this.defines = Object.assign({}, TilingFBMChunk.getDefines(), this.defines);\n    this.defines.USE_SURFACE_NORMAL = true;\n  }\n  initDefaultSetting(parameters) {\n    super.initDefaultSetting(parameters);\n  }\n  startAnimation() {\n    RAFTicker.on("onBeforeTick", this.animationListener);\n  }\n  stopAnimation() {\n    RAFTicker.off("onBeforeTick", this.animationListener);\n  }\n}\n;// CONCATENATED MODULE: ./esm/rimBasic/RimBasicMaterial.js\n\n\n\nclass RimBasicMaterial extends (/* unused pure expression or super */ null && (ShaderBasicMaterial)) {\n  get rimPow() {\n    return this.uniforms.rimPow.value;\n  }\n  set rimPow(value) {\n    this.uniforms.rimPow.value = value;\n  }\n  get rimStrength() {\n    return this.uniforms.rimStrength.value;\n  }\n  set rimStrength(value) {\n    this.uniforms.rimStrength.value = value;\n  }\n  get rimColor() {\n    return this.uniforms.rimColor.value;\n  }\n  set rimColor(value) {\n    this.uniforms.rimColor.value = value;\n  }\n  get insidePow() {\n    return this.uniforms.insidePow.value;\n  }\n  set insidePow(value) {\n    this.uniforms.insidePow.value = value;\n  }\n  get insideStrength() {\n    return this.uniforms.insideStrength.value;\n  }\n  set insideStrength(value) {\n    this.uniforms.insideStrength.value = value;\n  }\n  get insideColor() {\n    return this.uniforms.insideColor.value;\n  }\n  set insideColor(value) {\n    this.uniforms.insideColor.value = value;\n  }\n  constructor(param) {\n    super(null, fragment, param);\n    this.uniforms = UniformsUtils.merge([ShaderBasicMaterial.getBasicUniforms(), RimBasicMaterial.getRimUniforms()]);\n    this.initDefines();\n  }\n  static getRimUniforms() {\n    return UniformsUtils.merge([{\n      rimColor: {\n        value: new Color(1.0, 1.0, 1.0)\n      },\n      rimStrength: {\n        value: 1.0\n      },\n      rimPow: {\n        value: 1.0\n      },\n      insideColor: {\n        value: new Color(0.0, 0.0, 0.0)\n      },\n      insideStrength: {\n        value: 1.0\n      },\n      insidePow: {\n        value: 1.0\n      }\n    }]);\n  }\n  initDefines() {\n    super.initDefines();\n    this.defines.USE_SURFACE_NORMAL = true;\n  }\n}\n// EXTERNAL MODULE: ./node_modules/three/examples/jsm/nodes/Nodes.js + 189 modules\nvar Nodes = __webpack_require__(3764);\n;// CONCATENATED MODULE: ./esm/tsl/RimFunction.js\n// Three.js Transpiler r165\n\nconst RimFunction_rimEffect = (0,Nodes/* tslFn */.l5R)(([rimColor, rimPow, rimStrength, insideColor, insidePow, insideStrength]) => {\n  return rimAngleEffect(rimColor, rimPow, rimStrength, insideColor, insidePow, insideStrength, (0,Nodes/* vec3 */.R3C)(0.0, 0.0, 1.0));\n});\nconst rimAngleEffect = (0,Nodes/* tslFn */.l5R)(([rimColor, rimPow, rimStrength, insideColor, insidePow, insideStrength, angle]) => {\n  const addColor = (0,Nodes/* vec3 */.R3C)(0.0, 0.0, 0.0).toVar();\n  const rimAngle = (0,Nodes/* max */.Fp7)(0.0, Nodes/* transformedNormalView */.xAL.dot((0,Nodes/* vec3 */.R3C)(angle)));\n  const rimGlow = (0,Nodes/* sub */.luU)(1.0, rimAngle);\n  rimGlow.assign((0,Nodes/* pow */.sQ3)(rimGlow, rimPow));\n  addColor.rgb.addAssign(rimColor.mul(rimGlow.mul(rimStrength)));\n  const insideGlow = (0,Nodes/* pow */.sQ3)(rimAngle, insidePow);\n  addColor.rgb.addAssign(insideColor.mul(insideGlow.mul(insideStrength)));\n  return addColor;\n});\n;// CONCATENATED MODULE: ./esm/rimBasic/RimBasicNodeMaterial.js\n\n\n\nclass RimBasicNodeMaterial extends (/* unused pure expression or super */ null && (MeshBasicNodeMaterial)) {\n  constructor() {\n    super();\n    this.rimColor = uniform(new Color(1, 1, 1));\n    this.rimStrength = uniform(1.0);\n    this.rimPow = uniform(1.0);\n    this.insideColor = uniform(new Color(0.0, 0.0, 0.0));\n    this.insideStrength = uniform(1.0);\n    this.insidePow = uniform(1.0);\n    this.colorNode = materialColor.add(rimEffect(this.rimColor, this.rimPow, this.rimStrength, this.insideColor, this.insidePow, this.insideStrength));\n  }\n}\n;// CONCATENATED MODULE: ./esm/rimEffect/RimEffectMaterial.js\n\n\n\nclass RimEffectMaterial_RimEffectMaterial extends (/* unused pure expression or super */ null && (ShaderPhongMaterial)) {\n  get rimPow() {\n    return this.uniforms.rimPow.value;\n  }\n  set rimPow(value) {\n    this.uniforms.rimPow.value = value;\n  }\n  get rimStrength() {\n    return this.uniforms.rimStrength.value;\n  }\n  set rimStrength(value) {\n    this.uniforms.rimStrength.value = value;\n  }\n  get rimColor() {\n    return this.uniforms.rimColor.value;\n  }\n  set rimColor(value) {\n    this.uniforms.rimColor.value = value;\n  }\n  get insidePow() {\n    return this.uniforms.insidePow.value;\n  }\n  set insidePow(value) {\n    this.uniforms.insidePow.value = value;\n  }\n  get insideStrength() {\n    return this.uniforms.insideStrength.value;\n  }\n  set insideStrength(value) {\n    this.uniforms.insideStrength.value = value;\n  }\n  get insideColor() {\n    return this.uniforms.insideColor.value;\n  }\n  set insideColor(value) {\n    this.uniforms.insideColor.value = value;\n  }\n  /**\n   *\n   * @param parameters\n   */\n  constructor(parameters) {\n    super(null, fragment, parameters);\n  }\n  initUniforms() {\n    this.uniforms = UniformsUtils.merge([ShaderPhongMaterial.getBasicUniforms(), {\n      rimColor: {\n        value: new Color(1.0, 1.0, 1.0)\n      },\n      rimStrength: {\n        value: 1.0\n      },\n      rimPow: {\n        value: 1.0\n      },\n      insideColor: {\n        value: new Color(0.0, 0.0, 0.0)\n      },\n      insideStrength: {\n        value: 1.0\n      },\n      insidePow: {\n        value: 1.0\n      }\n    }]);\n  }\n  initDefines() {\n    super.initDefines();\n    this.defines.USE_LIGHT = true;\n    this.defines.USE_SURFACE_NORMAL = true;\n  }\n}\n;// CONCATENATED MODULE: ./esm/rimEffect/OuterGlowMaterial.js\n\n/**\n * モデルの外周を発光させるマテリアル。\n * 縁の発光と膨張を掛け合わせて、元のモデルの周辺を発光させる。\n */\nclass OuterGlowMaterial extends (/* unused pure expression or super */ null && (RimEffectMaterial)) {\n  get expansionStrength() {\n    return this.uniforms.expansionStrength.value;\n  }\n  set expansionStrength(value) {\n    this.uniforms.expansionStrength.value = value;\n  }\n  initDefines() {\n    super.initDefines();\n    this.defines.USE_LIGHT = false;\n    this.defines.USE_EXPANSION = true;\n  }\n}\n;// CONCATENATED MODULE: ./esm/expansion/ExpansionMaterial.js\n\nclass ExpansionMaterial extends (/* unused pure expression or super */ null && (ShaderPhongMaterial)) {\n  get expansionStrength() {\n    return this.uniforms.expansionStrength.value;\n  }\n  set expansionStrength(value) {\n    this.uniforms.expansionStrength.value = value;\n  }\n  constructor(parameters) {\n    super(null, null, parameters);\n  }\n  initDefines() {\n    super.initDefines();\n    this.defines.USE_EXPANSION = true;\n  }\n}\n// EXTERNAL MODULE: ./esm/spriteCloud/SpriteCloudMaterial.glsl.js\nvar SpriteCloudMaterial_glsl = __webpack_require__(2432);\n;// CONCATENATED MODULE: ./esm/spriteCloud/SpriteCloudMaterial.js\n\n\n\n\nclass SpriteCloudMaterial extends ShaderSpriteMaterial {\n  constructor(parameters) {\n    super(null, SpriteCloudMaterial_glsl/* fragment */.D, parameters);\n  }\n  /**\n   * uniformsを初期化する。\n   */\n  initUniforms() {\n    super.initUniforms();\n    this.uniforms = three_module/* UniformsUtils */.rDY.merge([this.uniforms, {\n      rimStrength: {\n        value: 0.2\n      },\n      bottomStrength: {\n        value: 0.75\n      },\n      rimColor: {\n        value: new three_module/* Color */.Ilk(0xffffff)\n      },\n      skyColor: {\n        value: new three_module/* Color */.Ilk(0xcccccc)\n      },\n      rimCenter: {\n        value: 0.6\n      },\n      rimRange: {\n        value: 0.15\n      }\n    }]);\n  }\n  initDefines() {\n    this.defines = Object.assign({\n      USE_UV: true\n    }, SpriteChunk/* SpriteChunk */.m.getDefines(), this.defines);\n  }\n  initDefaultSetting(parameters) {\n    super.initDefaultSetting(parameters);\n  }\n  get rimCenter() {\n    return this.uniforms.rimCenter.value;\n  }\n  set rimCenter(value) {\n    this.uniforms.rimCenter.value = value;\n  }\n  get rimRange() {\n    return this.uniforms.rimRange.value;\n  }\n  set rimRange(value) {\n    this.uniforms.rimRange.value = value;\n  }\n  get rimStrength() {\n    return this.uniforms.rimStrength.value;\n  }\n  set rimStrength(value) {\n    this.uniforms.rimStrength.value = value;\n  }\n  get bottomStrength() {\n    return this.uniforms.bottomStrength.value;\n  }\n  set bottomStrength(value) {\n    this.uniforms.bottomStrength.value = value;\n  }\n  get rimColor() {\n    return this.uniforms.rimColor.value;\n  }\n  set rimColor(value) {\n    this.uniforms.rimColor.value = value;\n  }\n  get skyColor() {\n    return this.uniforms.skyColor.value;\n  }\n  set skyColor(value) {\n    this.uniforms.skyColor.value = value;\n  }\n}\n;// CONCATENATED MODULE: ./esm/expansionDissolve/ExpansionDissolveMaterial.js\n\n\n\n\n/**\n * FBMノイズによるジオメトリの膨張でディゾルブを行うマテリアル。\n * 爆発しながら消滅するような表現になる。\n * 膨張の進行度合いはprogressで制御する。\n */\nclass ExpansionDissolveMaterial extends (/* unused pure expression or super */ null && (ShaderPhongMaterial)) {\n  addTime(delta) {\n    if (this.isAnimate) {\n      AnimationChunk.addTime(this, delta);\n    }\n  }\n  get isAnimate() {\n    return this.uniforms.isAnimate.value;\n  }\n  set isAnimate(value) {\n    this.uniforms.isAnimate.value = value;\n    if (this.isAnimate) {\n      this.startAnimation();\n    } else {\n      this.stopAnimation();\n    }\n  }\n  // ITiledFBM //\n  get tiles() {\n    return this.uniforms.tiles.value;\n  }\n  set tiles(value) {\n    this.uniforms.tiles.value = value;\n  }\n  get hashLoop() {\n    return this.uniforms.hashLoop.value;\n  }\n  set hashLoop(value) {\n    this.uniforms.hashLoop.value = value;\n  }\n  get amp() {\n    return this.uniforms.amp.value;\n  }\n  set amp(value) {\n    this.uniforms.amp.value = value;\n  }\n  get scaleMax() {\n    return this.uniforms.scaleMax.value;\n  }\n  set scaleMax(value) {\n    this.uniforms.scaleMax.value = value;\n  }\n  get time() {\n    return this.uniforms.time.value;\n  }\n  set time(value) {\n    this.uniforms.time.value = value;\n  }\n  get progress() {\n    return this.uniforms.progress.value;\n  }\n  set progress(value) {\n    this.uniforms.progress.value = value;\n  }\n  get dissolveColor() {\n    return this.uniforms.dissolveColor.value;\n  }\n  set dissolveColor(value) {\n    this.uniforms.dissolveColor.value = value;\n  }\n  get dissolveOutColor() {\n    return this.uniforms.dissolveOutColor.value;\n  }\n  set dissolveOutColor(value) {\n    this.uniforms.dissolveOutColor.value = value;\n  }\n  /**\n   *\n   * @param parameters\n   */\n  constructor(parameters) {\n    super(vertex, fragment, parameters);\n    // IAnimatable //\n    this.speed = -0.5;\n    /*\n     * IAnimatable implements\n     */\n    this.animationListener = e => {\n      this.addTime(e.delta / 1000);\n    };\n    this.isAnimate = this.isAnimate;\n  }\n  initUniforms() {\n    this.uniforms = UniformsUtils.merge([ShaderPhongMaterial.getBasicUniforms(), TilingFBMChunk.getUniform(), AnimationChunk.getUniform(), {\n      scaleMax: {\n        value: 20.0\n      },\n      progress: {\n        value: 0.0\n      },\n      dissolveColor: {\n        value: new Color(1.0, 1.0, 1.0)\n      },\n      dissolveOutColor: {\n        value: new Color(0.0, 0.0, 0.0)\n      }\n    }]);\n  }\n  initChunks() {\n    super.initChunks();\n    TilingFBMChunk.registerChunk();\n  }\n  initDefines() {\n    super.initDefines();\n    this.defines = Object.assign(this.defines, TilingFBMChunk.getDefines());\n    this.defines.USE_EXPANSION = true;\n  }\n  startAnimation() {\n    RAFTicker.on("onBeforeTick", this.animationListener);\n  }\n  stopAnimation() {\n    RAFTicker.off("onBeforeTick", this.animationListener);\n  }\n}\n;// CONCATENATED MODULE: ./esm/swirl/SwirlMaterial.js\n\n\n\n\nclass SwirlMaterial extends (/* unused pure expression or super */ null && (ShaderPhongMaterial)) {\n  addTime(delta) {\n    if (this.isAnimate) {\n      AnimationChunk.addTime(this, delta);\n    }\n  }\n  get isAnimate() {\n    return this.uniforms.isAnimate.value;\n  }\n  set isAnimate(value) {\n    this.uniforms.isAnimate.value = value;\n    if (this.isAnimate) {\n      this.startAnimation();\n    } else {\n      this.stopAnimation();\n    }\n  }\n  onSetMap(val) {\n    super.onSetMap(val);\n    this.setRepeat(val);\n  }\n  onSetAlphaMap(value) {\n    super.onSetAlphaMap(value);\n    this.setRepeat(value);\n  }\n  /**\n   * リピートモードは強制的にRepeatWrappingに\n   * @param value\n   */\n  setRepeat(value) {\n    if (value) {\n      value.wrapS = RepeatWrapping;\n      value.wrapT = RepeatWrapping;\n    }\n  }\n  get uvRotation() {\n    return this.uniforms.uvRotation.value;\n  }\n  set uvRotation(value) {\n    this.uniforms.uvRotation.value = value;\n  }\n  get swirlRotation() {\n    return this.uniforms.swirlRotation.value;\n  }\n  set swirlRotation(value) {\n    this.uniforms.swirlRotation.value = value;\n  }\n  get radius() {\n    return this.uniforms.radius.value;\n  }\n  set radius(value) {\n    this.uniforms.radius.value = value;\n  }\n  get center() {\n    return this.uniforms.center.value;\n  }\n  set center(value) {\n    this.uniforms.center.value = value;\n  }\n  constructor(parameters) {\n    super(null, fragment, parameters);\n    /*\n     * implements IAnimatable\n     */\n    this.speed = -0.02;\n    /*\n     * IAnimatable implements\n     */\n    this.animationListener = e => {\n      this.addTime(e.delta / 1000);\n    };\n    this.isAnimate = this.isAnimate;\n  }\n  initChunks() {\n    super.initChunks();\n    AnimationChunk.registerChunk();\n  }\n  initUniforms() {\n    this.uniforms = UniformsUtils.merge([ShaderPhongMaterial.getBasicUniforms(), AnimationChunk.getUniform(), {\n      uvRotation: {\n        value: 0.0\n      },\n      swirlRotation: {\n        value: 3.14\n      },\n      radius: {\n        value: 0.5\n      },\n      center: {\n        value: new Vector2(0.5, 0.5)\n      }\n    }]);\n  }\n  startAnimation() {\n    RAFTicker.on("onBeforeTick", this.animationListener);\n  }\n  stopAnimation() {\n    RAFTicker.off("onBeforeTick", this.animationListener);\n  }\n}\n;// CONCATENATED MODULE: ./esm/cellularNoise/CellularNoiseMaterial.js\n\n\n\n\nclass CellularNoiseMaterial extends (/* unused pure expression or super */ null && (ShaderPhongMaterial)) {\n  addTime(delta) {\n    if (this.isAnimate) {\n      AnimationChunk.addTime(this, delta);\n    }\n  }\n  get isAnimate() {\n    return this.uniforms.isAnimate.value;\n  }\n  set isAnimate(value) {\n    this.uniforms.isAnimate.value = value;\n    if (this.isAnimate) {\n      this.startAnimation();\n    } else {\n      this.stopAnimation();\n    }\n  }\n  get grid() {\n    return this.uniforms.grid.value;\n  }\n  set grid(value) {\n    this.uniforms.grid.value = value;\n  }\n  get divisionScaleX() {\n    return this.uniforms.divisionScaleX.value;\n  }\n  set divisionScaleX(value) {\n    this.uniforms.divisionScaleX.value = value;\n  }\n  constructor(parameters) {\n    super(null, fragment, parameters);\n    /*\n     * implements IAnimatable\n     */\n    this.speed = -0.02;\n    /*\n     * IAnimatable implements\n     */\n    this.animationListener = e => {\n      this.addTime(e.delta / 1000);\n    };\n    this.isAnimate = this.isAnimate;\n  }\n  initChunks() {\n    super.initChunks();\n    AnimationChunk.registerChunk();\n  }\n  initUniforms() {\n    this.uniforms = UniformsUtils.merge([ShaderPhongMaterial.getBasicUniforms(), AnimationChunk.getUniform(), {\n      grid: {\n        value: 3.0\n      },\n      divisionScaleX: {\n        value: 1.0\n      }\n    }]);\n  }\n  startAnimation() {\n    RAFTicker.on("onBeforeTick", this.animationListener);\n  }\n  stopAnimation() {\n    RAFTicker.off("onBeforeTick", this.animationListener);\n  }\n}\n;// CONCATENATED MODULE: ./esm/solidClipping/SolidClippingMaterial.js\n/**\n * ライトに影響を受けない、ソリッドな切断面をもつマテリアル\n */\n\n\n\nclass SolidClippingMaterial extends (/* unused pure expression or super */ null && (ShaderPhongMaterial)) {\n  get cutSectionColor() {\n    return this.uniforms.cutSectionColor.value;\n  }\n  set cutSectionColor(value) {\n    this.uniforms.cutSectionColor.value = value;\n  }\n  constructor(parameters) {\n    super(null, fragment, parameters);\n  }\n  initUniforms() {\n    this.uniforms = UniformsUtils.merge([ShaderPhongMaterial.getBasicUniforms(), {\n      cutSectionColor: {\n        value: new Color(1.0, 1.0, 1.0)\n      }\n    }]);\n  }\n  initDefaultSetting(parameters) {\n    super.initDefaultSetting(parameters);\n    this.clipping = true;\n    this.side = DoubleSide;\n  }\n}\n;// CONCATENATED MODULE: ./esm/hexDissolve/HexDissolveMaterial.js\n\n\n\n\n/**\n * 六角形グリッドマテリアル\n */\nclass HexDissolveMaterial extends (/* unused pure expression or super */ null && (GridMaterial)) {\n  /**\n   * ディゾルブの進行度を指定する。\n   * 1.0でディゾルブ完了となる。\n   */\n  get progress() {\n    return this.uniforms.progress.value;\n  }\n  set progress(value) {\n    this.uniforms.progress.value = value;\n  }\n  /**\n   * ディゾルブの開始ずれを指定する。\n   * 最後にディゾルブが始まるグリッドが、progressのどの値で開始されるかを意味する。\n   * ex)\n   * delay = 0.8の時、最後のグリッドはprogress = 0.8 ~ 1.0でディゾルブする。\n   */\n  get delay() {\n    return this.uniforms.delay.value;\n  }\n  set delay(value) {\n    this.uniforms.delay.value = value;\n  }\n  get isAscending() {\n    return this.uniforms.isAscending.value;\n  }\n  set isAscending(value) {\n    this.uniforms.isAscending.value = value;\n  }\n  /**\n   * グリッド線の太さ\n   * 0.0で線なし、0.5でグリッド面なしになる。\n   */\n  get gridWeight() {\n    return this.uniforms.gridWeight.value;\n  }\n  set gridWeight(value) {\n    this.uniforms.gridWeight.value = value;\n  }\n  get gridEmissive() {\n    return this.uniforms.gridEmissive.value;\n  }\n  set gridEmissive(value) {\n    this.uniforms.gridEmissive.value = value;\n  }\n  /**\n   * ディゾルブ中に表示されるグローラインの太さ\n   * 数値はグリッド線の太さの倍率、2.0ならグローアウトラインはディゾルブラインの倍の太さになる。\n   *\n   * 注意 : isReversed = true かつgridEmissiveWeightが2.0以下の場合、グロー線が消えなくなる。\n   * 反転させる場合は、2.0以上を指定すること。\n   */\n  get gridEmissiveWeight() {\n    return this.uniforms.gridEmissiveWeight.value;\n  }\n  set gridEmissiveWeight(value) {\n    this.uniforms.gridEmissiveWeight.value = value;\n  }\n  constructor(parameters) {\n    super(null, fragment, parameters);\n  }\n  initUniforms() {\n    this.uniforms = UniformsUtils.merge([GridMaterial.getBasicUniforms(), {\n      progress: {\n        value: 0.0\n      },\n      delay: {\n        value: 0.8\n      },\n      gridWeight: {\n        value: 0.0\n      },\n      isAscending: {\n        value: true\n      },\n      gridEmissive: {\n        value: new Color(0x000000)\n      },\n      gridEmissiveWeight: {\n        value: 2.5\n      }\n    }]);\n  }\n  initChunks() {\n    super.initChunks();\n    HexGridChunk.registerChunk();\n  }\n}\n;// CONCATENATED MODULE: ./esm/index.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2722\n')},2432:(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   D: () => (/* binding */ fragment)\n/* harmony export */ });\n/**\n * スプライトで雲を描画するマテリアル\n *\n * @see : https://github.com/mrdoob/three.js/blob/dev/src/renderers/shaders/ShaderLib/sprite.glsl.js\n */\n// language=GLSL\nconst fragment = /* GLSL */`\n\nuniform float rimStrength;\nuniform float bottomStrength;\nuniform vec3 rimColor;\nuniform vec3 skyColor;\n\nuniform float rimCenter;\nuniform float rimRange;\n#include <sprite_fragment_uniform_chunk>\n\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n  vec3 color = diffuse;\n  #include <clipping_planes_fragment>\n  #include <sprite_diffuse_color_chunk>\n\t#include <logdepthbuf_fragment>\n\t\n\t#include <map_fragment>\n\t#include <alphatest_fragment>\n\t\n\tfloat bottom = 0.0;\t\n  \n\t#ifdef USE_MAP\n    bottom = 1.0 - texture2D( map, vUv ).g;\n    bottom *= bottomStrength;\n  #endif\n    \n  float edge = 0.0;\n  #ifdef USE_MAP\n    float a = texture2D( map, vUv ).a ;\n    edge = \n        smoothstep( rimCenter-rimRange, rimCenter, a )\n      - smoothstep( rimCenter, rimCenter+rimRange, a );\n  #endif\n    \n  outgoingLight = mix( diffuse, skyColor, bottom);\n  outgoingLight += rimColor * edge * rimStrength;\n\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\n}`;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjQzMi5qcyIsIm1hcHBpbmdzIjoiOzs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTyxNQUFNQSxRQUFRLEdBQUcsVUFBWTtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRSIsInNvdXJjZXMiOlsid2VicGFjazovL3RocmVlanMtc2hhZGVyLW1hdGVyaWFscy8uL2VzbS9zcHJpdGVDbG91ZC9TcHJpdGVDbG91ZE1hdGVyaWFsLmdsc2wuanM/NDkwMyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIOOCueODl+ODqeOCpOODiOOBp+mbsuOCkuaPj+eUu+OBmeOCi+ODnuODhuODquOCouODq1xuICpcbiAqIEBzZWUgOiBodHRwczovL2dpdGh1Yi5jb20vbXJkb29iL3RocmVlLmpzL2Jsb2IvZGV2L3NyYy9yZW5kZXJlcnMvc2hhZGVycy9TaGFkZXJMaWIvc3ByaXRlLmdsc2wuanNcbiAqL1xuLy8gbGFuZ3VhZ2U9R0xTTFxuZXhwb3J0IGNvbnN0IGZyYWdtZW50ID0gLyogR0xTTCAqLyBgXG5cbnVuaWZvcm0gZmxvYXQgcmltU3RyZW5ndGg7XG51bmlmb3JtIGZsb2F0IGJvdHRvbVN0cmVuZ3RoO1xudW5pZm9ybSB2ZWMzIHJpbUNvbG9yO1xudW5pZm9ybSB2ZWMzIHNreUNvbG9yO1xuXG51bmlmb3JtIGZsb2F0IHJpbUNlbnRlcjtcbnVuaWZvcm0gZmxvYXQgcmltUmFuZ2U7XG4jaW5jbHVkZSA8c3ByaXRlX2ZyYWdtZW50X3VuaWZvcm1fY2h1bms+XG5cbiNpbmNsdWRlIDxjb21tb24+XG4jaW5jbHVkZSA8dXZfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxtYXBfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxhbHBoYW1hcF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGFscGhhdGVzdF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGFscGhhaGFzaF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGZvZ19wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX3BhcnNfZnJhZ21lbnQ+XG5cbnZvaWQgbWFpbigpIHtcblxuICB2ZWMzIGNvbG9yID0gZGlmZnVzZTtcbiAgI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19mcmFnbWVudD5cbiAgI2luY2x1ZGUgPHNwcml0ZV9kaWZmdXNlX2NvbG9yX2NodW5rPlxuXHQjaW5jbHVkZSA8bG9nZGVwdGhidWZfZnJhZ21lbnQ+XG5cdFxuXHQjaW5jbHVkZSA8bWFwX2ZyYWdtZW50PlxuXHQjaW5jbHVkZSA8YWxwaGF0ZXN0X2ZyYWdtZW50PlxuXHRcblx0ZmxvYXQgYm90dG9tID0gMC4wO1x0XG4gIFxuXHQjaWZkZWYgVVNFX01BUFxuICAgIGJvdHRvbSA9IDEuMCAtIHRleHR1cmUyRCggbWFwLCB2VXYgKS5nO1xuICAgIGJvdHRvbSAqPSBib3R0b21TdHJlbmd0aDtcbiAgI2VuZGlmXG4gICAgXG4gIGZsb2F0IGVkZ2UgPSAwLjA7XG4gICNpZmRlZiBVU0VfTUFQXG4gICAgZmxvYXQgYSA9IHRleHR1cmUyRCggbWFwLCB2VXYgKS5hIDtcbiAgICBlZGdlID0gXG4gICAgICAgIHNtb290aHN0ZXAoIHJpbUNlbnRlci1yaW1SYW5nZSwgcmltQ2VudGVyLCBhIClcbiAgICAgIC0gc21vb3Roc3RlcCggcmltQ2VudGVyLCByaW1DZW50ZXIrcmltUmFuZ2UsIGEgKTtcbiAgI2VuZGlmXG4gICAgXG4gIG91dGdvaW5nTGlnaHQgPSBtaXgoIGRpZmZ1c2UsIHNreUNvbG9yLCBib3R0b20pO1xuICBvdXRnb2luZ0xpZ2h0ICs9IHJpbUNvbG9yICogZWRnZSAqIHJpbVN0cmVuZ3RoO1xuXG5cdCNpbmNsdWRlIDxvcGFxdWVfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDx0b25lbWFwcGluZ19mcmFnbWVudD5cblx0I2luY2x1ZGUgPGNvbG9yc3BhY2VfZnJhZ21lbnQ+XG5cdCNpbmNsdWRlIDxmb2dfZnJhZ21lbnQ+XG5cbn1gO1xuIl0sIm5hbWVzIjpbImZyYWdtZW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///2432\n")}},__webpack_module_cache__={},webpackQueues,webpackExports,webpackError,resolveQueue,deferred;function __webpack_require__(Q){var U=__webpack_module_cache__[Q];if(void 0!==U)return U.exports;var F=__webpack_module_cache__[Q]={exports:{}};return __webpack_modules__[Q](F,F.exports,__webpack_require__),F.exports}__webpack_require__.m=__webpack_modules__,webpackQueues="function"==typeof Symbol?Symbol("webpack queues"):"__webpack_queues__",webpackExports="function"==typeof Symbol?Symbol("webpack exports"):"__webpack_exports__",webpackError="function"==typeof Symbol?Symbol("webpack error"):"__webpack_error__",resolveQueue=Q=>{Q&&Q.d<1&&(Q.d=1,Q.forEach((Q=>Q.r--)),Q.forEach((Q=>Q.r--?Q.r++:Q())))},__webpack_require__.a=(Q,U,F)=>{var B;F&&((B=[]).d=-1);var I,s,g,n=new Set,C=Q.exports,i=new Promise(((Q,U)=>{g=U,s=Q}));i[webpackExports]=C,i[webpackQueues]=Q=>(B&&Q(B),n.forEach(Q),i.catch((Q=>{}))),Q.exports=i,U((Q=>{var U;I=(Q=>Q.map((Q=>{if(null!==Q&&"object"==typeof Q){if(Q[webpackQueues])return Q;if(Q.then){var U=[];U.d=0,Q.then((Q=>{F[webpackExports]=Q,resolveQueue(U)}),(Q=>{F[webpackError]=Q,resolveQueue(U)}));var F={};return F[webpackQueues]=Q=>Q(U),F}}var B={};return B[webpackQueues]=Q=>{},B[webpackExports]=Q,B})))(Q);var F=()=>I.map((Q=>{if(Q[webpackError])throw Q[webpackError];return Q[webpackExports]})),s=new Promise((Q=>{(U=()=>Q(F)).r=0;var s=Q=>Q!==B&&!n.has(Q)&&(n.add(Q),Q&&!Q.d&&(U.r++,Q.push(U)));I.map((Q=>Q[webpackQueues](s)))}));return U.r?s:F()}),(Q=>(Q?g(i[webpackError]=Q):s(C),resolveQueue(B)))),B&&B.d<0&&(B.d=0)},deferred=[],__webpack_require__.O=(Q,U,F,B)=>{if(!U){var I=1/0;for(C=0;C<deferred.length;C++){for(var[U,F,B]=deferred[C],s=!0,g=0;g<U.length;g++)(!1&B||I>=B)&&Object.keys(__webpack_require__.O).every((Q=>__webpack_require__.O[Q](U[g])))?U.splice(g--,1):(s=!1,B<I&&(I=B));if(s){deferred.splice(C--,1);var n=F();void 0!==n&&(Q=n)}}return Q}B=B||0;for(var C=deferred.length;C>0&&deferred[C-1][2]>B;C--)deferred[C]=deferred[C-1];deferred[C]=[U,F,B]},__webpack_require__.d=(Q,U)=>{for(var F in U)__webpack_require__.o(U,F)&&!__webpack_require__.o(Q,F)&&Object.defineProperty(Q,F,{enumerable:!0,get:U[F]})},__webpack_require__.o=(Q,U)=>Object.prototype.hasOwnProperty.call(Q,U),__webpack_require__.j=680,(()=>{var Q={680:0};__webpack_require__.O.j=U=>0===Q[U];var U=(U,F)=>{var B,I,[s,g,n]=F,C=0;if(s.some((U=>0!==Q[U]))){for(B in g)__webpack_require__.o(g,B)&&(__webpack_require__.m[B]=g[B]);if(n)var i=n(__webpack_require__)}for(U&&U(F);C<s.length;C++)I=s[C],__webpack_require__.o(Q,I)&&Q[I]&&Q[I][0](),Q[I]=0;return __webpack_require__.O(i)},F=self.webpackChunkthreejs_shader_materials=self.webpackChunkthreejs_shader_materials||[];F.forEach(U.bind(null,0)),F.push=U.bind(null,F.push.bind(F))})();var __webpack_exports__=__webpack_require__.O(void 0,[736],(()=>__webpack_require__(6142)));__webpack_exports__=__webpack_require__.O(__webpack_exports__)})();