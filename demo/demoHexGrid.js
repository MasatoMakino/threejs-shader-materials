(()=>{"use strict";var e,n={447:(e,n,t)=>{const i="\n#define PHONG\n\nvarying vec3 vViewPosition;\n\n//added by threejs-shader-materials\nvarying vec2 uvPosition;\n#include <mesh_position_varying>\n#include <surface_normal_varying_chunk>\n#include <__expansion_uniform_chunk>\n\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n    #include <mesh_position_vertex>\n    uvPosition = uv;\n\n    #include <uv_vertex>\n    #include <color_vertex>\n    #include <morphcolor_vertex>\n    #include <batching_vertex>\n    \n    #include <beginnormal_vertex>\n    #include <morphnormal_vertex>\n    #include <skinbase_vertex>\n    #include <skinnormal_vertex>\n    #include <defaultnormal_vertex>\n    \n    #include <surface_normal_vertex_chunk>\n\n    #include <normal_vertex>\n    \n    #include <begin_vertex>\n    \n    #include <__expansion_vertex_chunk>\n    \n    #include <morphtarget_vertex>\n    #include <skinning_vertex>\n    #include <displacementmap_vertex>\n    #include <project_vertex>\n    #include <logdepthbuf_vertex>\n    #include <clipping_planes_vertex>\n    \n    vViewPosition = - mvPosition.xyz;\n\n    #include <worldpos_vertex>\n    #include <envmap_vertex>\n    #include <shadowmap_vertex>\n    #include <fog_vertex>\n\n}";var a,r=t(753);class s{static getChunkName(){return""}static getChunk(){return""}static getDefines(){return{}}static registerChunk(){r.vxI&&null==r.vxI[this.getChunkName()]&&(r.vxI[this.getChunkName()]=this.getChunk())}static getUniform(){return{}}}class u extends s{static registerChunk(){o.registerChunk()}static getUniform(){return{time:{value:0},isAnimate:{value:!0}}}static addTime(e,n){e.uniforms.time.value+=n*e.speed}}class o extends s{static getChunkName(){return"time_animation_uniform_chunk"}static getChunk(){return"\n    uniform float time;\n    uniform bool isAnimate;\n    "}}class l extends s{static registerChunk(){c.registerChunk(),d.registerChunk()}static getDefines(){return{USE_EXPANSION:!1}}static getUniform(){return{expansionStrength:{value:0}}}}class c extends s{static getChunkName(){return"__expansion_uniform_chunk"}static getChunk(){return"\n    #ifdef USE_EXPANSION\n      uniform float expansionStrength;\n    #endif\n    "}}class d extends s{static getChunkName(){return"__expansion_vertex_chunk"}static getChunk(){return"\n    #ifdef USE_EXPANSION\n      transformed += normal * expansionStrength;\n    #endif\n    "}}class m extends s{static registerChunk(){super.registerChunk(),g.registerChunk()}}class g extends s{static getChunkName(){return"hex_grid_function_chunk"}static getChunk(){return"\n    /**\n     * ヘックスの縁までの距離を取得する。\n     */\n    float hexDist(vec2 p)\n    {\n        p = abs(p);\n        float d = dot(p, normalize(vec2(1.0, 1.73)));\n        return max(d, p.x);\n    }\n    \n    /**\n     * uv座標からヘックス固有のxy座標とIDを取得する\n     *\n     * x : ヘックスの中心点からの回転角\n     * y : ヘックスの縁までの距離\n     * zw : ヘックスのID\n     */\n    vec4 hexCoords(vec2 uv)\n    {\n        vec2 r = vec2(1.0, 1.73);\n        vec2 h = r * 0.5;\n        vec2 a = mod(uv, r) - h;\n        vec2 b = mod(uv - h, r) - h;\n    \n        vec2 gv = length(a) < length(b) ? a : b;\n        vec2 id = uv - gv;\n    \n        float x = atan(gv.x, gv.y);\n        float y = 0.5 - hexDist(gv);\n    \n        return vec4(x, y, id);\n    }\n    "}}class h extends s{static registerChunk(){super.registerChunk(),p.registerChunk(),f.registerChunk(),_.registerChunk()}static getUniform(){return r.LlO.merge([super.getUniform(),{hasMap:{value:!1},map:{value:null}}])}static getMap(e){return e.uniforms.map.value}static setMap(e,n){e.uniforms.map.value=n,e.uniforms.hasMap.value=null!=n}}class p extends s{static getChunkName(){return"map_uniform_chunk"}static getChunk(){return"\n      uniform bool hasMap;\n      uniform sampler2D map;\n    "}}class f extends s{static getChunkName(){return"map_fragment_chunk"}static getChunk(){return"\n      if( hasMap ){\n        vec4 texelColor = texture2D( map, mapUV );\n        diffuseColor *= texelColor;\n      }\n    "}}class _ extends s{static getChunkName(){return"__ShaderMaterial__map_fragment_begin_chunk"}static getChunk(){return"\n      vec2 mapUV = uvPosition;\n    "}}class v extends s{static registerChunk(){k.registerChunk(),C.registerChunk()}static getUniform(){return{division:{value:32},divisionScaleX:{value:1}}}}class k extends s{static getChunkName(){return"repeat_pattern_uniform_chunk"}static getChunk(){return"\n      uniform float division;\n      uniform float divisionScaleX;\n    "}}class C extends s{static getChunkName(){return"repeat_pattern_fragment_chunk"}static getChunk(){return"\n      vec2 uv =\n        uvPosition\n        * vec2( division * divisionScaleX, division);\n    "}}class x extends v{static registerChunk(){super.registerChunk(),w.registerChunk(),y.registerChunk()}static getUniform(){return r.LlO.merge([super.getUniform(),{hasMaskTexture:{value:!1},maskTexture:{value:null}}])}static getMaskTexture(e){return e.uniforms.maskTexture.value}static setMaskTexture(e,n){e.uniforms.maskTexture.value=n,e.uniforms.hasMaskTexture.value=null!=n}}class w extends s{static getChunkName(){return"mask_map_uniform_chunk"}static getChunk(){return"\n      uniform bool hasMaskTexture;\n      uniform sampler2D maskTexture;\n    "}}class y extends s{static getChunkName(){return"mask_map_fragment_chunk"}static getChunk(){return"\n      float mask = 1.0;\n      if( hasMaskTexture ){\n        vec2 uVm = id / vec2( division * divisionScaleX, division);\n        mask = texture2D( maskTexture, uVm ).g;\n      }\n    "}}class M extends s{static registerChunk(){U.registerChunk(),S.registerChunk(),b.registerChunk(),N.registerChunk(),I.registerChunk()}static getDefines(){return{USE_MESH_POSITION:!1}}}class U extends s{static getChunkName(){return"mesh_phong_uniform"}static getChunk(){return"\n      uniform vec3 diffuse;\n      uniform vec3 emissive;\n      uniform vec3 specular;\n      uniform float shininess;\n      uniform float opacity;\n      uniform bool hasAlphaMap;\n      uniform sampler2D alphaMap;\n    "}}class S extends s{static getChunkName(){return"mesh_phong_diffuse_color"}static getChunk(){return"\n    vec4 diffuseColor = vec4( diffuse, opacity );\n    ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n    vec3 totalEmissiveRadiance = emissive;\n    "}}class b extends s{static getChunkName(){return"mesh_phong_switching_alpha_map"}static getChunk(){return"\n      if( hasAlphaMap ){\n        diffuseColor.a *= texture2D( alphaMap, mapUV ).g;\n      }\n    "}}class N extends s{static getChunkName(){return"mesh_position_varying"}static getChunk(){return"\n    #ifdef USE_MESH_POSITION\n    varying vec3 meshPosition;\n    #endif\n    "}}class I extends s{static getChunkName(){return"mesh_position_vertex"}static getChunk(){return"\n    #ifdef USE_MESH_POSITION\n    meshPosition = position;\n    #endif\n    "}}class O extends s{static registerChunk(){P.registerChunk()}static getUniform(){return{isReversed:{value:!1}}}}class P extends s{static getChunkName(){return"reversible_uniform_chunk"}static getChunk(){return"\n      uniform bool isReversed;\n    "}}class G extends s{static registerChunk(){A.registerChunk(),L.registerChunk()}static getDefines(){return{USE_SURFACE_NORMAL:!1}}static getUniform(){return{}}}class A extends s{static getChunkName(){return"surface_normal_varying_chunk"}static getChunk(){return"\n    #ifdef USE_SURFACE_NORMAL\n      varying vec3 surfaceNormal;\n    #endif\n    "}}class L extends s{static getChunkName(){return"surface_normal_vertex_chunk"}static getChunk(){return"\n    #ifdef USE_SURFACE_NORMAL\n      surfaceNormal = normalize( transformedNormal );\n    #endif\n    "}}class E extends u{static registerChunk(){super.registerChunk(),F.registerChunk(),T.registerChunk()}static getUniform(){const e={raisedBottom:{value:.05},waveFrequency:{value:.2},wavePow:{value:4},direction:{value:a.vertical}};return{...super.getUniform(),...e}}}class F extends s{static getChunkName(){return"wavy_animation_fragment_chunk"}static getChunk(){return`\n    float distance = id.y;\n    if( direction == ${a.horizontal}){\n      distance = id.x;\n    }else if( direction == ${a.radial} ){\n      distance = length(id.xy);\n    }\n\n    float wavy = isAnimate\n      ? pow( sin( (distance * waveFrequency - time) ), wavePow) + raisedBottom\n      : 1.0;\n  \n    diffuseColor.a *= wavy;\n    `}}class T extends s{static getChunkName(){return"wavy_animation_uniform_chunk"}static getChunk(){return"\n    uniform float raisedBottom;\n    uniform float waveFrequency;\n    uniform float wavePow;\n    uniform int direction;\n    "}}!function(e){e[e.vertical=4]="vertical",e[e.horizontal=3]="horizontal",e[e.radial=5]="radial"}(a||(a={}));class D extends r.BKk{constructor(e,n,t){super(t),this._opacity=1,t??={},e??=i,n??="\n#define PHONG\n\n#include <mesh_phong_uniform>\n\n//added by threejs-shader-materials\n#include <mesh_position_varying>\nvarying vec2 uvPosition;\n\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n// #include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n\n    #include <clipping_planes_fragment>\n    \n    #include <mesh_phong_diffuse_color>\n    \n    #include <logdepthbuf_fragment>\n    #include <__ShaderMaterial__map_fragment_begin_chunk>\n    #include <map_fragment>\n    #include <color_fragment>\n    // #include <alphamap_fragment>\n    #include <mesh_phong_switching_alpha_map>\n    #include <alphatest_fragment>\n    #include <alphahash_fragment>\n    #include <specularmap_fragment>\n    #include <normal_fragment_begin>\n    #include <normal_fragment_maps>\n    #include <emissivemap_fragment>\n\n    // accumulation\n    #include <lights_phong_fragment>\n    #include <lights_fragment_begin>\n    #include <lights_fragment_maps>\n    #include <lights_fragment_end>\n\n    // modulation\n    #include <aomap_fragment>\n\n    vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n    \n    #include <envmap_fragment>\n    #include <opaque_fragment>\n    #include <tonemapping_fragment>\n    #include <colorspace_fragment>\n    #include <fog_fragment>\n    #include <premultiplied_alpha_fragment>\n    #include <dithering_fragment>\n\n}",this.initChunks(),this.initUniforms(),this.initDefines(),this.vertexShader=e,this.fragmentShader=n,this.initDefaultSetting(t)}static getBasicUniforms(){return r.LlO.merge([r.fCn.common,r.fCn.specularmap,r.fCn.envmap,r.fCn.aomap,r.fCn.lightmap,r.fCn.emissivemap,r.fCn.bumpmap,r.fCn.normalmap,r.fCn.displacementmap,r.fCn.gradientmap,r.fCn.fog,r.fCn.lights,{emissive:{value:new r.Q1f(0)},specular:{value:new r.Q1f(1118481)},shininess:{value:30},hasAlphaMap:{value:!1}},G.getUniform(),l.getUniform(),h.getUniform()])}initChunks(){M.registerChunk(),G.registerChunk(),l.registerChunk(),h.registerChunk()}initUniforms(){this.uniforms=r.LlO.merge([D.getBasicUniforms(),l.getUniform(),{}])}initDefines(){this.defines=Object.assign({},M.getDefines(),G.getDefines(),l.getDefines(),this.defines)}initDefaultSetting(e){this.uniformOpacity=this._opacity,this.lights=!0,null==e?.transparent&&(this.transparent=!0)}get color(){return this.uniforms.diffuse.value}set color(e){this.uniforms.diffuse.value=e}get opacity(){return this.uniformOpacity}get uniformOpacity(){return this._opacity}set opacity(e){this.uniformOpacity=e}set uniformOpacity(e){this._opacity=e,this.uniforms?.opacity&&(this.uniforms.opacity.value=e)}get emissive(){return this.uniforms.emissive.value}set emissive(e){this.uniforms.emissive.value=e}get map(){return h.getMap(this)}set map(e){h.setMap(this,e),this.onSetMap(e)}onSetMap(e){}get alphaMap(){return this.uniforms.alphaMap.value}set alphaMap(e){this.uniforms.alphaMap.value=e,this.uniforms.hasAlphaMap.value=null!=e,this.onSetAlphaMap(e)}onSetAlphaMap(e){}startGlow(){this.alphaTest=0,this.depthWrite=!1,this.blending=r.EZo}}r.BKk,r.BKk,r.BKk;var B=t(293);B.zE5;class R extends D{get division(){return this.uniforms.division.value}set division(e){this.uniforms.division.value=e}get divisionScaleX(){return this.uniforms.divisionScaleX.value}set divisionScaleX(e){this.uniforms.divisionScaleX.value=e}get isReversed(){return this.uniforms.isReversed.value}set isReversed(e){this.uniforms.isReversed.value=e}get maskTexture(){return x.getMaskTexture(this)}set maskTexture(e){x.setMaskTexture(this,e)}initChunks(){super.initChunks(),x.registerChunk(),O.registerChunk()}static getBasicUniforms(){return r.LlO.merge([D.getBasicUniforms(),O.getUniform(),x.getUniform(),v.getUniform()])}}var j=t(603);class z extends R{addTime(e){u.addTime(this,e)}get isAnimate(){return this.uniforms.isAnimate.value}set isAnimate(e){this.uniforms.isAnimate.value=e,this.isAnimate?this.startAnimation():this.stopAnimation()}get waveFrequency(){return this.uniforms.waveFrequency.value}set waveFrequency(e){this.uniforms.waveFrequency.value=e}get wavePow(){return this.uniforms.wavePow.value}set wavePow(e){this.uniforms.wavePow.value=e}get raisedBottom(){return this.uniforms.raisedBottom.value}set raisedBottom(e){this.uniforms.raisedBottom.value=e}get direction(){return this.uniforms.direction.value}set direction(e){this.uniforms.direction.value=e}constructor(e,n,t){super(e,n,t),this.speed=-.5,this.animationListener=e=>{this.addTime(e.delta/1e3)},this.isAnimate=this.isAnimate}initChunks(){super.initChunks(),E.registerChunk()}static getBasicUniforms(){return r.LlO.merge([super.getBasicUniforms(),O.getUniform(),E.getUniform(),x.getUniform()])}initDefaultSetting(e){super.initDefaultSetting(e)}startAnimation(){j.w.on("onBeforeTick",this.animationListener)}stopAnimation(){j.w.off("onBeforeTick",this.animationListener)}}class H extends z{get gridWeight(){return this.uniforms.gridWeight.value}set gridWeight(e){this.uniforms.gridWeight.value=e}constructor(e){super(i,"\n#define PHONG\n\n#include <mesh_phong_uniform>\nvarying vec2 uvPosition;\n#include <mesh_position_varying>\n\n//user settings\n#include <time_animation_uniform_chunk>\n#include <wavy_animation_uniform_chunk>\n#include <repeat_pattern_uniform_chunk>\n#include <mask_map_uniform_chunk>\n#include <reversible_uniform_chunk>\nuniform float gridWeight;\n#include <hex_grid_function_chunk>\n\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\n\nvoid main() {\n    #include <clipping_planes_fragment>\n  \n    #include <mesh_phong_diffuse_color>\n    \n    #include <logdepthbuf_fragment>\n    #include <__ShaderMaterial__map_fragment_begin_chunk>\n    #include <map_fragment>\n    #include <color_fragment>\n\n    #include <repeat_pattern_fragment_chunk>    \n    vec4 hc = hexCoords( uv );\n    vec2 id = hc.zw;\n    #include <wavy_animation_fragment_chunk>\n\n    #include <mask_map_fragment_chunk>\n    float w = gridWeight + (1.0-mask);\n    w = clamp( w, 0.0, 1.0);\n\n    float margin = clamp ( w * 0.33, 0.00, 0.02 );\n    float stepMax = w + margin;\n\n    float gridLine = smoothstep(w, stepMax, hc.y);\n    gridLine = isReversed\n        ? 1.0 - gridLine\n        : gridLine;\n    diffuseColor.a *= gridLine ;\n\n    #include <mesh_phong_switching_alpha_map>\n\n    // #include <alphamap_fragment>\n    #include <alphatest_fragment>\n    #include <alphahash_fragment>\n    #include <specularmap_fragment>\n    #include <normal_fragment_begin>\n    #include <normal_fragment_maps>\n    #include <emissivemap_fragment>\n\n    // accumulation\n    #include <lights_phong_fragment>\n    #include <lights_fragment_begin>\n    #include <lights_fragment_maps>\n    #include <lights_fragment_end>\n\n    // modulation\n    #include <aomap_fragment>\n\n    vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\n    #include <envmap_fragment>\n    #include <opaque_fragment>\n    #include <tonemapping_fragment>\n    #include <colorspace_fragment>\n    #include <fog_fragment>\n    #include <premultiplied_alpha_fragment>\n    #include <dithering_fragment>\n\n}",e)}initUniforms(){this.uniforms=r.LlO.merge([z.getBasicUniforms(),{gridWeight:{value:.03}}])}initChunks(){super.initChunks(),m.registerChunk()}}(0,B.Fn)((([e,n,t,i,a,r])=>W(e,n,t,i,a,r,(0,B.eR5)(0,0,1))));const W=(0,B.Fn)((([e,n,t,i,a,r,s])=>{const u=(0,B.eR5)(0,0,0).toVar(),o=(0,B.T9B)(0,B.ono.dot((0,B.eR5)(s))),l=(0,B.jbE)(1,o);l.assign((0,B.n7C)(l,n)),u.rgb.addAssign(e.mul(l.mul(t)));const c=(0,B.n7C)(o,a);return u.rgb.addAssign(i.mul(c.mul(r))),u}));B.P8l;class X{static initColorGUI(e,n,t="color"){const i={},a=n[t];return i[t]=a.getHex(),e.addColor(i,t).onChange((e=>{a.setHex(e)})),i}static initColorNodeGUI(e,n,t="color"){const i={},a=n[t];return i[t]=a.value.getHex(),e.addColor(i,t).onChange((e=>{a.value.setHex(e)})),i}static initBasicMaterialGUI(e,n,t="Material"){const i=e.addFolder(t);return this.initMaterialFolder(i,n),i.open(),i}static initMaterialGUI(e,n,t="Material"){const i=this.initBasicMaterialGUI(e,n,t);this.initColorGUI(i,n,"emissive")}static initMaterialFolder(e,n,t=!1){this.initColorGUI(e,n),e.add(n,"transparent");const i=t?"opacity":"uniformOpacity";e.add(n,i,0,1)}static initSpriteMaterialGUI(e,n,t="Material"){const i=e.addFolder(t);this.initMaterialFolder(i,n),i.open()}static initGridMaterialGUI(e,n){this.initMaterialGUI(e,n);const t={mask:"",alphaMap:""},i=e.addFolder("WavyGridMaterial");return i.add(n,"isReversed"),i.add(n,"division",2,256).step(1),i.add(n,"divisionScaleX",0,4).step(1),i.add(t,"mask",{none:"",earth:"./textures/landmask.png"}).onChange((e=>{n.maskTexture=""===e?null:(new r.Tap).load(e)})),i.add(t,"alphaMap",{none:"",earth:"./textures/landmask.png"}).onChange((e=>{n.alphaMap=""===e?null:(new r.Tap).load(e)})),i.open(),i}static initWavyMaterialGUI(e,n){const t=this.initGridMaterialGUI(e,n).addFolder("WavyAnimation");t.add(n,"isAnimate"),t.add(n,"speed",-2,2),t.add(n,"waveFrequency",0,1),t.add(n,"wavePow",0,4),t.add(n,"direction",{horizontal:a.horizontal,vertical:a.vertical,radial:a.radial}),t.add(n,"raisedBottom",0,1),t.open()}static initAnimationGUI(e,n,t="Animation"){const i=e.addFolder(t);i.add(n,"isAnimate"),i.add(n,"speed",-2,2),i.open()}static initRimGUI(e,n,t="Rim Effect Material"){const i=e.addFolder(t);X.initColorGUI(i,n,"rimColor"),i.add(n,"rimStrength",0,4).step(.01),i.add(n,"rimPow",0,4).step(.01),X.initColorGUI(i,n,"insideColor"),i.add(n,"insideStrength",0,4).step(.01),i.add(n,"insidePow",0,8).step(.01),i.open()}static initExpansionGUI(e,n,t="ExpansionMaterial"){const i=e.addFolder("ExpansionMaterial");i.add(n,"expansionStrength",-12,12).step(.01),i.open()}static initFBMTilingGUI(e,n,t="FBM Tiling"){const i=e.addFolder("FBM Tiling");i.add(n,"tiles",1,8).step(1),i.add(n,"hashLoop",2,16).step(1),i.add(n,"amp",0,2).step(.01),i.open()}static initSkyGUI(e,n,t,i){const a={turbidity:10,rayleigh:.15,mieCoefficient:.005,mieDirectionalG:.8,inclination:.07,azimuth:.25,exposure:.75},r=4e5;function s(){const e=n.material.uniforms;e.turbidity.value=a.turbidity,e.rayleigh.value=a.rayleigh,e.mieCoefficient.value=a.mieCoefficient,e.mieDirectionalG.value=a.mieDirectionalG;const s=Math.PI*(a.inclination-.5),u=2*Math.PI*(a.azimuth-.5);t.position.x=r*Math.cos(u),t.position.y=r*Math.sin(u)*Math.sin(s),t.position.z=r*Math.sin(u)*Math.cos(s),e.sunPosition.value.copy(t.position),i.toneMappingExposure=a.exposure}s();const u=e.addFolder("Sky");u.add(a,"turbidity",1,20,.1).onChange(s),u.add(a,"rayleigh",0,4,.001).onChange(s),u.add(a,"mieCoefficient",0,.1,.001).onChange(s),u.add(a,"mieDirectionalG",0,1,.001).onChange(s),u.add(a,"inclination",0,1,1e-4).onChange(s),u.add(a,"azimuth",0,1,1e-4).onChange(s),u.add(a,"exposure",0,1,1e-4).onChange(s),u.open()}}var q=t(580),V=t(785);class ${static initScene(){return new r.Z58}static initLight(e){const n=new r.$p8(16777215,Math.PI);return e.add(n),n}static initCamera(e,n,t,i=400){const a=new r.ubm(45,n/t,1,i);return a.position.set(0,0,100),a.updateMatrixWorld(!1),e.add(a),a}static initControl(e,n){let t;null!=n&&(t=n.domElement);const i=new q.N(e,t);return i.update(),i}static initRenderer(e,n,t=0,i=!0){const a=new r.JeP({antialias:i});return a.setClearColor(new r.Q1f(t)),a.setSize(e,n),a.setPixelRatio(window.devicePixelRatio),a.domElement.style.backgroundColor="#"+t.toString(16).padStart(6,"0"),document.body.appendChild(a.domElement),console.log("three.js revision: ",r.sPf),a}static initHelper(e){const n=new r.IzY(30);e.add(n)}static initSky(e,n,t){t.toneMapping=r.FV;const i=new r.eaF(new r.Gu$(2e4,16,8),new r.V9B({color:16777215}));i.position.y=-7e5,i.visible=!1,e.add(i);const a=new V.m;a.scale.setScalar(45e3),e.add(a),X.initSkyGUI(n,a,i,t)}}var K=t(638);class Q{constructor(){const e=$.initScene();e.fog=new r.jUj(0,80,160),$.initLight(e);const n=$.initCamera(e,640,480),t=$.initRenderer(640,480);$.initControl(n,t),$.initHelper(e);const i=this.initObject(e);j.w.on("tick",(i=>{t.render(e,n)})),this.initGUI(i)}initObject(e){const n=new r.HiM(16777215,2e3);n.position.set(10,20,30),e.add(n);const t=new r.F1l(n);e.add(t);const i=new r.Gu$(10,64,64),s=new H({fog:void 0!==e.fog});s.color=new r.Q1f(16737894),s.direction=a.vertical;const u=new r.eaF(i,s);return e.add(u),s}initGUI(e){const n=new K.Ay;X.initWavyMaterialGUI(n,e),this.initGUIMaterial(n,e)}initGUIMaterial(e,n){const t=e.addFolder("HexGridMaterial");t.add(n,"gridWeight",0,.5),t.open()}}window.onload=()=>{new Q}}},t={};function i(e){var a=t[e];if(void 0!==a)return a.exports;var r=t[e]={exports:{}};return n[e](r,r.exports,i),r.exports}i.m=n,e=[],i.O=(n,t,a,r)=>{if(!t){var s=1/0;for(c=0;c<e.length;c++){for(var[t,a,r]=e[c],u=!0,o=0;o<t.length;o++)(!1&r||s>=r)&&Object.keys(i.O).every((e=>i.O[e](t[o])))?t.splice(o--,1):(u=!1,r<s&&(s=r));if(u){e.splice(c--,1);var l=a();void 0!==l&&(n=l)}}return n}r=r||0;for(var c=e.length;c>0&&e[c-1][2]>r;c--)e[c]=e[c-1];e[c]=[t,a,r]},i.d=(e,n)=>{for(var t in n)i.o(n,t)&&!i.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:n[t]})},i.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),i.j=841,(()=>{var e={841:0};i.O.j=n=>0===e[n];var n=(n,t)=>{var a,r,[s,u,o]=t,l=0;if(s.some((n=>0!==e[n]))){for(a in u)i.o(u,a)&&(i.m[a]=u[a]);if(o)var c=o(i)}for(n&&n(t);l<s.length;l++)r=s[l],i.o(e,r)&&e[r]&&e[r][0](),e[r]=0;return i.O(c)},t=self.webpackChunk_masatomakino_threejs_shader_materials=self.webpackChunk_masatomakino_threejs_shader_materials||[];t.forEach(n.bind(null,0)),t.push=n.bind(null,t.push.bind(t))})();var a=i.O(void 0,[121],(()=>i(447)));a=i.O(a)})();