(()=>{"use strict";var __webpack_modules__={21:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{eval('\n// UNUSED EXPORTS: StudySquareGrid\n\n;// CONCATENATED MODULE: ./esm/ShaderPhongMaterial.frag.glsl.js\n/**\n *\n */\n/* harmony default export */ const ShaderPhongMaterial_frag_glsl = (() => {\n  // language=GLSL\n  return `\n#define PHONG\n\n#include <mesh_phong_uniform>\n#include <mesh_position_varying>\nvarying vec2 uvPosition;\n\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n// #include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n    #include <clipping_planes_fragment>\n    \n    #include <mesh_phong_diffuse_color>\n    \n    #include <logdepthbuf_fragment>\n    #include <__ShaderMaterial__map_fragment_begin_chunk>\n    #include <map_fragment>\n    #include <color_fragment>\n    // #include <alphamap_fragment>\n    #include <mesh_phong_switching_alpha_map>\n    #include <alphatest_fragment>\n    #include <specularmap_fragment>\n    #include <normal_fragment_begin>\n    #include <normal_fragment_maps>\n    #include <emissivemap_fragment>\n    // accumulation\n    #include <lights_phong_fragment>\n    #include <lights_fragment_begin>\n    #include <lights_fragment_maps>\n    #include <lights_fragment_end>\n    // modulation\n    #include <aomap_fragment>\n    vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n    #include <envmap_fragment>\n    #include <output_fragment>\n    #include <tonemapping_fragment>\n    #include <encodings_fragment>\n    #include <fog_fragment>\n    #include <premultiplied_alpha_fragment>\n    #include <dithering_fragment>\n}`;\n});\n;// CONCATENATED MODULE: ./esm/ShaderPhongMaterial.vert.glsl.js\n/**\n * https://github.com/mrdoob/three.js/blob/dev/src/renderers/shaders/ShaderLib/meshphong_vert.glsl.js\n */\n/* harmony default export */ const ShaderPhongMaterial_vert_glsl = (() => {\n  // language=GLSL\n  return `\n#define PHONG\n\nvarying vec3 vViewPosition;\nvarying vec2 uvPosition;\n#include <mesh_position_varying>\n#include <surface_normal_varying_chunk>\n#include <__expansion_uniform_chunk>\n\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n\nvoid main() {\n    #include <mesh_position_vertex>\n    uvPosition = uv;\n\n    #include <uv_vertex>\n    #include <uv2_vertex>\n    #include <color_vertex>\n    \n    #include <beginnormal_vertex>\n    #include <morphnormal_vertex>\n    #include <skinbase_vertex>\n    #include <skinnormal_vertex>\n    #include <defaultnormal_vertex>\n    #include <surface_normal_vertex_chunk>\n    #include <normal_vertex>\n    \n    #include <begin_vertex>\n    \n    #include <__expansion_vertex_chunk>\n    \n    #include <morphtarget_vertex>\n    #include <skinning_vertex>\n    #include <displacementmap_vertex>\n    #include <project_vertex>\n    #include <logdepthbuf_vertex>\n    #include <clipping_planes_vertex>\n    \n    vViewPosition = - mvPosition.xyz;\n\n    #include <worldpos_vertex>\n    #include <envmap_vertex>\n    #include <shadowmap_vertex>\n    #include <fog_vertex>\n}\n`;\n});\n// EXTERNAL MODULE: ./node_modules/three/build/three.module.js\nvar three_module = __webpack_require__(75);\n;// CONCATENATED MODULE: ./esm/chunk/GLSLChunk.js\n\n/**\n * ShaderChunkに登録を行うGLSLのコード片を格納するクラス。\n * GLSLコードの共有化を目的とする。\n */\nclass GLSLChunk {\n  /**\n   * ShaderChunkに登録する名前。\n   */\n  static getChunkName() {\n    return "";\n  }\n  /**\n   * ShaderChunkに登録するGLSLコード。\n   */\n  static getChunk() {\n    return "";\n  }\n  /**\n   * Chunkに関連する定数Defineを格納したオブジェクトを取得する。\n   * @see https://threejs.org/docs/#api/en/materials/ShaderMaterial.defines\n   */\n  static getDefines() {\n    return {};\n  }\n  /**\n   * ShaderChunkにGLSLコードを登録する。\n   */\n  static registerChunk() {\n    if (three_module/* ShaderChunk */.WdD && three_module/* ShaderChunk */.WdD[this.getChunkName()] == null) {\n      three_module/* ShaderChunk */.WdD[this.getChunkName()] = this.getChunk();\n    }\n  }\n  /**\n   * Chunkに関連する共有変数Uniformsを格納したオブジェクトを取得する。\n   * @see https://threejs.org/docs/#api/en/materials/ShaderMaterial.uniforms\n   */\n  static getUniform() {\n    return {};\n  }\n}\n;// CONCATENATED MODULE: ./esm/chunk/AnimationChunk.js\n\n/**\n * IAnimatableインターフェースで定義されたアニメーションを実行するGLSLチャンク。\n * uniformのtime値を操作する。\n * time値によってどのように変化するかは実装するShaderによる。\n */\nclass AnimationChunk_AnimationChunk extends GLSLChunk {\n  static registerChunk() {\n    TimeAnimationUniformChunk.registerChunk();\n  }\n  static getUniform() {\n    return {\n      time: {\n        value: 0.0\n      },\n      isAnimate: {\n        value: true\n      }\n    };\n  }\n  static addTime(self, delta) {\n    self.uniforms.time.value += delta * self.speed;\n  }\n}\nclass TimeAnimationUniformChunk extends GLSLChunk {\n  static getChunkName() {\n    return "time_animation_uniform_chunk";\n  }\n  static getChunk() {\n    return `\n    uniform float time;\n    uniform bool isAnimate;\n    `;\n  }\n}\n;// CONCATENATED MODULE: ./esm/chunk/ExpansionChunk.js\n\nclass ExpansionChunk extends GLSLChunk {\n  static registerChunk() {\n    ExpansionUniformChunk.registerChunk();\n    ExpansionVertexChunk.registerChunk();\n  }\n  static getDefines() {\n    return {\n      USE_EXPANSION: false\n    };\n  }\n  static getUniform() {\n    return {\n      expansionStrength: {\n        value: 0.0\n      }\n    };\n  }\n}\nclass ExpansionUniformChunk extends GLSLChunk {\n  static getChunkName() {\n    return "__expansion_uniform_chunk";\n  }\n  static getChunk() {\n    return `\n    #ifdef USE_EXPANSION\n      uniform float expansionStrength;\n    #endif\n    `;\n  }\n}\nclass ExpansionVertexChunk extends GLSLChunk {\n  static getChunkName() {\n    return "__expansion_vertex_chunk";\n  }\n  static getChunk() {\n    return `\n    #ifdef USE_EXPANSION\n      transformed += normal * expansionStrength;\n    #endif\n    `;\n  }\n}\n;// CONCATENATED MODULE: ./esm/chunk/MapChunk.js\n\n\n/**\n * マスクテクスチャを利用するShaderMaterial用Chunk。\n * マスクテクスチャがどのように描画に反映されるかは、各Materialのシェーダー実装による。\n */\nclass MapChunk extends GLSLChunk {\n  static registerChunk() {\n    super.registerChunk();\n    MapUniformChunk.registerChunk();\n    MapFragmentChunk.registerChunk();\n    MapFragmentBeginChunk.registerChunk();\n  }\n  static getUniform() {\n    return three_module/* UniformsUtils.merge */.rDY.merge([super.getUniform(), {\n      hasMap: {\n        value: false\n      },\n      map: {\n        value: null\n      }\n    }]);\n  }\n  static getMap(_self) {\n    return _self.uniforms.map.value;\n  }\n  static setMap(_self, val) {\n    _self.uniforms.map.value = val;\n    _self.uniforms.hasMap.value = val != null;\n  }\n}\nclass MapUniformChunk extends GLSLChunk {\n  static getChunkName() {\n    return "map_uniform_chunk";\n  }\n  static getChunk() {\n    return `\n      uniform bool hasMap;\n      uniform sampler2D map;\n    `;\n  }\n}\nclass MapFragmentChunk extends GLSLChunk {\n  static getChunkName() {\n    return "map_fragment_chunk";\n  }\n  static getChunk() {\n    return `\n      if( hasMap ){\n        vec4 texelColor = texture2D( map, mapUV );\n        diffuseColor *= texelColor;\n      }\n    `;\n  }\n}\nclass MapFragmentBeginChunk extends GLSLChunk {\n  static getChunkName() {\n    return "__ShaderMaterial__map_fragment_begin_chunk";\n  }\n  static getChunk() {\n    return `\n      vec2 mapUV = uvPosition;\n    `;\n  }\n}\n;// CONCATENATED MODULE: ./esm/chunk/RepeatPatternChunk.js\n\nclass RepeatPatternChunk extends GLSLChunk {\n  static registerChunk() {\n    RepeatPatternUniformChunk.registerChunk();\n    RepeatPatternFragmentChunk.registerChunk();\n  }\n  static getUniform() {\n    return {\n      division: {\n        value: 32.0\n      },\n      divisionScaleX: {\n        value: 1.0\n      }\n    };\n  }\n}\nclass RepeatPatternUniformChunk extends GLSLChunk {\n  static getChunkName() {\n    return "repeat_pattern_uniform_chunk";\n  }\n  static getChunk() {\n    return `\n      uniform float division;\n      uniform float divisionScaleX;\n    `;\n  }\n}\nclass RepeatPatternFragmentChunk extends GLSLChunk {\n  static getChunkName() {\n    return "repeat_pattern_fragment_chunk";\n  }\n  static getChunk() {\n    return `\n      vec2 uv =\n        uvPosition\n        * vec2( division * divisionScaleX, division);\n    `;\n  }\n}\n;// CONCATENATED MODULE: ./esm/chunk/MaskMapChunk.js\n\n\n\n/**\n * マスクテクスチャを利用するShaderMaterial用Chunk。\n * マスクテクスチャがどのように描画に反映されるかは、各Materialのシェーダー実装による。\n */\nclass MaskMapChunk extends RepeatPatternChunk {\n  static registerChunk() {\n    super.registerChunk();\n    MaskMapUniformChunk.registerChunk();\n    MaskMapFragmentChunk.registerChunk();\n  }\n  static getUniform() {\n    return three_module/* UniformsUtils.merge */.rDY.merge([super.getUniform(), {\n      hasMaskTexture: {\n        value: false\n      },\n      maskTexture: {\n        value: null\n      }\n    }]);\n  }\n  static getMaskTexture(_self) {\n    return _self.uniforms.maskTexture.value;\n  }\n  static setMaskTexture(_self, val) {\n    _self.uniforms.maskTexture.value = val;\n    _self.uniforms.hasMaskTexture.value = val != null;\n  }\n}\nclass MaskMapUniformChunk extends GLSLChunk {\n  static getChunkName() {\n    return "mask_map_uniform_chunk";\n  }\n  static getChunk() {\n    return `\n      uniform bool hasMaskTexture;\n      uniform sampler2D maskTexture;\n    `;\n  }\n}\nclass MaskMapFragmentChunk extends GLSLChunk {\n  static getChunkName() {\n    return "mask_map_fragment_chunk";\n  }\n  static getChunk() {\n    return `\n      float mask = 1.0;\n      if( hasMaskTexture ){\n        vec2 uVm = id / vec2( division * divisionScaleX, division);\n        mask = texture2D( maskTexture, uVm ).g;\n      }\n    `;\n  }\n}\n;// CONCATENATED MODULE: ./esm/chunk/MeshPhongChunk.js\n\n/**\n * MeshPhongMaterialと同等の機能を備えたShaderMaterialを実装するために必要なGLSLコードを格納したクラス。\n */\nclass MeshPhongChunk extends GLSLChunk {\n  static registerChunk() {\n    MeshPhongUniformChunk.registerChunk();\n    MeshPhongDiffuseColorChunk.registerChunk();\n    MeshPhongSwitchingAlphaMapChunk.registerChunk();\n    MeshPositionVaryingChunk.registerChunk();\n    MeshPositionVertexChunk.registerChunk();\n  }\n  static getDefines() {\n    return {\n      USE_MESH_POSITION: false\n    };\n  }\n}\nclass MeshPhongUniformChunk extends GLSLChunk {\n  static getChunkName() {\n    return "mesh_phong_uniform";\n  }\n  static getChunk() {\n    return `\n      uniform vec3 diffuse;\n      uniform vec3 emissive;\n      uniform vec3 specular;\n      uniform float shininess;\n      uniform float opacity;\n      uniform bool hasAlphaMap;\n      uniform sampler2D alphaMap;\n    `;\n  }\n}\nclass MeshPhongDiffuseColorChunk extends GLSLChunk {\n  static getChunkName() {\n    return "mesh_phong_diffuse_color";\n  }\n  static getChunk() {\n    return `\n      vec4 diffuseColor = vec4( diffuse, opacity );\n      ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n      vec3 totalEmissiveRadiance = emissive;\n    `;\n  }\n}\nclass MeshPhongSwitchingAlphaMapChunk extends GLSLChunk {\n  static getChunkName() {\n    return "mesh_phong_switching_alpha_map";\n  }\n  static getChunk() {\n    return `\n      if( hasAlphaMap ){\n        diffuseColor.a *= texture2D( alphaMap, mapUV ).g;\n      }\n    `;\n  }\n}\nclass MeshPositionVaryingChunk extends GLSLChunk {\n  static getChunkName() {\n    return "mesh_position_varying";\n  }\n  static getChunk() {\n    return `\n    #ifdef USE_MESH_POSITION\n    varying vec3 meshPosition;\n    #endif\n    `;\n  }\n}\nclass MeshPositionVertexChunk extends GLSLChunk {\n  static getChunkName() {\n    return "mesh_position_vertex";\n  }\n  static getChunk() {\n    return `\n    #ifdef USE_MESH_POSITION\n    meshPosition = position;\n    #endif\n    `;\n  }\n}\n;// CONCATENATED MODULE: ./esm/chunk/ReversibleChunk.js\n\nclass ReversibleChunk extends GLSLChunk {\n  static registerChunk() {\n    ReversibleUniformChunk.registerChunk();\n  }\n  static getUniform() {\n    return {\n      isReversed: {\n        value: false\n      }\n    };\n  }\n}\nclass ReversibleUniformChunk extends GLSLChunk {\n  static getChunkName() {\n    return "reversible_uniform_chunk";\n  }\n  static getChunk() {\n    return `\n      uniform bool isReversed;\n    `;\n  }\n}\n;// CONCATENATED MODULE: ./esm/chunk/SurfaceNormalChunk.js\n\nclass SurfaceNormalChunk_SurfaceNormalChunk extends GLSLChunk {\n  static registerChunk() {\n    SurfaceNormalVaryingChunk.registerChunk();\n    SurfaceNormalVertexChunk.registerChunk();\n  }\n  static getDefines() {\n    return {\n      USE_SURFACE_NORMAL: false\n    };\n  }\n  static getUniform() {\n    return {};\n  }\n}\nclass SurfaceNormalVaryingChunk extends GLSLChunk {\n  static getChunkName() {\n    return "surface_normal_varying_chunk";\n  }\n  static getChunk() {\n    return `\n    #ifdef USE_SURFACE_NORMAL\n      varying vec3 surfaceNormal;\n    #endif\n    `;\n  }\n}\nclass SurfaceNormalVertexChunk extends GLSLChunk {\n  static getChunkName() {\n    return "surface_normal_vertex_chunk";\n  }\n  static getChunk() {\n    return `\n    #ifdef USE_SURFACE_NORMAL\n      surfaceNormal = normalize( transformedNormal );\n    #endif\n    `;\n  }\n}\n;// CONCATENATED MODULE: ./esm/chunk/WavyAnimationChunk.js\n\n\n\n/**\n * IWaveAnimatableインターフェースで定義されたアニメーションを実装するためのGLSLチャンク。\n * 実行にはグリッドid値が必要。idはvec2。\n * 結果はdiffuseColor.aに反映される。\n */\nclass WavyAnimationChunk extends AnimationChunk_AnimationChunk {\n  static registerChunk() {\n    super.registerChunk();\n    WavyAnimationFragmentChunk.registerChunk();\n    WavyAnimationUniformChunk.registerChunk();\n  }\n  static getUniform() {\n    return three_module/* UniformsUtils.merge */.rDY.merge([super.getUniform(), {\n      raisedBottom: {\n        value: 0.05\n      },\n      waveFrequency: {\n        value: 0.2\n      },\n      wavePow: {\n        value: 4.0\n      },\n      direction: {\n        value: Directions.vertical\n      }\n    }]);\n  }\n}\nclass WavyAnimationFragmentChunk extends GLSLChunk {\n  static getChunkName() {\n    return "wavy_animation_fragment_chunk";\n  }\n  static getChunk() {\n    return `\n    float distance = id.y;\n    if( direction == ${Directions.horizontal}){\n      distance = id.x;\n    }else if( direction == ${Directions.radial} ){\n      distance = length(id.xy);\n    }\n\n    float wavy = isAnimate\n      ? pow( sin( (distance * waveFrequency - time) ), wavePow) + raisedBottom\n      : 1.0;\n  \n    diffuseColor.a *= wavy;\n    `;\n  }\n}\nclass WavyAnimationUniformChunk extends GLSLChunk {\n  static getChunkName() {\n    return "wavy_animation_uniform_chunk";\n  }\n  static getChunk() {\n    return `\n    uniform float raisedBottom;\n    uniform float waveFrequency;\n    uniform float wavePow;\n    uniform int direction;\n    `;\n  }\n}\n/**\n * Wavyアニメーションの波及方向を示すenum。\n */\nvar Directions;\n(function (Directions) {\n  Directions[Directions["vertical"] = 4] = "vertical";\n  Directions[Directions["horizontal"] = 3] = "horizontal";\n  /**\n   * id値(0,0)を中心に同心円状に波及する。\n   */\n  Directions[Directions["radial"] = 5] = "radial";\n})(Directions || (Directions = {}));\n;// CONCATENATED MODULE: ./esm/chunk/index.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n;// CONCATENATED MODULE: ./esm/ShaderPhongMaterial.js\n\n\n\n\n/**\n * MeshPhongMaterialに準じるShaderMaterialクラス。\n *\n * @see https://github.com/mrdoob/three.js/blob/76c64b23d422dcfb36a28353f45b1effa1f68c5a/src/renderers/shaders/ShaderLib.js#L53\n */\nclass ShaderPhongMaterial_ShaderPhongMaterial extends three_module/* ShaderMaterial */.jyz {\n  /**\n   * コンストラクタ。\n   * @param vertexShader\n   * @param fragmentShader\n   * @param parameters\n   */\n  constructor(vertexShader, fragmentShader, parameters) {\n    super(parameters);\n    this._opacity = 1.0;\n    parameters !== null && parameters !== void 0 ? parameters : parameters = {};\n    vertexShader !== null && vertexShader !== void 0 ? vertexShader : vertexShader = ShaderPhongMaterial_vert_glsl();\n    fragmentShader !== null && fragmentShader !== void 0 ? fragmentShader : fragmentShader = ShaderPhongMaterial_frag_glsl();\n    this.initChunks();\n    this.initUniforms();\n    this.initDefines();\n    this.vertexShader = vertexShader;\n    this.fragmentShader = fragmentShader;\n    this.initDefaultSetting(parameters);\n  }\n  /**\n   * このMaterialに必要なuniformsを生成する。\n   */\n  static getBasicUniforms() {\n    return three_module/* UniformsUtils.merge */.rDY.merge([three_module/* UniformsLib.common */.rBU.common, three_module/* UniformsLib.specularmap */.rBU.specularmap, three_module/* UniformsLib.envmap */.rBU.envmap, three_module/* UniformsLib.aomap */.rBU.aomap, three_module/* UniformsLib.lightmap */.rBU.lightmap, three_module/* UniformsLib.emissivemap */.rBU.emissivemap, three_module/* UniformsLib.bumpmap */.rBU.bumpmap, three_module/* UniformsLib.normalmap */.rBU.normalmap, three_module/* UniformsLib.displacementmap */.rBU.displacementmap, three_module/* UniformsLib.gradientmap */.rBU.gradientmap, three_module/* UniformsLib.fog */.rBU.fog, three_module/* UniformsLib.lights */.rBU.lights, {\n      emissive: {\n        value: new three_module/* Color */.Ilk(0x000000)\n      },\n      specular: {\n        value: new three_module/* Color */.Ilk(0x111111)\n      },\n      shininess: {\n        value: 30\n      },\n      hasAlphaMap: {\n        value: false\n      }\n    }, SurfaceNormalChunk_SurfaceNormalChunk.getUniform(), ExpansionChunk.getUniform(), MapChunk.getUniform()]);\n  }\n  /**\n   * ShaderChunkにこのマテリアルに必要なChunkを追加する。\n   */\n  initChunks() {\n    MeshPhongChunk.registerChunk();\n    SurfaceNormalChunk_SurfaceNormalChunk.registerChunk();\n    ExpansionChunk.registerChunk();\n    MapChunk.registerChunk();\n  }\n  /**\n   * uniformsを初期化する。\n   */\n  initUniforms() {\n    this.uniforms = three_module/* UniformsUtils.merge */.rDY.merge([ShaderPhongMaterial_ShaderPhongMaterial.getBasicUniforms(), ExpansionChunk.getUniform(), {}]);\n  }\n  /**\n   * definesを初期化する。\n   */\n  initDefines() {\n    this.defines = Object.assign({}, MeshPhongChunk.getDefines(), SurfaceNormalChunk_SurfaceNormalChunk.getDefines(), ExpansionChunk.getDefines(), this.defines);\n  }\n  /**\n   * 1.オプションで指定されなかったパラメーター値を補完する。\n   * 2.uniformsに代入する必要のあるパラメーターを明示的に代入する。\n   *\n   * @param parameters\n   */\n  initDefaultSetting(parameters) {\n    this.uniformOpacity = this._opacity;\n    this.lights = true; //FIXME シェーダーがエラーを起こすのでlights設定は強制でON\n  }\n  /**\n   * MeshPhongマテリアルと互換性を持つために、colorプロパティはdiffuseへ代入される。\n   */\n  get color() {\n    return this.uniforms.diffuse.value;\n  }\n  set color(value) {\n    this.uniforms.diffuse.value = value;\n  }\n  /**\n   * 透明度\n   * @deprecated Use uniformOpacity, To be removed in version 0.3.0\n   * @see https://github.com/microsoft/TypeScript/pull/37894\n   */\n  //@ts-ignore : これはopacityプロパティとuniforms.opacityプロパティを同期するために利用されます。\n  get opacity() {\n    return this.uniformOpacity;\n  }\n  /**\n   * 透明度\n   */\n  get uniformOpacity() {\n    return this._opacity;\n  }\n  /**\n   * 透明度\n   * @param value\n   * @deprecated Use uniformOpacity, To be removed in version 0.3.0\n   * @see https://github.com/microsoft/TypeScript/pull/37894\n   */\n  //@ts-ignore : これはopacityプロパティとuniforms.opacityプロパティを同期するために利用されます。\n  set opacity(value) {\n    this.uniformOpacity = value;\n  }\n  /**\n   * 透明度\n   * opacityは基底クラスのMaterialのコンストラクタ内で明示的に1.0が代入される。\n   * この段階でuniformsはundefinedなので、そのままでは初期化できない。\n   * このsetterでは受け取った値をprivate変数に保存して、初期化後にuniformsに再代入する。\n   * @param value\n   */\n  set uniformOpacity(value) {\n    var _a;\n    this._opacity = value;\n    if ((_a = this.uniforms) === null || _a === void 0 ? void 0 : _a.opacity) {\n      this.uniforms.opacity.value = value;\n    }\n  }\n  get emissive() {\n    return this.uniforms.emissive.value;\n  }\n  set emissive(value) {\n    this.uniforms.emissive.value = value;\n  }\n  get map() {\n    return MapChunk.getMap(this);\n  }\n  set map(val) {\n    MapChunk.setMap(this, val);\n    this.onSetMap(val);\n  }\n  onSetMap(val) {}\n  get alphaMap() {\n    return this.uniforms.alphaMap.value;\n  }\n  set alphaMap(value) {\n    this.uniforms.alphaMap.value = value;\n    this.uniforms.hasAlphaMap.value = value != null;\n    this.onSetAlphaMap(value);\n  }\n  onSetAlphaMap(value) {}\n  /**\n   * 発光状態のために、マテリアルの設定をまとめて変更する。\n   * {@link https://stackoverflow.com/questions/37647853/three-js-depthwrite-vs-depthtest-for-transparent-canvas-texture-map-on-three-p}\n   */\n  startGlow() {\n    this.alphaTest = 0.0;\n    this.depthWrite = false;\n    this.blending = three_module/* AdditiveBlending */.WMw;\n  }\n}\n;// CONCATENATED MODULE: ./esm/ShaderSpriteMaterial.js\n\n\n\n\nclass ShaderSpriteMaterial_ShaderSpriteMaterial extends (/* unused pure expression or super */ null && (ShaderMaterial)) {\n  /**\n   * コンストラクタ。\n   * @param vertexShader\n   * @param fragmentShader\n   * @param parameters\n   */\n  constructor(vertexShader, fragmentShader, parameters) {\n    super(parameters);\n    this._opacity = 1.0;\n    parameters !== null && parameters !== void 0 ? parameters : parameters = {};\n    vertexShader !== null && vertexShader !== void 0 ? vertexShader : vertexShader = VertexShader();\n    fragmentShader !== null && fragmentShader !== void 0 ? fragmentShader : fragmentShader = FragmentShader();\n    this.initChunks();\n    this.initUniforms();\n    this.initDefines();\n    this.vertexShader = vertexShader;\n    this.fragmentShader = fragmentShader;\n    this.initDefaultSetting(parameters);\n  }\n  /**\n   * ShaderChunkにこのマテリアルに必要なChunkを追加する。\n   */\n  initChunks() {\n    SpriteChunk.registerChunk();\n  }\n  /**\n   * uniformsを初期化する。\n   */\n  initUniforms() {\n    this.uniforms = UniformsUtils.merge([SpriteChunk.getUniform(), {}]);\n  }\n  /**\n   * definesを初期化する。\n   */\n  initDefines() {\n    this.defines = Object.assign({}, SpriteChunk.getDefines(), this.defines);\n  }\n  /**\n   * 1.オプションで指定されなかったパラメーター値を補完する。\n   * 2.uniformsに代入する必要のあるパラメーターを明示的に代入する。\n   *\n   * @param parameters\n   */\n  initDefaultSetting(parameters) {\n    this.uniformOpacity = this._opacity;\n  }\n  /**\n   * 透明度\n   * @deprecated Use uniformOpacity, To be removed in version 0.3.0\n   * @see https://github.com/microsoft/TypeScript/pull/37894\n   */\n  //@ts-ignore : これはopacityプロパティとuniforms.opacityプロパティを同期するために利用されます。\n  get opacity() {\n    return this._opacity;\n  }\n  /**\n   * 透明度\n   */\n  get uniformOpacity() {\n    return this._opacity;\n  }\n  /**\n   * 透明度\n   * @deprecated Use uniformOpacity, To be removed in version 0.3.0\n   * @param value\n   */\n  //@ts-ignore : これはopacityプロパティとuniforms.opacityプロパティを同期するために利用されます。\n  set opacity(value) {\n    this.uniformOpacity = value;\n  }\n  /**\n   * 透明度\n   * opacityは基底クラスのMaterialのコンストラクタ内で明示的に1.0が代入される。\n   * この段階でuniformsはundefinedなので、そのままでは初期化できない。\n   * このsetterでは受け取った値をprivate変数に保存して、初期化後にuniformsに再代入する。\n   * @param value\n   */\n  set uniformOpacity(value) {\n    var _a;\n    this._opacity = value;\n    if ((_a = this.uniforms) === null || _a === void 0 ? void 0 : _a.opacity) {\n      this.uniforms.opacity.value = value;\n    }\n  }\n  /**\n   * Spriteマテリアルと互換性を持つために、colorプロパティはdiffuseへ代入される。\n   */\n  get color() {\n    return this.uniforms.diffuse.value;\n  }\n  set color(value) {\n    this.uniforms.diffuse.value = value;\n  }\n  get center() {\n    return this.uniforms.center.value;\n  }\n  set center(value) {\n    this.uniforms.center.value = value;\n  }\n  get rotation() {\n    return this.uniforms.rotation.value;\n  }\n  set rotation(value) {\n    this.uniforms.rotation.value = value;\n  }\n  get uvTransform() {\n    return this.uniforms.uvTransform.value;\n  }\n  set uvTransform(value) {\n    this.uniforms.uvTransform.value = value;\n  }\n  get map() {\n    return this.uniforms.map.value;\n  }\n  set map(value) {\n    this.uniforms.map.value = value;\n  }\n}\n;// CONCATENATED MODULE: ./esm/ShaderBasicMaterial.js\n\n\n\n\n/**\n * MeshBasicMaterialに準じたShaderMaterial\n */\nclass ShaderBasicMaterial_ShaderBasicMaterial extends (/* unused pure expression or super */ null && (ShaderMaterial)) {\n  /**\n   * @param vertexShader\n   * @param fragmentShader\n   * @param parameters\n   */\n  constructor(vertexShader, fragmentShader, parameters) {\n    super(parameters);\n    this._opacity = 1.0;\n    this.uniforms = ShaderBasicMaterial_ShaderBasicMaterial.getBasicUniforms();\n    this.vertexShader = vertexShader !== null && vertexShader !== void 0 ? vertexShader : VertexShader();\n    this.fragmentShader = fragmentShader !== null && fragmentShader !== void 0 ? fragmentShader : FragmentShader();\n    SurfaceNormalChunk.registerChunk();\n    this.initDefines();\n    this.uniformOpacity = this._opacity;\n  }\n  /**\n   * このMaterialに必要なuniformsを生成する。\n   *\n   * @see https://github.com/mrdoob/three.js/blob/0c26bb4bb8220126447c8373154ac045588441de/src/renderers/shaders/ShaderLib.js#L11\n   */\n  static getBasicUniforms() {\n    return UniformsUtils.merge([UniformsLib.common, UniformsLib.specularmap, UniformsLib.envmap, UniformsLib.aomap, UniformsLib.lightmap, UniformsLib.fog]);\n  }\n  get color() {\n    return this.uniforms.diffuse.value;\n  }\n  set color(value) {\n    this.uniforms.diffuse.value = value;\n  }\n  get uniformOpacity() {\n    return this._opacity;\n  }\n  set uniformOpacity(value) {\n    var _a;\n    this._opacity = value;\n    if ((_a = this.uniforms) === null || _a === void 0 ? void 0 : _a.opacity) {\n      this.uniforms.opacity.value = value;\n    }\n  }\n  initDefines() {\n    this.defines = Object.assign({}, SurfaceNormalChunk.getDefines(), this.defines);\n  }\n}\n;// CONCATENATED MODULE: ./esm/contour/ContourMaterial.js\n\n\n\n\n/**\n * テクスチャを等高線状にマップするマテリアル。\n * マッピング以外の機能はMeshPhongMaterialに準じる。\n */\nclass ContourMaterial extends (/* unused pure expression or super */ null && (ShaderPhongMaterial)) {\n  get map() {\n    return this._map;\n  }\n  loadMap(url, geo) {\n    this._map = new TextureLoader().load(url, texture => {\n      if (this.uniforms && this.uniforms.map) {\n        this.uniforms.map.value = texture;\n      }\n    });\n    geo.computeBoundingBox();\n    this.uniforms.top.value = geo.boundingBox.max.y;\n    this.uniforms.bottom.value = geo.boundingBox.min.y;\n  }\n  constructor(parameters) {\n    super(VertexShader(), FragmentShader(), parameters);\n  }\n  initDefines() {\n    super.initDefines();\n    this.defines.USE_MESH_POSITION = true;\n  }\n  initUniforms() {\n    this.uniforms = UniformsUtils.merge([ShaderPhongMaterial.getBasicUniforms(), {\n      top: {\n        value: 1.0\n      },\n      bottom: {\n        value: -1.0\n      }\n    }]);\n  }\n  initDefaultSetting(parameters) {\n    super.initDefaultSetting(parameters);\n    if (parameters.transparent == null) {\n      this.transparent = true;\n    } else {\n      this.transparent = parameters.transparent;\n    }\n    if (this.transparent && parameters.alphaTest == null) {\n      this.alphaTest = 0.5;\n    }\n    if (parameters.side == null) {\n      this.side = DoubleSide;\n    } else {\n      this.side = parameters.side;\n    }\n  }\n}\n;// CONCATENATED MODULE: ./esm/GridMaterial.js\n\n\n\n/**\n * グリッド状に分割されたマテリアル。\n */\nclass GridMaterial_GridMaterial extends ShaderPhongMaterial_ShaderPhongMaterial {\n  get division() {\n    return this.uniforms.division.value;\n  }\n  set division(value) {\n    this.uniforms.division.value = value;\n  }\n  get divisionScaleX() {\n    return this.uniforms.divisionScaleX.value;\n  }\n  set divisionScaleX(value) {\n    this.uniforms.divisionScaleX.value = value;\n  }\n  get isReversed() {\n    return this.uniforms.isReversed.value;\n  }\n  set isReversed(value) {\n    this.uniforms.isReversed.value = value;\n  }\n  get maskTexture() {\n    return MaskMapChunk.getMaskTexture(this);\n  }\n  set maskTexture(val) {\n    MaskMapChunk.setMaskTexture(this, val);\n  }\n  initChunks() {\n    super.initChunks();\n    MaskMapChunk.registerChunk();\n    ReversibleChunk.registerChunk();\n  }\n  static getBasicUniforms() {\n    return three_module/* UniformsUtils.merge */.rDY.merge([ShaderPhongMaterial_ShaderPhongMaterial.getBasicUniforms(), ReversibleChunk.getUniform(), MaskMapChunk.getUniform()]);\n  }\n  initDefaultSetting(parameters) {\n    super.initDefaultSetting(parameters);\n    if (parameters.transparent == null) {\n      this.transparent = true;\n    }\n  }\n}\n// EXTERNAL MODULE: ./node_modules/@masatomakino/raf-ticker/esm/index.js + 2 modules\nvar esm = __webpack_require__(163);\n;// CONCATENATED MODULE: ./esm/WavyGridMaterial.js\n\n\n\n\n/**\n * グリッド状に分割され、Wavyアニメーションを行うマテリアル。\n */\nclass WavyGridMaterial_WavyGridMaterial extends GridMaterial_GridMaterial {\n  addTime(delta) {\n    AnimationChunk_AnimationChunk.addTime(this, delta);\n  }\n  /**\n   * 波アニメーションを行うか否か。\n   */\n  get isAnimate() {\n    return this.uniforms.isAnimate.value;\n  }\n  set isAnimate(value) {\n    this.uniforms.isAnimate.value = value;\n    if (this.isAnimate) {\n      this.startAnimation();\n    } else {\n      this.stopAnimation();\n    }\n  }\n  /**\n   * 波の振幅\n   * 1の場合、幅1ヘックス\n   * 0.5の場合、幅2ヘックスになる\n   */\n  get waveFrequency() {\n    return this.uniforms.waveFrequency.value;\n  }\n  set waveFrequency(value) {\n    this.uniforms.waveFrequency.value = value;\n  }\n  get wavePow() {\n    return this.uniforms.wavePow.value;\n  }\n  set wavePow(value) {\n    this.uniforms.wavePow.value = value;\n  }\n  /**\n   * 明るさの底上げ\n   */\n  get raisedBottom() {\n    return this.uniforms.raisedBottom.value;\n  }\n  set raisedBottom(value) {\n    this.uniforms.raisedBottom.value = value;\n  }\n  /**\n   * 波が発生する方角\n   */\n  get direction() {\n    return this.uniforms.direction.value;\n  }\n  set direction(value) {\n    this.uniforms.direction.value = value;\n  }\n  constructor(vertexShader, fragmentShader, parameters) {\n    super(vertexShader, fragmentShader, parameters);\n    /**\n     * 波の速度\n     * 0.5にすると1の半分の速度になる。\n     * マイナスを指定すると、波の進行方向が反転する。\n     */\n    this.speed = -0.5;\n    /*\n     * IAnimatable implements\n     */\n    this.animationListener = e => {\n      this.addTime(e.delta / 1000);\n    };\n    this.isAnimate = this.isAnimate; //reset and start animation\n  }\n\n  initChunks() {\n    super.initChunks();\n    WavyAnimationChunk.registerChunk();\n  }\n  static getBasicUniforms() {\n    return three_module/* UniformsUtils.merge */.rDY.merge([super.getBasicUniforms(), ReversibleChunk.getUniform(), WavyAnimationChunk.getUniform(), MaskMapChunk.getUniform()]);\n  }\n  initDefaultSetting(parameters) {\n    super.initDefaultSetting(parameters);\n  }\n  startAnimation() {\n    esm/* RAFTicker.on */.Fz.on(esm/* RAFTickerEventType.onBeforeTick */.M9.onBeforeTick, this.animationListener);\n  }\n  stopAnimation() {\n    esm/* RAFTicker.off */.Fz.off(esm/* RAFTickerEventType.onBeforeTick */.M9.onBeforeTick, this.animationListener);\n  }\n}\n;// CONCATENATED MODULE: ./esm/crossGrid/CrossGridMaterial.js\n\n\n\n\n/**\n * 十字線を正方形グリッドの中心に描画するマテリアル。\n */\nclass CrossGridMaterial extends (/* unused pure expression or super */ null && (WavyGridMaterial)) {\n  /**\n   * グリッド線の太さ\n   * 0.0で線なし、0.5でグリッド面なしになる。\n   */\n  get gridWeight() {\n    return this.uniforms.gridWeight.value;\n  }\n  set gridWeight(value) {\n    this.uniforms.gridWeight.value = value;\n  }\n  get radius() {\n    return this.uniforms.radius.value;\n  }\n  set radius(value) {\n    this.uniforms.radius.value = value;\n  }\n  constructor(parameters) {\n    super(VertexShader(), FragmentShader(), parameters);\n  }\n  initUniforms() {\n    this.uniforms = UniformsUtils.merge([WavyGridMaterial.getBasicUniforms(), {\n      gridWeight: {\n        value: 0.03\n      },\n      radius: {\n        value: 0.15\n      }\n    }]);\n  }\n}\n;// CONCATENATED MODULE: ./esm/halftoneGrid/HalftoneGridMaterial.js\n\n\n\n\n/**\n * MaskMapをハーフトーン分解するマテリアル\n */\nclass HalftoneGridMaterial extends (/* unused pure expression or super */ null && (WavyGridMaterial)) {\n  get radius() {\n    return this.uniforms.radius.value;\n  }\n  set radius(value) {\n    this.uniforms.radius.value = value;\n  }\n  constructor(parameters) {\n    super(VertexShader(), FragmentShader(), parameters);\n  }\n  initUniforms() {\n    this.uniforms = UniformsUtils.merge([WavyGridMaterial.getBasicUniforms(), {\n      radius: {\n        value: 0.75\n      }\n    }]);\n  }\n}\n;// CONCATENATED MODULE: ./esm/hexGrid/HexGridMaterial.js\n\n\n\n\n\n/**\n * 六角形グリッドマテリアル\n */\nclass HexGridMaterial extends (/* unused pure expression or super */ null && (WavyGridMaterial)) {\n  /**\n   * グリッド線の太さ\n   * 0.0で線なし、0.5でグリッド面なしになる。\n   */\n  get gridWeight() {\n    return this.uniforms.gridWeight.value;\n  }\n  set gridWeight(value) {\n    this.uniforms.gridWeight.value = value;\n  }\n  constructor(parameters) {\n    super(VertexShader(), FragmentShader(), parameters);\n  }\n  initUniforms() {\n    this.uniforms = UniformsUtils.merge([WavyGridMaterial.getBasicUniforms(), {\n      gridWeight: {\n        value: 0.03\n      }\n    }]);\n  }\n  initChunks() {\n    super.initChunks();\n    HexGridChunk.registerChunk();\n  }\n}\n;// CONCATENATED MODULE: ./esm/squareGrid/SquareGridMaterial.frag.glsl.js\n/**\n * 四角形のグリッドを描画するシェーダー\n */\n/* harmony default export */ const SquareGridMaterial_frag_glsl = (() => {\n  // language=GLSL\n  return `\n#define PHONG\n\n#include <mesh_phong_uniform>\nvarying vec2 uvPosition;\n#include <mesh_position_varying>\n\n//user settings\n#include <time_animation_uniform_chunk>\n#include <wavy_animation_uniform_chunk>\n#include <repeat_pattern_uniform_chunk>\n#include <mask_map_uniform_chunk>\n#include <reversible_uniform_chunk>\nuniform float gridWeight;\n\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n// #include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n    #include <clipping_planes_fragment>\n  \n    #include <mesh_phong_diffuse_color>\n    \n    #include <logdepthbuf_fragment>\n    #include <__ShaderMaterial__map_fragment_begin_chunk>\n    #include <map_fragment>\n    #include <color_fragment>\n\n    #include <repeat_pattern_fragment_chunk>    \n    vec2 localPos = mod(uv, 1.0) - 0.5;\n    vec2 id = uv - localPos;\n    #include <wavy_animation_fragment_chunk>\n\n    #include <mask_map_fragment_chunk>\n    float w = gridWeight + (1.0-mask);\n    w = clamp( w, 0.0, 1.0);\n    float margin = clamp ( w * 0.33, 0.03, 0.1 );\n    \n    float stepHigh = 0.5-(w+margin);\n    float stepLow = -0.5+w+margin;\n    \n    //float gridLine = smoothstep(w, stepMax, hc.y);\n    float gridLine = smoothstep ( 0.5-w, stepHigh, localPos.x );\n    gridLine *= smoothstep ( 0.5-w, stepHigh, localPos.y );\n    gridLine *= smoothstep ( -0.5+w, stepLow, localPos.x );\n    gridLine *= smoothstep ( -0.5+w, stepLow, localPos.y );\n    \n    gridLine = isReversed\n        ? 1.0 - gridLine\n        : gridLine;\n    diffuseColor.a *= gridLine;\n\n    #include <mesh_phong_switching_alpha_map>\n\n    //#include <alphamap_fragment>\n    #include <alphatest_fragment>\n    #include <specularmap_fragment>\n    #include <normal_fragment_begin>\n    #include <normal_fragment_maps>\n    #include <emissivemap_fragment>\n    // accumulation\n    #include <lights_phong_fragment>\n    #include <lights_fragment_begin>\n    #include <lights_fragment_maps>\n    #include <lights_fragment_end>\n    // modulation\n    #include <aomap_fragment>\n    vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n    #include <envmap_fragment>\n    #include <output_fragment>\n    #include <tonemapping_fragment>\n    #include <encodings_fragment>\n    #include <fog_fragment>\n    #include <premultiplied_alpha_fragment>\n    #include <dithering_fragment>\n}`;\n});\n;// CONCATENATED MODULE: ./esm/squareGrid/SquareGridMaterial.js\n\n\n\n\n/**\n * 四角形グリッドマテリアル\n */\nclass SquareGridMaterial extends WavyGridMaterial_WavyGridMaterial {\n  /**\n   * グリッド線の太さ\n   * 0.0で線なし、0.5でグリッド面なしになる。\n   */\n  get gridWeight() {\n    return this.uniforms.gridWeight.value;\n  }\n  set gridWeight(value) {\n    this.uniforms.gridWeight.value = value;\n  }\n  constructor(parameters) {\n    super(ShaderPhongMaterial_vert_glsl(), SquareGridMaterial_frag_glsl(), parameters);\n  }\n  initUniforms() {\n    this.uniforms = three_module/* UniformsUtils.merge */.rDY.merge([WavyGridMaterial_WavyGridMaterial.getBasicUniforms(), {\n      gridWeight: {\n        value: 0.03\n      }\n    }]);\n  }\n}\n;// CONCATENATED MODULE: ./esm/skyCloud/SkyCloudMaterial.js\n\n\n\n\n\n\nclass SkyCloudMaterial extends (/* unused pure expression or super */ null && (ShaderPhongMaterial)) {\n  get scale() {\n    return this.uniforms.scale.value;\n  }\n  set scale(value) {\n    this.uniforms.scale.value = value;\n  }\n  addTime(delta) {\n    AnimationChunk.addTime(this, delta);\n  }\n  get isAnimate() {\n    return this.uniforms.isAnimate.value;\n  }\n  set isAnimate(value) {\n    this.uniforms.isAnimate.value = value;\n    if (this.isAnimate) {\n      this.startAnimation();\n    } else {\n      this.stopAnimation();\n    }\n  }\n  get skyColor() {\n    return this.uniforms.skyColor.value;\n  }\n  set skyColor(value) {\n    this.uniforms.skyColor.value = value;\n  }\n  get cloudVolume() {\n    return this.uniforms.cloudVolume.value;\n  }\n  set cloudVolume(value) {\n    this.uniforms.cloudVolume.value = value;\n  }\n  get cloudBottomVolume() {\n    return this.uniforms.cloudBottomVolume.value;\n  }\n  set cloudBottomVolume(value) {\n    this.uniforms.cloudBottomVolume.value = value;\n  }\n  get cloudBottomSaturation() {\n    return this.uniforms.cloudBottomSaturation.value;\n  }\n  set cloudBottomSaturation(value) {\n    this.uniforms.cloudBottomSaturation.value = value;\n  }\n  get cloudTransformSpeed() {\n    return this.uniforms.cloudTransformSpeed.value;\n  }\n  set cloudTransformSpeed(value) {\n    this.uniforms.cloudTransformSpeed.value = value;\n  }\n  /**\n   *\n   * @param parameters\n   */\n  constructor(parameters) {\n    super(VertexShader(), FragmentShader(), parameters);\n    /**\n     * 波の速度\n     * 0.5にすると1の半分の速度になる。\n     * マイナスを指定すると、波の進行方向が反転する。\n     */\n    this.speed = -0.02;\n    /*\n     * IAnimatable implements\n     */\n    this.animationListener = e => {\n      this.addTime(e.delta / 1000);\n    };\n    this.isAnimate = this.isAnimate; //reset and start animation\n  }\n\n  initChunks() {\n    super.initChunks();\n    AnimationChunk.registerChunk();\n  }\n  initUniforms() {\n    this.uniforms = UniformsUtils.merge([ShaderPhongMaterial.getBasicUniforms(), AnimationChunk.getUniform(), {\n      scale: {\n        value: 3.0\n      },\n      cloudTransformSpeed: {\n        value: 0.15\n      },\n      cloudVolume: {\n        value: 16.0\n      },\n      cloudBottomVolume: {\n        value: 0.08\n      },\n      cloudBottomSaturation: {\n        value: 0.5\n      },\n      skyColor: {\n        value: new Color(0.101961, 0.619608, 0.666667)\n      }\n    }]);\n  }\n  initDefaultSetting(parameters) {\n    super.initDefaultSetting(parameters);\n    if (parameters.transparent == null) {\n      this.transparent = true;\n    } else {\n      this.transparent = parameters.transparent;\n    }\n  }\n  startAnimation() {\n    RAFTicker.on(RAFTickerEventType.onBeforeTick, this.animationListener);\n  }\n  stopAnimation() {\n    RAFTicker.off(RAFTickerEventType.onBeforeTick, this.animationListener);\n  }\n}\n;// CONCATENATED MODULE: ./esm/fbmDissolve/FBMDissolveMaterial.js\n\n\n\n\n\nclass FBMDissolveMaterial extends (/* unused pure expression or super */ null && (ShaderPhongMaterial)) {\n  get tiles() {\n    return this.uniforms.tiles.value;\n  }\n  set tiles(value) {\n    this.uniforms.tiles.value = value;\n  }\n  get hashLoop() {\n    return this.uniforms.hashLoop.value;\n  }\n  set hashLoop(value) {\n    this.uniforms.hashLoop.value = value;\n  }\n  get amp() {\n    return this.uniforms.amp.value;\n  }\n  set amp(value) {\n    this.uniforms.amp.value = value;\n  }\n  get progress() {\n    return this.uniforms.progress.value;\n  }\n  set progress(value) {\n    this.uniforms.progress.value = value;\n  }\n  get edgeWeight() {\n    return this.uniforms.edgeWeight.value;\n  }\n  set edgeWeight(value) {\n    this.uniforms.edgeWeight.value = value;\n  }\n  get edgeColor() {\n    return this.uniforms.edgeColor.value;\n  }\n  set edgeColor(value) {\n    this.uniforms.edgeColor.value = value;\n  }\n  /**\n   *\n   * @param parameters\n   */\n  constructor(parameters) {\n    super(VertexShader(), FragmentShader(), parameters);\n  }\n  initUniforms() {\n    this.uniforms = UniformsUtils.merge([ShaderPhongMaterial.getBasicUniforms(), TilingFBMChunk.getUniform(), {\n      progress: {\n        value: 0.0\n      },\n      edgeWeight: {\n        value: 0.1\n      },\n      edgeColor: {\n        value: new Color(1.0, 1.0, 1.0)\n      }\n    }]);\n  }\n  initChunks() {\n    super.initChunks();\n    TilingFBMChunk.registerChunk();\n  }\n  /**\n   * definesを初期化する。\n   */\n  initDefines() {\n    super.initDefines();\n    this.defines = Object.assign({}, TilingFBMChunk.getDefines(), this.defines);\n  }\n  initDefaultSetting(parameters) {\n    super.initDefaultSetting(parameters);\n    if (parameters.transparent == null) {\n      this.transparent = true;\n    } else {\n      this.transparent = parameters.transparent;\n    }\n  }\n}\n;// CONCATENATED MODULE: ./esm/fbmFire/FBMFireMaterial.js\n\n\n\n\n\n\nclass FBMFireMaterial extends (/* unused pure expression or super */ null && (ShaderPhongMaterial)) {\n  get tiles() {\n    return this.uniforms.tiles.value;\n  }\n  set tiles(value) {\n    this.uniforms.tiles.value = value;\n  }\n  get hashLoop() {\n    return this.uniforms.hashLoop.value;\n  }\n  set hashLoop(value) {\n    this.uniforms.hashLoop.value = value;\n  }\n  get amp() {\n    return this.uniforms.amp.value;\n  }\n  set amp(value) {\n    this.uniforms.amp.value = value;\n  }\n  /*\n   * IAnimatable implements\n   */\n  addTime(delta) {\n    AnimationChunk.addTime(this, delta);\n  }\n  /**\n   * アニメーションを行うか否か。\n   */\n  get isAnimate() {\n    return this.uniforms.isAnimate.value;\n  }\n  set isAnimate(value) {\n    this.uniforms.isAnimate.value = value;\n    if (this.isAnimate) {\n      this.startAnimation();\n    } else {\n      this.stopAnimation();\n    }\n  }\n  get strength() {\n    return this.uniforms.strength.value;\n  }\n  set strength(value) {\n    this.uniforms.strength.value = value;\n  }\n  get bloom() {\n    return this.uniforms.bloom.value;\n  }\n  set bloom(value) {\n    this.uniforms.bloom.value = value;\n  }\n  get transformSpeed() {\n    return this.uniforms.transformSpeed.value;\n  }\n  set transformSpeed(value) {\n    this.uniforms.transformSpeed.value = value;\n  }\n  get rimPow() {\n    return this.uniforms.rimPow.value;\n  }\n  set rimPow(value) {\n    this.uniforms.rimPow.value = value;\n  }\n  get rimStrength() {\n    return this.uniforms.rimStrength.value;\n  }\n  set rimStrength(value) {\n    this.uniforms.rimStrength.value = value;\n  }\n  /**\n   *\n   * @param parameters\n   */\n  constructor(parameters) {\n    super(VertexShader(), FragmentShader(), parameters);\n    /**\n     * 波の速度\n     * 0.5にすると1の半分の速度になる。\n     * マイナスを指定すると、波の進行方向が反転する。\n     */\n    this.speed = -0.5;\n    /*\n     * IAnimatable implements\n     */\n    this.animationListener = e => {\n      this.addTime(e.delta / 1000);\n    };\n    this.isAnimate = this.isAnimate; //reset and start animation\n  }\n\n  initUniforms() {\n    this.uniforms = UniformsUtils.merge([ShaderPhongMaterial.getBasicUniforms(), TilingFBMChunk.getUniform(), AnimationChunk.getUniform(), {\n      strength: {\n        value: 0.45\n      },\n      bloom: {\n        value: 0.1\n      },\n      rimStrength: {\n        value: 1.0\n      },\n      rimPow: {\n        value: 1.0\n      }\n    }]);\n  }\n  initChunks() {\n    super.initChunks();\n    TilingFBMChunk.registerChunk();\n    AnimationChunk.registerChunk();\n  }\n  initDefines() {\n    super.initDefines();\n    this.defines = Object.assign({}, TilingFBMChunk.getDefines(), this.defines);\n    this.defines.USE_SURFACE_NORMAL = true;\n  }\n  initDefaultSetting(parameters) {\n    super.initDefaultSetting(parameters);\n    if (parameters.transparent == null) {\n      this.transparent = true;\n    } else {\n      this.transparent = parameters.transparent;\n    }\n  }\n  startAnimation() {\n    RAFTicker.on(RAFTickerEventType.onBeforeTick, this.animationListener);\n  }\n  stopAnimation() {\n    RAFTicker.off(RAFTickerEventType.onBeforeTick, this.animationListener);\n  }\n}\n;// CONCATENATED MODULE: ./esm/rimBasic/RimBasicMaterial.js\n\n\n\nclass RimBasicMaterial extends (/* unused pure expression or super */ null && (ShaderBasicMaterial)) {\n  get rimPow() {\n    return this.uniforms.rimPow.value;\n  }\n  set rimPow(value) {\n    this.uniforms.rimPow.value = value;\n  }\n  get rimStrength() {\n    return this.uniforms.rimStrength.value;\n  }\n  set rimStrength(value) {\n    this.uniforms.rimStrength.value = value;\n  }\n  get rimColor() {\n    return this.uniforms.rimColor.value;\n  }\n  set rimColor(value) {\n    this.uniforms.rimColor.value = value;\n  }\n  get insidePow() {\n    return this.uniforms.insidePow.value;\n  }\n  set insidePow(value) {\n    this.uniforms.insidePow.value = value;\n  }\n  get insideStrength() {\n    return this.uniforms.insideStrength.value;\n  }\n  set insideStrength(value) {\n    this.uniforms.insideStrength.value = value;\n  }\n  get insideColor() {\n    return this.uniforms.insideColor.value;\n  }\n  set insideColor(value) {\n    this.uniforms.insideColor.value = value;\n  }\n  constructor(param) {\n    super(null, FragmentShader(), param);\n    this.uniforms = UniformsUtils.merge([ShaderBasicMaterial.getBasicUniforms(), RimBasicMaterial.getRimUniforms()]);\n    this.initDefines();\n  }\n  static getRimUniforms() {\n    return UniformsUtils.merge([{\n      rimColor: {\n        value: new Color(1.0, 1.0, 1.0)\n      },\n      rimStrength: {\n        value: 1.0\n      },\n      rimPow: {\n        value: 1.0\n      },\n      insideColor: {\n        value: new Color(0.0, 0.0, 0.0)\n      },\n      insideStrength: {\n        value: 1.0\n      },\n      insidePow: {\n        value: 1.0\n      }\n    }]);\n  }\n  initDefines() {\n    super.initDefines();\n    this.defines.USE_SURFACE_NORMAL = true;\n  }\n}\n;// CONCATENATED MODULE: ./esm/rimEffect/RimEffectMaterial.js\n\n\n\nclass RimEffectMaterial_RimEffectMaterial extends (/* unused pure expression or super */ null && (ShaderPhongMaterial)) {\n  get rimPow() {\n    return this.uniforms.rimPow.value;\n  }\n  set rimPow(value) {\n    this.uniforms.rimPow.value = value;\n  }\n  get rimStrength() {\n    return this.uniforms.rimStrength.value;\n  }\n  set rimStrength(value) {\n    this.uniforms.rimStrength.value = value;\n  }\n  get rimColor() {\n    return this.uniforms.rimColor.value;\n  }\n  set rimColor(value) {\n    this.uniforms.rimColor.value = value;\n  }\n  get insidePow() {\n    return this.uniforms.insidePow.value;\n  }\n  set insidePow(value) {\n    this.uniforms.insidePow.value = value;\n  }\n  get insideStrength() {\n    return this.uniforms.insideStrength.value;\n  }\n  set insideStrength(value) {\n    this.uniforms.insideStrength.value = value;\n  }\n  get insideColor() {\n    return this.uniforms.insideColor.value;\n  }\n  set insideColor(value) {\n    this.uniforms.insideColor.value = value;\n  }\n  /**\n   *\n   * @param parameters\n   */\n  constructor(parameters) {\n    super(null, FragmentShader(), parameters);\n  }\n  initUniforms() {\n    this.uniforms = UniformsUtils.merge([ShaderPhongMaterial.getBasicUniforms(), {\n      rimColor: {\n        value: new Color(1.0, 1.0, 1.0)\n      },\n      rimStrength: {\n        value: 1.0\n      },\n      rimPow: {\n        value: 1.0\n      },\n      insideColor: {\n        value: new Color(0.0, 0.0, 0.0)\n      },\n      insideStrength: {\n        value: 1.0\n      },\n      insidePow: {\n        value: 1.0\n      }\n    }]);\n  }\n  initDefines() {\n    super.initDefines();\n    this.defines.USE_LIGHT = true;\n    this.defines.USE_SURFACE_NORMAL = true;\n  }\n}\n;// CONCATENATED MODULE: ./esm/rimEffect/OuterGlowMaterial.js\n\nclass OuterGlowMaterial extends (/* unused pure expression or super */ null && (RimEffectMaterial)) {\n  get expansionStrength() {\n    return this.uniforms.expansionStrength.value;\n  }\n  set expansionStrength(value) {\n    this.uniforms.expansionStrength.value = value;\n  }\n  initDefines() {\n    super.initDefines();\n    this.defines.USE_LIGHT = false;\n    this.defines.USE_EXPANSION = true;\n  }\n}\n;// CONCATENATED MODULE: ./esm/expansion/ExpansionMaterial.js\n\nclass ExpansionMaterial extends (/* unused pure expression or super */ null && (ShaderPhongMaterial)) {\n  get expansionStrength() {\n    return this.uniforms.expansionStrength.value;\n  }\n  set expansionStrength(value) {\n    this.uniforms.expansionStrength.value = value;\n  }\n  constructor(parameters) {\n    super(null, null, parameters);\n  }\n  initDefines() {\n    super.initDefines();\n    this.defines.USE_EXPANSION = true;\n  }\n}\n;// CONCATENATED MODULE: ./esm/spriteCloud/SpriteCloudMaterial.js\n\n\n\nclass SpriteCloudMaterial extends (/* unused pure expression or super */ null && (ShaderSpriteMaterial)) {\n  constructor(parameters) {\n    super(null, FragmentShader(), parameters);\n  }\n  /**\n   * uniformsを初期化する。\n   */\n  initUniforms() {\n    super.initUniforms();\n    this.uniforms = UniformsUtils.merge([this.uniforms, {\n      rimStrength: {\n        value: 0.2\n      },\n      bottomStrength: {\n        value: 0.75\n      },\n      rimColor: {\n        value: new Color(0xffffff)\n      },\n      skyColor: {\n        value: new Color(0xcccccc)\n      },\n      rimCenter: {\n        value: 0.6\n      },\n      rimRange: {\n        value: 0.15\n      }\n    }]);\n  }\n  initDefaultSetting(parameters) {\n    super.initDefaultSetting(parameters);\n  }\n  get rimCenter() {\n    return this.uniforms.rimCenter.value;\n  }\n  set rimCenter(value) {\n    this.uniforms.rimCenter.value = value;\n  }\n  get rimRange() {\n    return this.uniforms.rimRange.value;\n  }\n  set rimRange(value) {\n    this.uniforms.rimRange.value = value;\n  }\n  get rimStrength() {\n    return this.uniforms.rimStrength.value;\n  }\n  set rimStrength(value) {\n    this.uniforms.rimStrength.value = value;\n  }\n  get bottomStrength() {\n    return this.uniforms.bottomStrength.value;\n  }\n  set bottomStrength(value) {\n    this.uniforms.bottomStrength.value = value;\n  }\n  get rimColor() {\n    return this.uniforms.rimColor.value;\n  }\n  set rimColor(value) {\n    this.uniforms.rimColor.value = value;\n  }\n  get skyColor() {\n    return this.uniforms.skyColor.value;\n  }\n  set skyColor(value) {\n    this.uniforms.skyColor.value = value;\n  }\n}\n;// CONCATENATED MODULE: ./esm/expansionDissolve/ExpansionDissolveMaterial.js\n\n\n\n\n\n/**\n * FBMノイズによるジオメトリの膨張でディゾルブを行うマテリアル。\n * 爆発しながら消滅するような表現になる。\n * 膨張の進行度合いはprogressで制御する。\n */\nclass ExpansionDissolveMaterial extends (/* unused pure expression or super */ null && (ShaderPhongMaterial)) {\n  addTime(delta) {\n    if (this.isAnimate) {\n      AnimationChunk.addTime(this, delta);\n    }\n  }\n  get isAnimate() {\n    return this.uniforms.isAnimate.value;\n  }\n  set isAnimate(value) {\n    this.uniforms.isAnimate.value = value;\n    if (this.isAnimate) {\n      this.startAnimation();\n    } else {\n      this.stopAnimation();\n    }\n  }\n  // ITiledFBM //\n  get tiles() {\n    return this.uniforms.tiles.value;\n  }\n  set tiles(value) {\n    this.uniforms.tiles.value = value;\n  }\n  get hashLoop() {\n    return this.uniforms.hashLoop.value;\n  }\n  set hashLoop(value) {\n    this.uniforms.hashLoop.value = value;\n  }\n  get amp() {\n    return this.uniforms.amp.value;\n  }\n  set amp(value) {\n    this.uniforms.amp.value = value;\n  }\n  get scaleMax() {\n    return this.uniforms.scaleMax.value;\n  }\n  set scaleMax(value) {\n    this.uniforms.scaleMax.value = value;\n  }\n  get time() {\n    return this.uniforms.time.value;\n  }\n  set time(value) {\n    this.uniforms.time.value = value;\n  }\n  get progress() {\n    return this.uniforms.progress.value;\n  }\n  set progress(value) {\n    this.uniforms.progress.value = value;\n  }\n  get dissolveColor() {\n    return this.uniforms.dissolveColor.value;\n  }\n  set dissolveColor(value) {\n    this.uniforms.dissolveColor.value = value;\n  }\n  get dissolveOutColor() {\n    return this.uniforms.dissolveOutColor.value;\n  }\n  set dissolveOutColor(value) {\n    this.uniforms.dissolveOutColor.value = value;\n  }\n  /**\n   *\n   * @param parameters\n   */\n  constructor(parameters) {\n    super(VertexShader(), FragmentShader(), parameters);\n    // IAnimatable //\n    this.speed = -0.5;\n    /*\n     * IAnimatable implements\n     */\n    this.animationListener = e => {\n      this.addTime(e.delta / 1000);\n    };\n    this.isAnimate = this.isAnimate;\n  }\n  initUniforms() {\n    this.uniforms = UniformsUtils.merge([ShaderPhongMaterial.getBasicUniforms(), TilingFBMChunk.getUniform(), AnimationChunk.getUniform(), {\n      scaleMax: {\n        value: 20.0\n      },\n      progress: {\n        value: 0.0\n      },\n      dissolveColor: {\n        value: new Color(1.0, 1.0, 1.0)\n      },\n      dissolveOutColor: {\n        value: new Color(0.0, 0.0, 0.0)\n      }\n    }]);\n  }\n  initChunks() {\n    super.initChunks();\n    TilingFBMChunk.registerChunk();\n  }\n  initDefines() {\n    super.initDefines();\n    this.defines = Object.assign(this.defines, TilingFBMChunk.getDefines());\n    this.defines.USE_EXPANSION = true;\n  }\n  startAnimation() {\n    RAFTicker.on(RAFTickerEventType.onBeforeTick, this.animationListener);\n  }\n  stopAnimation() {\n    RAFTicker.off(RAFTickerEventType.onBeforeTick, this.animationListener);\n  }\n}\n;// CONCATENATED MODULE: ./esm/swirl/SwirlMaterial.js\n\n\n\n\nclass SwirlMaterial extends (/* unused pure expression or super */ null && (ShaderPhongMaterial)) {\n  addTime(delta) {\n    if (this.isAnimate) {\n      AnimationChunk.addTime(this, delta);\n    }\n  }\n  get isAnimate() {\n    return this.uniforms.isAnimate.value;\n  }\n  set isAnimate(value) {\n    this.uniforms.isAnimate.value = value;\n    if (this.isAnimate) {\n      this.startAnimation();\n    } else {\n      this.stopAnimation();\n    }\n  }\n  onSetMap(val) {\n    super.onSetMap(val);\n    this.setRepeat(val);\n  }\n  onSetAlphaMap(value) {\n    super.onSetAlphaMap(value);\n    this.setRepeat(value);\n  }\n  /**\n   * リピートモードは強制的にRepeatWrappingに\n   * @param value\n   */\n  setRepeat(value) {\n    if (value) {\n      value.wrapS = RepeatWrapping;\n      value.wrapT = RepeatWrapping;\n    }\n  }\n  get uvRotation() {\n    return this.uniforms.uvRotation.value;\n  }\n  set uvRotation(value) {\n    this.uniforms.uvRotation.value = value;\n  }\n  get swirlRotation() {\n    return this.uniforms.swirlRotation.value;\n  }\n  set swirlRotation(value) {\n    this.uniforms.swirlRotation.value = value;\n  }\n  get radius() {\n    return this.uniforms.radius.value;\n  }\n  set radius(value) {\n    this.uniforms.radius.value = value;\n  }\n  get center() {\n    return this.uniforms.center.value;\n  }\n  set center(value) {\n    this.uniforms.center.value = value;\n  }\n  constructor(parameters) {\n    super(null, FragmentShader(), parameters);\n    /*\n     * implements IAnimatable\n     */\n    this.speed = -0.02;\n    /*\n     * IAnimatable implements\n     */\n    this.animationListener = e => {\n      this.addTime(e.delta / 1000);\n    };\n    this.isAnimate = this.isAnimate;\n  }\n  initChunks() {\n    super.initChunks();\n    AnimationChunk.registerChunk();\n  }\n  initUniforms() {\n    this.uniforms = UniformsUtils.merge([ShaderPhongMaterial.getBasicUniforms(), AnimationChunk.getUniform(), {\n      uvRotation: {\n        value: 0.0\n      },\n      swirlRotation: {\n        value: 3.14\n      },\n      radius: {\n        value: 0.5\n      },\n      center: {\n        value: new Vector2(0.5, 0.5)\n      }\n    }]);\n  }\n  startAnimation() {\n    RAFTicker.on(RAFTickerEventType.onBeforeTick, this.animationListener);\n  }\n  stopAnimation() {\n    RAFTicker.off(RAFTickerEventType.onBeforeTick, this.animationListener);\n  }\n}\n;// CONCATENATED MODULE: ./esm/cellularNoise/CellularNoiseMaterial.js\n\n\n\n\nclass CellularNoiseMaterial extends (/* unused pure expression or super */ null && (ShaderPhongMaterial)) {\n  addTime(delta) {\n    if (this.isAnimate) {\n      AnimationChunk.addTime(this, delta);\n    }\n  }\n  get isAnimate() {\n    return this.uniforms.isAnimate.value;\n  }\n  set isAnimate(value) {\n    this.uniforms.isAnimate.value = value;\n    if (this.isAnimate) {\n      this.startAnimation();\n    } else {\n      this.stopAnimation();\n    }\n  }\n  get grid() {\n    return this.uniforms.grid.value;\n  }\n  set grid(value) {\n    this.uniforms.grid.value = value;\n  }\n  get divisionScaleX() {\n    return this.uniforms.divisionScaleX.value;\n  }\n  set divisionScaleX(value) {\n    this.uniforms.divisionScaleX.value = value;\n  }\n  constructor(parameters) {\n    super(null, FragmentShader(), parameters);\n    /*\n     * implements IAnimatable\n     */\n    this.speed = -0.02;\n    /*\n     * IAnimatable implements\n     */\n    this.animationListener = e => {\n      this.addTime(e.delta / 1000);\n    };\n    this.isAnimate = this.isAnimate;\n  }\n  initChunks() {\n    super.initChunks();\n    AnimationChunk.registerChunk();\n  }\n  initUniforms() {\n    this.uniforms = UniformsUtils.merge([ShaderPhongMaterial.getBasicUniforms(), AnimationChunk.getUniform(), {\n      grid: {\n        value: 3.0\n      },\n      divisionScaleX: {\n        value: 1.0\n      }\n    }]);\n  }\n  startAnimation() {\n    RAFTicker.on(RAFTickerEventType.onBeforeTick, this.animationListener);\n  }\n  stopAnimation() {\n    RAFTicker.off(RAFTickerEventType.onBeforeTick, this.animationListener);\n  }\n}\n;// CONCATENATED MODULE: ./esm/solidClipping/SolidClippingMaterial.js\n/**\n * ライトに影響を受けない、ソリッドな切断面をもつマテリアル\n */\n\n\n\nclass SolidClippingMaterial extends (/* unused pure expression or super */ null && (ShaderPhongMaterial)) {\n  get cutSectionColor() {\n    return this.uniforms.cutSectionColor.value;\n  }\n  set cutSectionColor(value) {\n    this.uniforms.cutSectionColor.value = value;\n  }\n  constructor(parameters) {\n    super(null, FragmentShader(), parameters);\n  }\n  initUniforms() {\n    this.uniforms = UniformsUtils.merge([ShaderPhongMaterial.getBasicUniforms(), {\n      cutSectionColor: {\n        value: new Color(1.0, 1.0, 1.0)\n      }\n    }]);\n  }\n  initDefaultSetting(parameters) {\n    super.initDefaultSetting(parameters);\n    this.clipping = true;\n    this.side = DoubleSide;\n  }\n}\n;// CONCATENATED MODULE: ./esm/hexDissolve/HexDissolveMaterial.js\n\n\n\n\n/**\n * 六角形グリッドマテリアル\n */\nclass HexDissolveMaterial extends (/* unused pure expression or super */ null && (GridMaterial)) {\n  /**\n   * ディゾルブの進行度を指定する。\n   * 1.0でディゾルブ完了となる。\n   */\n  get progress() {\n    return this.uniforms.progress.value;\n  }\n  set progress(value) {\n    this.uniforms.progress.value = value;\n  }\n  /**\n   * ディゾルブの開始ずれを指定する。\n   * 最後にディゾルブが始まるグリッドが、progressのどの値で開始されるかを意味する。\n   * ex)\n   * delay = 0.8の時、最後のグリッドはprogress = 0.8 ~ 1.0でディゾルブする。\n   */\n  get delay() {\n    return this.uniforms.delay.value;\n  }\n  set delay(value) {\n    this.uniforms.delay.value = value;\n  }\n  get isAscending() {\n    return this.uniforms.isAscending.value;\n  }\n  set isAscending(value) {\n    this.uniforms.isAscending.value = value;\n  }\n  /**\n   * グリッド線の太さ\n   * 0.0で線なし、0.5でグリッド面なしになる。\n   */\n  get gridWeight() {\n    return this.uniforms.gridWeight.value;\n  }\n  set gridWeight(value) {\n    this.uniforms.gridWeight.value = value;\n  }\n  get gridEmissive() {\n    return this.uniforms.gridEmissive.value;\n  }\n  set gridEmissive(value) {\n    this.uniforms.gridEmissive.value = value;\n  }\n  /**\n   * ディゾルブ中に表示されるグローラインの太さ\n   * 数値はグリッド線の太さの倍率、2.0ならグローアウトラインはディゾルブラインの倍の太さになる。\n   *\n   * 注意 : isReversed = true かつgridEmissiveWeightが2.0以下の場合、グロー線が消えなくなる。\n   * 反転させる場合は、2.0以上を指定すること。\n   */\n  get gridEmissiveWeight() {\n    return this.uniforms.gridEmissiveWeight.value;\n  }\n  set gridEmissiveWeight(value) {\n    this.uniforms.gridEmissiveWeight.value = value;\n  }\n  constructor(parameters) {\n    super(null, FragmentShader(), parameters);\n  }\n  initUniforms() {\n    this.uniforms = UniformsUtils.merge([GridMaterial.getBasicUniforms(), {\n      progress: {\n        value: 0.0\n      },\n      delay: {\n        value: 0.8\n      },\n      gridWeight: {\n        value: 0.0\n      },\n      isAscending: {\n        value: true\n      },\n      gridEmissive: {\n        value: new Color(0x000000)\n      },\n      gridEmissiveWeight: {\n        value: 2.5\n      }\n    }]);\n  }\n  initChunks() {\n    super.initChunks();\n    HexGridChunk.registerChunk();\n  }\n}\n;// CONCATENATED MODULE: ./esm/index.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n;// CONCATENATED MODULE: ./demoSrc/CommonGUI.js\n\n\nclass CommonGUI {\n  static initColorGUI(folder, mat, propName = "color") {\n    const prop = {};\n    const targetColor = mat[propName];\n    prop[propName] = targetColor.getHex();\n    folder.addColor(prop, propName).onChange(val => {\n      targetColor.setHex(val);\n    });\n    return prop;\n  }\n  static initBasicMaterialGUI(gui, mat, folderName = "Material") {\n    const folder = gui.addFolder(folderName);\n    this.initMaterialFolder(folder, mat);\n    folder.open();\n    return folder;\n  }\n  static initMaterialGUI(gui, mat, folderName = "Material") {\n    const folder = this.initBasicMaterialGUI(gui, mat, folderName);\n    this.initColorGUI(folder, mat, "emissive");\n  }\n  static initMaterialFolder(folder, mat) {\n    this.initColorGUI(folder, mat);\n    folder.add(mat, "transparent");\n    folder.add(mat, "uniformOpacity", 0.0, 1.0);\n  }\n  static initSpriteMaterialGUI(gui, mat, folderName = "Material") {\n    const folder = gui.addFolder(folderName);\n    this.initMaterialFolder(folder, mat);\n    folder.open();\n  }\n  static initGridMaterialGUI(gui, mat) {\n    this.initMaterialGUI(gui, mat);\n    const prop = {\n      mask: "",\n      alphaMap: ""\n    };\n    const folder = gui.addFolder("WavyGridMaterial");\n    folder.add(mat, "isReversed");\n    folder.add(mat, "division", 2.0, 256.0).step(1);\n    folder.add(mat, "divisionScaleX", 0.0, 4.0).step(1);\n    folder.add(prop, "mask", {\n      none: "",\n      earth: "./textures/landmask.png"\n    }).onChange(val => {\n      if (val === "") {\n        mat.maskTexture = null;\n      } else {\n        mat.maskTexture = new three_module/* TextureLoader */.dpR().load(val);\n      }\n    });\n    folder.add(prop, "alphaMap", {\n      none: "",\n      earth: "./textures/landmask.png"\n    }).onChange(val => {\n      if (val === "") {\n        mat.alphaMap = null;\n      } else {\n        mat.alphaMap = new three_module/* TextureLoader */.dpR().load(val);\n      }\n    });\n    folder.open();\n    return folder;\n  }\n  static initWavyMaterialGUI(gui, mat) {\n    const folder = this.initGridMaterialGUI(gui, mat);\n    const animationFolder = folder.addFolder("WavyAnimation");\n    animationFolder.add(mat, "isAnimate");\n    animationFolder.add(mat, "speed", -2, 2);\n    animationFolder.add(mat, "waveFrequency", 0.0, 1.0);\n    animationFolder.add(mat, "wavePow", 0.0, 4.0);\n    animationFolder.add(mat, "direction", {\n      horizontal: Directions.horizontal,\n      vertical: Directions.vertical,\n      radial: Directions.radial\n    });\n    animationFolder.add(mat, "raisedBottom", 0.0, 1.0);\n    animationFolder.open();\n  }\n  static initAnimationGUI(gui, mat, folderName = "Animation") {\n    const folder = gui.addFolder(folderName);\n    folder.add(mat, "isAnimate");\n    folder.add(mat, "speed", -2, 2);\n    folder.open();\n  }\n  static initRimGUI(gui, mat, folderName = "Rim Effect Material") {\n    const folder = gui.addFolder(folderName);\n    CommonGUI.initColorGUI(folder, mat, "rimColor");\n    folder.add(mat, "rimStrength", 0.0, 4.0).step(0.01);\n    folder.add(mat, "rimPow", 0.0, 4.0).step(0.01);\n    CommonGUI.initColorGUI(folder, mat, "insideColor");\n    folder.add(mat, "insideStrength", 0.0, 4.0).step(0.01);\n    folder.add(mat, "insidePow", 0.0, 8.0).step(0.01);\n    folder.open();\n  }\n  static initExpansionGUI(gui, mat, folderName = "ExpansionMaterial") {\n    const folder = gui.addFolder("ExpansionMaterial");\n    const ampRange = 12.0;\n    folder.add(mat, "expansionStrength", -ampRange, ampRange).step(0.01);\n    folder.open();\n  }\n  static initFBMTilingGUI(gui, mat, folderName = "FBM Tiling") {\n    const folder = gui.addFolder("FBM Tiling");\n    folder.add(mat, "tiles", 1.0, 8.0).step(1.0);\n    folder.add(mat, "hashLoop", 2.0, 16.0).step(1.0);\n    folder.add(mat, "amp", 0.0, 2.0).step(0.01);\n    folder.open();\n  }\n  static initSkyGUI(gui, sky, sunSphere, renderer) {\n    const effectController = {\n      turbidity: 10,\n      rayleigh: 0.15,\n      mieCoefficient: 0.005,\n      mieDirectionalG: 0.8,\n      inclination: 0.07,\n      // elevation / inclination\n      azimuth: 0.25,\n      // Facing front,\n      exposure: 0.75\n    };\n    const distance = 400000;\n    function guiChanged() {\n      const uniforms = sky.material.uniforms;\n      uniforms["turbidity"].value = effectController.turbidity;\n      uniforms["rayleigh"].value = effectController.rayleigh;\n      uniforms["mieCoefficient"].value = effectController.mieCoefficient;\n      uniforms["mieDirectionalG"].value = effectController.mieDirectionalG;\n      const theta = Math.PI * (effectController.inclination - 0.5);\n      const phi = 2 * Math.PI * (effectController.azimuth - 0.5);\n      sunSphere.position.x = distance * Math.cos(phi);\n      sunSphere.position.y = distance * Math.sin(phi) * Math.sin(theta);\n      sunSphere.position.z = distance * Math.sin(phi) * Math.cos(theta);\n      uniforms["sunPosition"].value.copy(sunSphere.position);\n      renderer.toneMappingExposure = effectController.exposure;\n    }\n    guiChanged();\n    const folder = gui.addFolder("Sky");\n    folder.add(effectController, "turbidity", 1.0, 20.0, 0.1).onChange(guiChanged);\n    folder.add(effectController, "rayleigh", 0.0, 4, 0.001).onChange(guiChanged);\n    folder.add(effectController, "mieCoefficient", 0.0, 0.1, 0.001).onChange(guiChanged);\n    folder.add(effectController, "mieDirectionalG", 0.0, 1, 0.001).onChange(guiChanged);\n    folder.add(effectController, "inclination", 0, 1, 0.0001).onChange(guiChanged);\n    folder.add(effectController, "azimuth", 0, 1, 0.0001).onChange(guiChanged);\n    folder.add(effectController, "exposure", 0, 1, 0.0001).onChange(guiChanged);\n    folder.open();\n  }\n}\n// EXTERNAL MODULE: ./node_modules/three/examples/jsm/controls/OrbitControls.js\nvar OrbitControls = __webpack_require__(12);\n// EXTERNAL MODULE: ./node_modules/three/examples/jsm/objects/Sky.js\nvar Sky = __webpack_require__(659);\n;// CONCATENATED MODULE: ./demoSrc/Common.js\n\n\n\n\nclass Common {\n  static initScene() {\n    const scene = new three_module/* Scene */.xsS();\n    return scene;\n  }\n  static initLight(scene) {\n    const ambientLight = new three_module/* AmbientLight */.Mig(0xffffff, 1.0);\n    scene.add(ambientLight);\n    return ambientLight;\n  }\n  static initCamera(scene, W, H, far = 400) {\n    const camera = new three_module/* PerspectiveCamera */.cPb(45, W / H, 1, far);\n    camera.position.set(0, 0, 100);\n    camera.updateMatrixWorld(false);\n    scene.add(camera);\n    return camera;\n  }\n  static initControl(camera, render) {\n    let domElement;\n    if (render != null) {\n      domElement = render.domElement;\n    }\n    const control = new OrbitControls/* OrbitControls */.z(camera, domElement);\n    control.update();\n    return control;\n  }\n  static initRenderer(W, H, color = 0x000000, antialias = true) {\n    const renderer = new three_module/* WebGLRenderer */.CP7({\n      antialias: antialias\n    });\n    renderer.setClearColor(new three_module/* Color */.Ilk(color));\n    renderer.setSize(W, H);\n    renderer.setPixelRatio(window.devicePixelRatio);\n    document.body.appendChild(renderer.domElement);\n    return renderer;\n  }\n  static initHelper(scene) {\n    const axesHelper = new three_module/* AxesHelper */.y8_(30);\n    scene.add(axesHelper);\n  }\n  static initSky(scene, gui, renderer) {\n    renderer.toneMapping = three_module/* ACESFilmicToneMapping */.LY2;\n    const sunSphere = new three_module/* Mesh */.Kj0(new three_module/* SphereBufferGeometry */.Aip(20000, 16, 8), new three_module/* MeshBasicMaterial */.vBJ({\n      color: 0xffffff\n    }));\n    sunSphere.position.y = -700000;\n    sunSphere.visible = false;\n    scene.add(sunSphere);\n    const sky = new Sky/* Sky */.q();\n    sky.scale.setScalar(45000);\n    scene.add(sky);\n    CommonGUI.initSkyGUI(gui, sky, sunSphere, renderer);\n  }\n}\n// EXTERNAL MODULE: ./node_modules/lil-gui/dist/lil-gui.esm.js\nvar lil_gui_esm = __webpack_require__(899);\n;// CONCATENATED MODULE: ./demoSrc/demoSquareGrid.js\n\n\n\n\n\n\nclass StudySquareGrid {\n  constructor() {\n    const W = 640;\n    const H = 480;\n    const scene = Common.initScene();\n    scene.fog = new three_module/* Fog */.ybr(0x000000, 80, 160);\n    Common.initLight(scene);\n    const camera = Common.initCamera(scene, W, H);\n    const renderer = Common.initRenderer(W, H);\n    const control = Common.initControl(camera, renderer);\n    Common.initHelper(scene);\n    const mat = this.initObject(scene);\n    esm/* RAFTicker.addEventListener */.Fz.addEventListener(esm/* RAFTickerEventType.tick */.M9.tick, e => {\n      renderer.render(scene, camera);\n    });\n    this.initGUI(mat);\n  }\n  initObject(scene) {\n    const spot = new three_module/* PointLight */.cek(0xffffff, 1, 0, 2);\n    spot.position.set(10, 20, 30);\n    scene.add(spot);\n    const helper = new three_module/* PointLightHelper */.xG9(spot);\n    scene.add(helper);\n    const geo = new three_module/* SphereGeometry */.xo$(10, 64, 64);\n    const mat = new SquareGridMaterial({\n      // side:DoubleSide,\n      fog: scene.fog !== undefined\n    });\n    mat.color = new three_module/* Color */.Ilk(0xff6666);\n    mat.direction = Directions.vertical;\n    const mesh = new three_module/* Mesh */.Kj0(geo, mat);\n    scene.add(mesh);\n    return mat;\n  }\n  initGUI(mat) {\n    const gui = new lil_gui_esm/* default */.ZP();\n    CommonGUI.initWavyMaterialGUI(gui, mat);\n    this.initGUIMaterial(gui, mat);\n  }\n  initGUIMaterial(gui, mat) {\n    const folder = gui.addFolder("SquareGrid");\n    folder.add(mat, "gridWeight", 0.0, 0.5);\n    folder.open();\n  }\n}\nwindow.onload = () => {\n  const study = new StudySquareGrid();\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Ly4vZXNtL1NoYWRlclBob25nTWF0ZXJpYWwuZnJhZy5nbHNsLmpzPzk4NGEiLCJ3ZWJwYWNrOi8vdGhyZWVqcy1zaGFkZXItbWF0ZXJpYWxzLy4vZXNtL1NoYWRlclBob25nTWF0ZXJpYWwudmVydC5nbHNsLmpzP2Y3NTUiLCJ3ZWJwYWNrOi8vdGhyZWVqcy1zaGFkZXItbWF0ZXJpYWxzLy4vZXNtL2NodW5rL0dMU0xDaHVuay5qcz82MmE3Iiwid2VicGFjazovL3RocmVlanMtc2hhZGVyLW1hdGVyaWFscy8uL2VzbS9jaHVuay9BbmltYXRpb25DaHVuay5qcz80Y2VlIiwid2VicGFjazovL3RocmVlanMtc2hhZGVyLW1hdGVyaWFscy8uL2VzbS9jaHVuay9FeHBhbnNpb25DaHVuay5qcz9lMmM5Iiwid2VicGFjazovL3RocmVlanMtc2hhZGVyLW1hdGVyaWFscy8uL2VzbS9jaHVuay9NYXBDaHVuay5qcz9iNGM3Iiwid2VicGFjazovL3RocmVlanMtc2hhZGVyLW1hdGVyaWFscy8uL2VzbS9jaHVuay9SZXBlYXRQYXR0ZXJuQ2h1bmsuanM/N2MxNSIsIndlYnBhY2s6Ly90aHJlZWpzLXNoYWRlci1tYXRlcmlhbHMvLi9lc20vY2h1bmsvTWFza01hcENodW5rLmpzPzhlOTMiLCJ3ZWJwYWNrOi8vdGhyZWVqcy1zaGFkZXItbWF0ZXJpYWxzLy4vZXNtL2NodW5rL01lc2hQaG9uZ0NodW5rLmpzPzkwMmMiLCJ3ZWJwYWNrOi8vdGhyZWVqcy1zaGFkZXItbWF0ZXJpYWxzLy4vZXNtL2NodW5rL1JldmVyc2libGVDaHVuay5qcz9kZGExIiwid2VicGFjazovL3RocmVlanMtc2hhZGVyLW1hdGVyaWFscy8uL2VzbS9jaHVuay9TdXJmYWNlTm9ybWFsQ2h1bmsuanM/MDVjNiIsIndlYnBhY2s6Ly90aHJlZWpzLXNoYWRlci1tYXRlcmlhbHMvLi9lc20vY2h1bmsvV2F2eUFuaW1hdGlvbkNodW5rLmpzPzE0NGUiLCJ3ZWJwYWNrOi8vdGhyZWVqcy1zaGFkZXItbWF0ZXJpYWxzLy4vZXNtL2NodW5rL2luZGV4LmpzPzQ4NzAiLCJ3ZWJwYWNrOi8vdGhyZWVqcy1zaGFkZXItbWF0ZXJpYWxzLy4vZXNtL1NoYWRlclBob25nTWF0ZXJpYWwuanM/ODc5MyIsIndlYnBhY2s6Ly90aHJlZWpzLXNoYWRlci1tYXRlcmlhbHMvLi9lc20vU2hhZGVyU3ByaXRlTWF0ZXJpYWwuanM/ZDZiMiIsIndlYnBhY2s6Ly90aHJlZWpzLXNoYWRlci1tYXRlcmlhbHMvLi9lc20vU2hhZGVyQmFzaWNNYXRlcmlhbC5qcz9mZjc0Iiwid2VicGFjazovL3RocmVlanMtc2hhZGVyLW1hdGVyaWFscy8uL2VzbS9jb250b3VyL0NvbnRvdXJNYXRlcmlhbC5qcz9iZmFlIiwid2VicGFjazovL3RocmVlanMtc2hhZGVyLW1hdGVyaWFscy8uL2VzbS9HcmlkTWF0ZXJpYWwuanM/MmYwNSIsIndlYnBhY2s6Ly90aHJlZWpzLXNoYWRlci1tYXRlcmlhbHMvLi9lc20vV2F2eUdyaWRNYXRlcmlhbC5qcz8xZjQ5Iiwid2VicGFjazovL3RocmVlanMtc2hhZGVyLW1hdGVyaWFscy8uL2VzbS9jcm9zc0dyaWQvQ3Jvc3NHcmlkTWF0ZXJpYWwuanM/ZWFhZiIsIndlYnBhY2s6Ly90aHJlZWpzLXNoYWRlci1tYXRlcmlhbHMvLi9lc20vaGFsZnRvbmVHcmlkL0hhbGZ0b25lR3JpZE1hdGVyaWFsLmpzPzE1ZjAiLCJ3ZWJwYWNrOi8vdGhyZWVqcy1zaGFkZXItbWF0ZXJpYWxzLy4vZXNtL2hleEdyaWQvSGV4R3JpZE1hdGVyaWFsLmpzP2IwMzciLCJ3ZWJwYWNrOi8vdGhyZWVqcy1zaGFkZXItbWF0ZXJpYWxzLy4vZXNtL3NxdWFyZUdyaWQvU3F1YXJlR3JpZE1hdGVyaWFsLmZyYWcuZ2xzbC5qcz80MjI3Iiwid2VicGFjazovL3RocmVlanMtc2hhZGVyLW1hdGVyaWFscy8uL2VzbS9zcXVhcmVHcmlkL1NxdWFyZUdyaWRNYXRlcmlhbC5qcz85MDljIiwid2VicGFjazovL3RocmVlanMtc2hhZGVyLW1hdGVyaWFscy8uL2VzbS9za3lDbG91ZC9Ta3lDbG91ZE1hdGVyaWFsLmpzPzU4N2YiLCJ3ZWJwYWNrOi8vdGhyZWVqcy1zaGFkZXItbWF0ZXJpYWxzLy4vZXNtL2ZibURpc3NvbHZlL0ZCTURpc3NvbHZlTWF0ZXJpYWwuanM/ZjA3ZiIsIndlYnBhY2s6Ly90aHJlZWpzLXNoYWRlci1tYXRlcmlhbHMvLi9lc20vZmJtRmlyZS9GQk1GaXJlTWF0ZXJpYWwuanM/NTQ2NCIsIndlYnBhY2s6Ly90aHJlZWpzLXNoYWRlci1tYXRlcmlhbHMvLi9lc20vcmltQmFzaWMvUmltQmFzaWNNYXRlcmlhbC5qcz8zMWVlIiwid2VicGFjazovL3RocmVlanMtc2hhZGVyLW1hdGVyaWFscy8uL2VzbS9yaW1FZmZlY3QvUmltRWZmZWN0TWF0ZXJpYWwuanM/YzNiYSIsIndlYnBhY2s6Ly90aHJlZWpzLXNoYWRlci1tYXRlcmlhbHMvLi9lc20vcmltRWZmZWN0L091dGVyR2xvd01hdGVyaWFsLmpzP2JjZDQiLCJ3ZWJwYWNrOi8vdGhyZWVqcy1zaGFkZXItbWF0ZXJpYWxzLy4vZXNtL2V4cGFuc2lvbi9FeHBhbnNpb25NYXRlcmlhbC5qcz83MWY2Iiwid2VicGFjazovL3RocmVlanMtc2hhZGVyLW1hdGVyaWFscy8uL2VzbS9zcHJpdGVDbG91ZC9TcHJpdGVDbG91ZE1hdGVyaWFsLmpzPzlmYTEiLCJ3ZWJwYWNrOi8vdGhyZWVqcy1zaGFkZXItbWF0ZXJpYWxzLy4vZXNtL2V4cGFuc2lvbkRpc3NvbHZlL0V4cGFuc2lvbkRpc3NvbHZlTWF0ZXJpYWwuanM/MzQwNyIsIndlYnBhY2s6Ly90aHJlZWpzLXNoYWRlci1tYXRlcmlhbHMvLi9lc20vc3dpcmwvU3dpcmxNYXRlcmlhbC5qcz84Mjc4Iiwid2VicGFjazovL3RocmVlanMtc2hhZGVyLW1hdGVyaWFscy8uL2VzbS9jZWxsdWxhck5vaXNlL0NlbGx1bGFyTm9pc2VNYXRlcmlhbC5qcz9kMDE2Iiwid2VicGFjazovL3RocmVlanMtc2hhZGVyLW1hdGVyaWFscy8uL2VzbS9zb2xpZENsaXBwaW5nL1NvbGlkQ2xpcHBpbmdNYXRlcmlhbC5qcz83YWY5Iiwid2VicGFjazovL3RocmVlanMtc2hhZGVyLW1hdGVyaWFscy8uL2VzbS9oZXhEaXNzb2x2ZS9IZXhEaXNzb2x2ZU1hdGVyaWFsLmpzPzhmYjciLCJ3ZWJwYWNrOi8vdGhyZWVqcy1zaGFkZXItbWF0ZXJpYWxzLy4vZXNtL2luZGV4LmpzP2IyMzkiLCJ3ZWJwYWNrOi8vdGhyZWVqcy1zaGFkZXItbWF0ZXJpYWxzLy4vZGVtb1NyYy9Db21tb25HVUkuanM/NzFkMCIsIndlYnBhY2s6Ly90aHJlZWpzLXNoYWRlci1tYXRlcmlhbHMvLi9kZW1vU3JjL0NvbW1vbi5qcz8yYzA3Iiwid2VicGFjazovL3RocmVlanMtc2hhZGVyLW1hdGVyaWFscy8uL2RlbW9TcmMvZGVtb1NxdWFyZUdyaWQuanM/ODRjYiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqXG4gKi9cbmV4cG9ydCBkZWZhdWx0ICgpID0+IHtcbiAgICAvLyBsYW5ndWFnZT1HTFNMXG4gICAgcmV0dXJuIGBcbiNkZWZpbmUgUEhPTkdcblxuI2luY2x1ZGUgPG1lc2hfcGhvbmdfdW5pZm9ybT5cbiNpbmNsdWRlIDxtZXNoX3Bvc2l0aW9uX3Zhcnlpbmc+XG52YXJ5aW5nIHZlYzIgdXZQb3NpdGlvbjtcblxuI2luY2x1ZGUgPGNvbW1vbj5cbiNpbmNsdWRlIDxwYWNraW5nPlxuI2luY2x1ZGUgPGRpdGhlcmluZ19wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGNvbG9yX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8dXZfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDx1djJfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxtYXBfcGFyc19mcmFnbWVudD5cbi8vICNpbmNsdWRlIDxhbHBoYW1hcF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGFscGhhdGVzdF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGFvbWFwX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8bGlnaHRtYXBfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxlbWlzc2l2ZW1hcF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGVudm1hcF9jb21tb25fcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxlbnZtYXBfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxjdWJlX3V2X3JlZmxlY3Rpb25fZnJhZ21lbnQ+XG4jaW5jbHVkZSA8Zm9nX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8YnNkZnM+XG4jaW5jbHVkZSA8bGlnaHRzX3BhcnNfYmVnaW4+XG4jaW5jbHVkZSA8bm9ybWFsX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8bGlnaHRzX3Bob25nX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8c2hhZG93bWFwX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8YnVtcG1hcF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPG5vcm1hbG1hcF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPHNwZWN1bGFybWFwX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8bG9nZGVwdGhidWZfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfcGFyc19mcmFnbWVudD5cbnZvaWQgbWFpbigpIHtcbiAgICAjaW5jbHVkZSA8Y2xpcHBpbmdfcGxhbmVzX2ZyYWdtZW50PlxuICAgIFxuICAgICNpbmNsdWRlIDxtZXNoX3Bob25nX2RpZmZ1c2VfY29sb3I+XG4gICAgXG4gICAgI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX2ZyYWdtZW50PlxuICAgICNpbmNsdWRlIDxfX1NoYWRlck1hdGVyaWFsX19tYXBfZnJhZ21lbnRfYmVnaW5fY2h1bms+XG4gICAgI2luY2x1ZGUgPG1hcF9mcmFnbWVudD5cbiAgICAjaW5jbHVkZSA8Y29sb3JfZnJhZ21lbnQ+XG4gICAgLy8gI2luY2x1ZGUgPGFscGhhbWFwX2ZyYWdtZW50PlxuICAgICNpbmNsdWRlIDxtZXNoX3Bob25nX3N3aXRjaGluZ19hbHBoYV9tYXA+XG4gICAgI2luY2x1ZGUgPGFscGhhdGVzdF9mcmFnbWVudD5cbiAgICAjaW5jbHVkZSA8c3BlY3VsYXJtYXBfZnJhZ21lbnQ+XG4gICAgI2luY2x1ZGUgPG5vcm1hbF9mcmFnbWVudF9iZWdpbj5cbiAgICAjaW5jbHVkZSA8bm9ybWFsX2ZyYWdtZW50X21hcHM+XG4gICAgI2luY2x1ZGUgPGVtaXNzaXZlbWFwX2ZyYWdtZW50PlxuICAgIC8vIGFjY3VtdWxhdGlvblxuICAgICNpbmNsdWRlIDxsaWdodHNfcGhvbmdfZnJhZ21lbnQ+XG4gICAgI2luY2x1ZGUgPGxpZ2h0c19mcmFnbWVudF9iZWdpbj5cbiAgICAjaW5jbHVkZSA8bGlnaHRzX2ZyYWdtZW50X21hcHM+XG4gICAgI2luY2x1ZGUgPGxpZ2h0c19mcmFnbWVudF9lbmQ+XG4gICAgLy8gbW9kdWxhdGlvblxuICAgICNpbmNsdWRlIDxhb21hcF9mcmFnbWVudD5cbiAgICB2ZWMzIG91dGdvaW5nTGlnaHQgPSByZWZsZWN0ZWRMaWdodC5kaXJlY3REaWZmdXNlICsgcmVmbGVjdGVkTGlnaHQuaW5kaXJlY3REaWZmdXNlICsgcmVmbGVjdGVkTGlnaHQuZGlyZWN0U3BlY3VsYXIgKyByZWZsZWN0ZWRMaWdodC5pbmRpcmVjdFNwZWN1bGFyICsgdG90YWxFbWlzc2l2ZVJhZGlhbmNlO1xuICAgICNpbmNsdWRlIDxlbnZtYXBfZnJhZ21lbnQ+XG4gICAgI2luY2x1ZGUgPG91dHB1dF9mcmFnbWVudD5cbiAgICAjaW5jbHVkZSA8dG9uZW1hcHBpbmdfZnJhZ21lbnQ+XG4gICAgI2luY2x1ZGUgPGVuY29kaW5nc19mcmFnbWVudD5cbiAgICAjaW5jbHVkZSA8Zm9nX2ZyYWdtZW50PlxuICAgICNpbmNsdWRlIDxwcmVtdWx0aXBsaWVkX2FscGhhX2ZyYWdtZW50PlxuICAgICNpbmNsdWRlIDxkaXRoZXJpbmdfZnJhZ21lbnQ+XG59YDtcbn07XG4iLCIvKipcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9tcmRvb2IvdGhyZWUuanMvYmxvYi9kZXYvc3JjL3JlbmRlcmVycy9zaGFkZXJzL1NoYWRlckxpYi9tZXNocGhvbmdfdmVydC5nbHNsLmpzXG4gKi9cbmV4cG9ydCBkZWZhdWx0ICgpID0+IHtcbiAgICAvLyBsYW5ndWFnZT1HTFNMXG4gICAgcmV0dXJuIGBcbiNkZWZpbmUgUEhPTkdcblxudmFyeWluZyB2ZWMzIHZWaWV3UG9zaXRpb247XG52YXJ5aW5nIHZlYzIgdXZQb3NpdGlvbjtcbiNpbmNsdWRlIDxtZXNoX3Bvc2l0aW9uX3Zhcnlpbmc+XG4jaW5jbHVkZSA8c3VyZmFjZV9ub3JtYWxfdmFyeWluZ19jaHVuaz5cbiNpbmNsdWRlIDxfX2V4cGFuc2lvbl91bmlmb3JtX2NodW5rPlxuXG4jaW5jbHVkZSA8Y29tbW9uPlxuI2luY2x1ZGUgPHV2X3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPHV2Ml9wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDxkaXNwbGFjZW1lbnRtYXBfcGFyc192ZXJ0ZXg+XG4jaW5jbHVkZSA8ZW52bWFwX3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPGNvbG9yX3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPGZvZ19wYXJzX3ZlcnRleD5cbiNpbmNsdWRlIDxub3JtYWxfcGFyc192ZXJ0ZXg+XG4jaW5jbHVkZSA8bW9ycGh0YXJnZXRfcGFyc192ZXJ0ZXg+XG4jaW5jbHVkZSA8c2tpbm5pbmdfcGFyc192ZXJ0ZXg+XG4jaW5jbHVkZSA8c2hhZG93bWFwX3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX3BhcnNfdmVydGV4PlxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX3ZlcnRleD5cblxudm9pZCBtYWluKCkge1xuICAgICNpbmNsdWRlIDxtZXNoX3Bvc2l0aW9uX3ZlcnRleD5cbiAgICB1dlBvc2l0aW9uID0gdXY7XG5cbiAgICAjaW5jbHVkZSA8dXZfdmVydGV4PlxuICAgICNpbmNsdWRlIDx1djJfdmVydGV4PlxuICAgICNpbmNsdWRlIDxjb2xvcl92ZXJ0ZXg+XG4gICAgXG4gICAgI2luY2x1ZGUgPGJlZ2lubm9ybWFsX3ZlcnRleD5cbiAgICAjaW5jbHVkZSA8bW9ycGhub3JtYWxfdmVydGV4PlxuICAgICNpbmNsdWRlIDxza2luYmFzZV92ZXJ0ZXg+XG4gICAgI2luY2x1ZGUgPHNraW5ub3JtYWxfdmVydGV4PlxuICAgICNpbmNsdWRlIDxkZWZhdWx0bm9ybWFsX3ZlcnRleD5cbiAgICAjaW5jbHVkZSA8c3VyZmFjZV9ub3JtYWxfdmVydGV4X2NodW5rPlxuICAgICNpbmNsdWRlIDxub3JtYWxfdmVydGV4PlxuICAgIFxuICAgICNpbmNsdWRlIDxiZWdpbl92ZXJ0ZXg+XG4gICAgXG4gICAgI2luY2x1ZGUgPF9fZXhwYW5zaW9uX3ZlcnRleF9jaHVuaz5cbiAgICBcbiAgICAjaW5jbHVkZSA8bW9ycGh0YXJnZXRfdmVydGV4PlxuICAgICNpbmNsdWRlIDxza2lubmluZ192ZXJ0ZXg+XG4gICAgI2luY2x1ZGUgPGRpc3BsYWNlbWVudG1hcF92ZXJ0ZXg+XG4gICAgI2luY2x1ZGUgPHByb2plY3RfdmVydGV4PlxuICAgICNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl92ZXJ0ZXg+XG4gICAgI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc192ZXJ0ZXg+XG4gICAgXG4gICAgdlZpZXdQb3NpdGlvbiA9IC0gbXZQb3NpdGlvbi54eXo7XG5cbiAgICAjaW5jbHVkZSA8d29ybGRwb3NfdmVydGV4PlxuICAgICNpbmNsdWRlIDxlbnZtYXBfdmVydGV4PlxuICAgICNpbmNsdWRlIDxzaGFkb3dtYXBfdmVydGV4PlxuICAgICNpbmNsdWRlIDxmb2dfdmVydGV4PlxufVxuYDtcbn07XG4iLCJpbXBvcnQgeyBTaGFkZXJDaHVuayB9IGZyb20gXCJ0aHJlZVwiO1xuLyoqXG4gKiBTaGFkZXJDaHVua+OBq+eZu+mMsuOCkuihjOOBhkdMU0zjga7jgrPjg7zjg4nniYfjgpLmoLzntI3jgZnjgovjgq/jg6njgrnjgIJcbiAqIEdMU0zjgrPjg7zjg4njga7lhbHmnInljJbjgpLnm67nmoTjgajjgZnjgovjgIJcbiAqL1xuZXhwb3J0IGNsYXNzIEdMU0xDaHVuayB7XG4gICAgLyoqXG4gICAgICogU2hhZGVyQ2h1bmvjgavnmbvpjLLjgZnjgovlkI3liY3jgIJcbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0Q2h1bmtOYW1lKCkge1xuICAgICAgICByZXR1cm4gXCJcIjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2hhZGVyQ2h1bmvjgavnmbvpjLLjgZnjgotHTFNM44Kz44O844OJ44CCXG4gICAgICovXG4gICAgc3RhdGljIGdldENodW5rKCkge1xuICAgICAgICByZXR1cm4gXCJcIjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2h1bmvjgavplqLpgKPjgZnjgovlrprmlbBEZWZpbmXjgpLmoLzntI3jgZfjgZ/jgqrjg5bjgrjjgqfjgq/jg4jjgpLlj5blvpfjgZnjgovjgIJcbiAgICAgKiBAc2VlIGh0dHBzOi8vdGhyZWVqcy5vcmcvZG9jcy8jYXBpL2VuL21hdGVyaWFscy9TaGFkZXJNYXRlcmlhbC5kZWZpbmVzXG4gICAgICovXG4gICAgc3RhdGljIGdldERlZmluZXMoKSB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2hhZGVyQ2h1bmvjgatHTFNM44Kz44O844OJ44KS55m76Yyy44GZ44KL44CCXG4gICAgICovXG4gICAgc3RhdGljIHJlZ2lzdGVyQ2h1bmsoKSB7XG4gICAgICAgIGlmIChTaGFkZXJDaHVuayAmJiBTaGFkZXJDaHVua1t0aGlzLmdldENodW5rTmFtZSgpXSA9PSBudWxsKSB7XG4gICAgICAgICAgICBTaGFkZXJDaHVua1t0aGlzLmdldENodW5rTmFtZSgpXSA9IHRoaXMuZ2V0Q2h1bmsoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBDaHVua+OBq+mWoumAo+OBmeOCi+WFseacieWkieaVsFVuaWZvcm1z44KS5qC857SN44GX44Gf44Kq44OW44K444Kn44Kv44OI44KS5Y+W5b6X44GZ44KL44CCXG4gICAgICogQHNlZSBodHRwczovL3RocmVlanMub3JnL2RvY3MvI2FwaS9lbi9tYXRlcmlhbHMvU2hhZGVyTWF0ZXJpYWwudW5pZm9ybXNcbiAgICAgKi9cbiAgICBzdGF0aWMgZ2V0VW5pZm9ybSgpIHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgIH1cbn1cbiIsImltcG9ydCB7IEdMU0xDaHVuayB9IGZyb20gXCIuL0dMU0xDaHVua1wiO1xuLyoqXG4gKiBJQW5pbWF0YWJsZeOCpOODs+OCv+ODvOODleOCp+ODvOOCueOBp+Wumue+qeOBleOCjOOBn+OCouODi+ODoeODvOOCt+ODp+ODs+OCkuWun+ihjOOBmeOCi0dMU0zjg4Hjg6Pjg7Pjgq/jgIJcbiAqIHVuaWZvcm3jga50aW1l5YCk44KS5pON5L2c44GZ44KL44CCXG4gKiB0aW1l5YCk44Gr44KI44Gj44Gm44Gp44Gu44KI44GG44Gr5aSJ5YyW44GZ44KL44GL44Gv5a6f6KOF44GZ44KLU2hhZGVy44Gr44KI44KL44CCXG4gKi9cbmV4cG9ydCBjbGFzcyBBbmltYXRpb25DaHVuayBleHRlbmRzIEdMU0xDaHVuayB7XG4gICAgc3RhdGljIHJlZ2lzdGVyQ2h1bmsoKSB7XG4gICAgICAgIFRpbWVBbmltYXRpb25Vbmlmb3JtQ2h1bmsucmVnaXN0ZXJDaHVuaygpO1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0VW5pZm9ybSgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHRpbWU6IHsgdmFsdWU6IDAuMCB9LFxuICAgICAgICAgICAgaXNBbmltYXRlOiB7IHZhbHVlOiB0cnVlIH0sXG4gICAgICAgIH07XG4gICAgfVxuICAgIHN0YXRpYyBhZGRUaW1lKHNlbGYsIGRlbHRhKSB7XG4gICAgICAgIHNlbGYudW5pZm9ybXMudGltZS52YWx1ZSArPSBkZWx0YSAqIHNlbGYuc3BlZWQ7XG4gICAgfVxufVxuY2xhc3MgVGltZUFuaW1hdGlvblVuaWZvcm1DaHVuayBleHRlbmRzIEdMU0xDaHVuayB7XG4gICAgc3RhdGljIGdldENodW5rTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIFwidGltZV9hbmltYXRpb25fdW5pZm9ybV9jaHVua1wiO1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0Q2h1bmsoKSB7XG4gICAgICAgIHJldHVybiBgXG4gICAgdW5pZm9ybSBmbG9hdCB0aW1lO1xuICAgIHVuaWZvcm0gYm9vbCBpc0FuaW1hdGU7XG4gICAgYDtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBHTFNMQ2h1bmsgfSBmcm9tIFwiLi9HTFNMQ2h1bmtcIjtcbmV4cG9ydCBjbGFzcyBFeHBhbnNpb25DaHVuayBleHRlbmRzIEdMU0xDaHVuayB7XG4gICAgc3RhdGljIHJlZ2lzdGVyQ2h1bmsoKSB7XG4gICAgICAgIEV4cGFuc2lvblVuaWZvcm1DaHVuay5yZWdpc3RlckNodW5rKCk7XG4gICAgICAgIEV4cGFuc2lvblZlcnRleENodW5rLnJlZ2lzdGVyQ2h1bmsoKTtcbiAgICB9XG4gICAgc3RhdGljIGdldERlZmluZXMoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBVU0VfRVhQQU5TSU9OOiBmYWxzZSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgc3RhdGljIGdldFVuaWZvcm0oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBleHBhbnNpb25TdHJlbmd0aDoge1xuICAgICAgICAgICAgICAgIHZhbHVlOiAwLjAsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBFeHBhbnNpb25Vbmlmb3JtQ2h1bmsgZXh0ZW5kcyBHTFNMQ2h1bmsge1xuICAgIHN0YXRpYyBnZXRDaHVua05hbWUoKSB7XG4gICAgICAgIHJldHVybiBcIl9fZXhwYW5zaW9uX3VuaWZvcm1fY2h1bmtcIjtcbiAgICB9XG4gICAgc3RhdGljIGdldENodW5rKCkge1xuICAgICAgICByZXR1cm4gYFxuICAgICNpZmRlZiBVU0VfRVhQQU5TSU9OXG4gICAgICB1bmlmb3JtIGZsb2F0IGV4cGFuc2lvblN0cmVuZ3RoO1xuICAgICNlbmRpZlxuICAgIGA7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIEV4cGFuc2lvblZlcnRleENodW5rIGV4dGVuZHMgR0xTTENodW5rIHtcbiAgICBzdGF0aWMgZ2V0Q2h1bmtOYW1lKCkge1xuICAgICAgICByZXR1cm4gXCJfX2V4cGFuc2lvbl92ZXJ0ZXhfY2h1bmtcIjtcbiAgICB9XG4gICAgc3RhdGljIGdldENodW5rKCkge1xuICAgICAgICByZXR1cm4gYFxuICAgICNpZmRlZiBVU0VfRVhQQU5TSU9OXG4gICAgICB0cmFuc2Zvcm1lZCArPSBub3JtYWwgKiBleHBhbnNpb25TdHJlbmd0aDtcbiAgICAjZW5kaWZcbiAgICBgO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IEdMU0xDaHVuayB9IGZyb20gXCIuL0dMU0xDaHVua1wiO1xuaW1wb3J0IHsgVW5pZm9ybXNVdGlscyB9IGZyb20gXCJ0aHJlZVwiO1xuLyoqXG4gKiDjg57jgrnjgq/jg4bjgq/jgrnjg4Hjg6PjgpLliKnnlKjjgZnjgotTaGFkZXJNYXRlcmlhbOeUqENodW5r44CCXG4gKiDjg57jgrnjgq/jg4bjgq/jgrnjg4Hjg6PjgYzjganjga7jgojjgYbjgavmj4/nlLvjgavlj43mmKDjgZXjgozjgovjgYvjga/jgIHlkIRNYXRlcmlhbOOBruOCt+OCp+ODvOODgOODvOWun+ijheOBq+OCiOOCi+OAglxuICovXG5leHBvcnQgY2xhc3MgTWFwQ2h1bmsgZXh0ZW5kcyBHTFNMQ2h1bmsge1xuICAgIHN0YXRpYyByZWdpc3RlckNodW5rKCkge1xuICAgICAgICBzdXBlci5yZWdpc3RlckNodW5rKCk7XG4gICAgICAgIE1hcFVuaWZvcm1DaHVuay5yZWdpc3RlckNodW5rKCk7XG4gICAgICAgIE1hcEZyYWdtZW50Q2h1bmsucmVnaXN0ZXJDaHVuaygpO1xuICAgICAgICBNYXBGcmFnbWVudEJlZ2luQ2h1bmsucmVnaXN0ZXJDaHVuaygpO1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0VW5pZm9ybSgpIHtcbiAgICAgICAgcmV0dXJuIFVuaWZvcm1zVXRpbHMubWVyZ2UoW1xuICAgICAgICAgICAgc3VwZXIuZ2V0VW5pZm9ybSgpLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGhhc01hcDogeyB2YWx1ZTogZmFsc2UgfSxcbiAgICAgICAgICAgICAgICBtYXA6IHsgdmFsdWU6IG51bGwgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0pO1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0TWFwKF9zZWxmKSB7XG4gICAgICAgIHJldHVybiBfc2VsZi51bmlmb3Jtcy5tYXAudmFsdWU7XG4gICAgfVxuICAgIHN0YXRpYyBzZXRNYXAoX3NlbGYsIHZhbCkge1xuICAgICAgICBfc2VsZi51bmlmb3Jtcy5tYXAudmFsdWUgPSB2YWw7XG4gICAgICAgIF9zZWxmLnVuaWZvcm1zLmhhc01hcC52YWx1ZSA9IHZhbCAhPSBudWxsO1xuICAgIH1cbn1cbmNsYXNzIE1hcFVuaWZvcm1DaHVuayBleHRlbmRzIEdMU0xDaHVuayB7XG4gICAgc3RhdGljIGdldENodW5rTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIFwibWFwX3VuaWZvcm1fY2h1bmtcIjtcbiAgICB9XG4gICAgc3RhdGljIGdldENodW5rKCkge1xuICAgICAgICByZXR1cm4gYFxuICAgICAgdW5pZm9ybSBib29sIGhhc01hcDtcbiAgICAgIHVuaWZvcm0gc2FtcGxlcjJEIG1hcDtcbiAgICBgO1xuICAgIH1cbn1cbmNsYXNzIE1hcEZyYWdtZW50Q2h1bmsgZXh0ZW5kcyBHTFNMQ2h1bmsge1xuICAgIHN0YXRpYyBnZXRDaHVua05hbWUoKSB7XG4gICAgICAgIHJldHVybiBcIm1hcF9mcmFnbWVudF9jaHVua1wiO1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0Q2h1bmsoKSB7XG4gICAgICAgIHJldHVybiBgXG4gICAgICBpZiggaGFzTWFwICl7XG4gICAgICAgIHZlYzQgdGV4ZWxDb2xvciA9IHRleHR1cmUyRCggbWFwLCBtYXBVViApO1xuICAgICAgICBkaWZmdXNlQ29sb3IgKj0gdGV4ZWxDb2xvcjtcbiAgICAgIH1cbiAgICBgO1xuICAgIH1cbn1cbmNsYXNzIE1hcEZyYWdtZW50QmVnaW5DaHVuayBleHRlbmRzIEdMU0xDaHVuayB7XG4gICAgc3RhdGljIGdldENodW5rTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIFwiX19TaGFkZXJNYXRlcmlhbF9fbWFwX2ZyYWdtZW50X2JlZ2luX2NodW5rXCI7XG4gICAgfVxuICAgIHN0YXRpYyBnZXRDaHVuaygpIHtcbiAgICAgICAgcmV0dXJuIGBcbiAgICAgIHZlYzIgbWFwVVYgPSB1dlBvc2l0aW9uO1xuICAgIGA7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgR0xTTENodW5rIH0gZnJvbSBcIi4vR0xTTENodW5rXCI7XG5leHBvcnQgY2xhc3MgUmVwZWF0UGF0dGVybkNodW5rIGV4dGVuZHMgR0xTTENodW5rIHtcbiAgICBzdGF0aWMgcmVnaXN0ZXJDaHVuaygpIHtcbiAgICAgICAgUmVwZWF0UGF0dGVyblVuaWZvcm1DaHVuay5yZWdpc3RlckNodW5rKCk7XG4gICAgICAgIFJlcGVhdFBhdHRlcm5GcmFnbWVudENodW5rLnJlZ2lzdGVyQ2h1bmsoKTtcbiAgICB9XG4gICAgc3RhdGljIGdldFVuaWZvcm0oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkaXZpc2lvbjogeyB2YWx1ZTogMzIuMCB9LFxuICAgICAgICAgICAgZGl2aXNpb25TY2FsZVg6IHsgdmFsdWU6IDEuMCB9LFxuICAgICAgICB9O1xuICAgIH1cbn1cbmNsYXNzIFJlcGVhdFBhdHRlcm5Vbmlmb3JtQ2h1bmsgZXh0ZW5kcyBHTFNMQ2h1bmsge1xuICAgIHN0YXRpYyBnZXRDaHVua05hbWUoKSB7XG4gICAgICAgIHJldHVybiBcInJlcGVhdF9wYXR0ZXJuX3VuaWZvcm1fY2h1bmtcIjtcbiAgICB9XG4gICAgc3RhdGljIGdldENodW5rKCkge1xuICAgICAgICByZXR1cm4gYFxuICAgICAgdW5pZm9ybSBmbG9hdCBkaXZpc2lvbjtcbiAgICAgIHVuaWZvcm0gZmxvYXQgZGl2aXNpb25TY2FsZVg7XG4gICAgYDtcbiAgICB9XG59XG5jbGFzcyBSZXBlYXRQYXR0ZXJuRnJhZ21lbnRDaHVuayBleHRlbmRzIEdMU0xDaHVuayB7XG4gICAgc3RhdGljIGdldENodW5rTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIFwicmVwZWF0X3BhdHRlcm5fZnJhZ21lbnRfY2h1bmtcIjtcbiAgICB9XG4gICAgc3RhdGljIGdldENodW5rKCkge1xuICAgICAgICByZXR1cm4gYFxuICAgICAgdmVjMiB1diA9XG4gICAgICAgIHV2UG9zaXRpb25cbiAgICAgICAgKiB2ZWMyKCBkaXZpc2lvbiAqIGRpdmlzaW9uU2NhbGVYLCBkaXZpc2lvbik7XG4gICAgYDtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBHTFNMQ2h1bmsgfSBmcm9tIFwiLi9HTFNMQ2h1bmtcIjtcbmltcG9ydCB7IFJlcGVhdFBhdHRlcm5DaHVuayB9IGZyb20gXCIuL1JlcGVhdFBhdHRlcm5DaHVua1wiO1xuaW1wb3J0IHsgVW5pZm9ybXNVdGlscyB9IGZyb20gXCJ0aHJlZVwiO1xuLyoqXG4gKiDjg57jgrnjgq/jg4bjgq/jgrnjg4Hjg6PjgpLliKnnlKjjgZnjgotTaGFkZXJNYXRlcmlhbOeUqENodW5r44CCXG4gKiDjg57jgrnjgq/jg4bjgq/jgrnjg4Hjg6PjgYzjganjga7jgojjgYbjgavmj4/nlLvjgavlj43mmKDjgZXjgozjgovjgYvjga/jgIHlkIRNYXRlcmlhbOOBruOCt+OCp+ODvOODgOODvOWun+ijheOBq+OCiOOCi+OAglxuICovXG5leHBvcnQgY2xhc3MgTWFza01hcENodW5rIGV4dGVuZHMgUmVwZWF0UGF0dGVybkNodW5rIHtcbiAgICBzdGF0aWMgcmVnaXN0ZXJDaHVuaygpIHtcbiAgICAgICAgc3VwZXIucmVnaXN0ZXJDaHVuaygpO1xuICAgICAgICBNYXNrTWFwVW5pZm9ybUNodW5rLnJlZ2lzdGVyQ2h1bmsoKTtcbiAgICAgICAgTWFza01hcEZyYWdtZW50Q2h1bmsucmVnaXN0ZXJDaHVuaygpO1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0VW5pZm9ybSgpIHtcbiAgICAgICAgcmV0dXJuIFVuaWZvcm1zVXRpbHMubWVyZ2UoW1xuICAgICAgICAgICAgc3VwZXIuZ2V0VW5pZm9ybSgpLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGhhc01hc2tUZXh0dXJlOiB7IHZhbHVlOiBmYWxzZSB9LFxuICAgICAgICAgICAgICAgIG1hc2tUZXh0dXJlOiB7IHZhbHVlOiBudWxsIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICBdKTtcbiAgICB9XG4gICAgc3RhdGljIGdldE1hc2tUZXh0dXJlKF9zZWxmKSB7XG4gICAgICAgIHJldHVybiBfc2VsZi51bmlmb3Jtcy5tYXNrVGV4dHVyZS52YWx1ZTtcbiAgICB9XG4gICAgc3RhdGljIHNldE1hc2tUZXh0dXJlKF9zZWxmLCB2YWwpIHtcbiAgICAgICAgX3NlbGYudW5pZm9ybXMubWFza1RleHR1cmUudmFsdWUgPSB2YWw7XG4gICAgICAgIF9zZWxmLnVuaWZvcm1zLmhhc01hc2tUZXh0dXJlLnZhbHVlID0gdmFsICE9IG51bGw7XG4gICAgfVxufVxuY2xhc3MgTWFza01hcFVuaWZvcm1DaHVuayBleHRlbmRzIEdMU0xDaHVuayB7XG4gICAgc3RhdGljIGdldENodW5rTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIFwibWFza19tYXBfdW5pZm9ybV9jaHVua1wiO1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0Q2h1bmsoKSB7XG4gICAgICAgIHJldHVybiBgXG4gICAgICB1bmlmb3JtIGJvb2wgaGFzTWFza1RleHR1cmU7XG4gICAgICB1bmlmb3JtIHNhbXBsZXIyRCBtYXNrVGV4dHVyZTtcbiAgICBgO1xuICAgIH1cbn1cbmNsYXNzIE1hc2tNYXBGcmFnbWVudENodW5rIGV4dGVuZHMgR0xTTENodW5rIHtcbiAgICBzdGF0aWMgZ2V0Q2h1bmtOYW1lKCkge1xuICAgICAgICByZXR1cm4gXCJtYXNrX21hcF9mcmFnbWVudF9jaHVua1wiO1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0Q2h1bmsoKSB7XG4gICAgICAgIHJldHVybiBgXG4gICAgICBmbG9hdCBtYXNrID0gMS4wO1xuICAgICAgaWYoIGhhc01hc2tUZXh0dXJlICl7XG4gICAgICAgIHZlYzIgdVZtID0gaWQgLyB2ZWMyKCBkaXZpc2lvbiAqIGRpdmlzaW9uU2NhbGVYLCBkaXZpc2lvbik7XG4gICAgICAgIG1hc2sgPSB0ZXh0dXJlMkQoIG1hc2tUZXh0dXJlLCB1Vm0gKS5nO1xuICAgICAgfVxuICAgIGA7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgR0xTTENodW5rIH0gZnJvbSBcIi4vR0xTTENodW5rXCI7XG4vKipcbiAqIE1lc2hQaG9uZ01hdGVyaWFs44Go5ZCM562J44Gu5qmf6IO944KS5YKZ44GI44GfU2hhZGVyTWF0ZXJpYWzjgpLlrp/oo4XjgZnjgovjgZ/jgoHjgavlv4XopoHjgapHTFNM44Kz44O844OJ44KS5qC857SN44GX44Gf44Kv44Op44K544CCXG4gKi9cbmV4cG9ydCBjbGFzcyBNZXNoUGhvbmdDaHVuayBleHRlbmRzIEdMU0xDaHVuayB7XG4gICAgc3RhdGljIHJlZ2lzdGVyQ2h1bmsoKSB7XG4gICAgICAgIE1lc2hQaG9uZ1VuaWZvcm1DaHVuay5yZWdpc3RlckNodW5rKCk7XG4gICAgICAgIE1lc2hQaG9uZ0RpZmZ1c2VDb2xvckNodW5rLnJlZ2lzdGVyQ2h1bmsoKTtcbiAgICAgICAgTWVzaFBob25nU3dpdGNoaW5nQWxwaGFNYXBDaHVuay5yZWdpc3RlckNodW5rKCk7XG4gICAgICAgIE1lc2hQb3NpdGlvblZhcnlpbmdDaHVuay5yZWdpc3RlckNodW5rKCk7XG4gICAgICAgIE1lc2hQb3NpdGlvblZlcnRleENodW5rLnJlZ2lzdGVyQ2h1bmsoKTtcbiAgICB9XG4gICAgc3RhdGljIGdldERlZmluZXMoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBVU0VfTUVTSF9QT1NJVElPTjogZmFsc2UsXG4gICAgICAgIH07XG4gICAgfVxufVxuY2xhc3MgTWVzaFBob25nVW5pZm9ybUNodW5rIGV4dGVuZHMgR0xTTENodW5rIHtcbiAgICBzdGF0aWMgZ2V0Q2h1bmtOYW1lKCkge1xuICAgICAgICByZXR1cm4gXCJtZXNoX3Bob25nX3VuaWZvcm1cIjtcbiAgICB9XG4gICAgc3RhdGljIGdldENodW5rKCkge1xuICAgICAgICByZXR1cm4gYFxuICAgICAgdW5pZm9ybSB2ZWMzIGRpZmZ1c2U7XG4gICAgICB1bmlmb3JtIHZlYzMgZW1pc3NpdmU7XG4gICAgICB1bmlmb3JtIHZlYzMgc3BlY3VsYXI7XG4gICAgICB1bmlmb3JtIGZsb2F0IHNoaW5pbmVzcztcbiAgICAgIHVuaWZvcm0gZmxvYXQgb3BhY2l0eTtcbiAgICAgIHVuaWZvcm0gYm9vbCBoYXNBbHBoYU1hcDtcbiAgICAgIHVuaWZvcm0gc2FtcGxlcjJEIGFscGhhTWFwO1xuICAgIGA7XG4gICAgfVxufVxuY2xhc3MgTWVzaFBob25nRGlmZnVzZUNvbG9yQ2h1bmsgZXh0ZW5kcyBHTFNMQ2h1bmsge1xuICAgIHN0YXRpYyBnZXRDaHVua05hbWUoKSB7XG4gICAgICAgIHJldHVybiBcIm1lc2hfcGhvbmdfZGlmZnVzZV9jb2xvclwiO1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0Q2h1bmsoKSB7XG4gICAgICAgIHJldHVybiBgXG4gICAgICB2ZWM0IGRpZmZ1c2VDb2xvciA9IHZlYzQoIGRpZmZ1c2UsIG9wYWNpdHkgKTtcbiAgICAgIFJlZmxlY3RlZExpZ2h0IHJlZmxlY3RlZExpZ2h0ID0gUmVmbGVjdGVkTGlnaHQoIHZlYzMoIDAuMCApLCB2ZWMzKCAwLjAgKSwgdmVjMyggMC4wICksIHZlYzMoIDAuMCApICk7XG4gICAgICB2ZWMzIHRvdGFsRW1pc3NpdmVSYWRpYW5jZSA9IGVtaXNzaXZlO1xuICAgIGA7XG4gICAgfVxufVxuY2xhc3MgTWVzaFBob25nU3dpdGNoaW5nQWxwaGFNYXBDaHVuayBleHRlbmRzIEdMU0xDaHVuayB7XG4gICAgc3RhdGljIGdldENodW5rTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIFwibWVzaF9waG9uZ19zd2l0Y2hpbmdfYWxwaGFfbWFwXCI7XG4gICAgfVxuICAgIHN0YXRpYyBnZXRDaHVuaygpIHtcbiAgICAgICAgcmV0dXJuIGBcbiAgICAgIGlmKCBoYXNBbHBoYU1hcCApe1xuICAgICAgICBkaWZmdXNlQ29sb3IuYSAqPSB0ZXh0dXJlMkQoIGFscGhhTWFwLCBtYXBVViApLmc7XG4gICAgICB9XG4gICAgYDtcbiAgICB9XG59XG5jbGFzcyBNZXNoUG9zaXRpb25WYXJ5aW5nQ2h1bmsgZXh0ZW5kcyBHTFNMQ2h1bmsge1xuICAgIHN0YXRpYyBnZXRDaHVua05hbWUoKSB7XG4gICAgICAgIHJldHVybiBcIm1lc2hfcG9zaXRpb25fdmFyeWluZ1wiO1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0Q2h1bmsoKSB7XG4gICAgICAgIHJldHVybiBgXG4gICAgI2lmZGVmIFVTRV9NRVNIX1BPU0lUSU9OXG4gICAgdmFyeWluZyB2ZWMzIG1lc2hQb3NpdGlvbjtcbiAgICAjZW5kaWZcbiAgICBgO1xuICAgIH1cbn1cbmNsYXNzIE1lc2hQb3NpdGlvblZlcnRleENodW5rIGV4dGVuZHMgR0xTTENodW5rIHtcbiAgICBzdGF0aWMgZ2V0Q2h1bmtOYW1lKCkge1xuICAgICAgICByZXR1cm4gXCJtZXNoX3Bvc2l0aW9uX3ZlcnRleFwiO1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0Q2h1bmsoKSB7XG4gICAgICAgIHJldHVybiBgXG4gICAgI2lmZGVmIFVTRV9NRVNIX1BPU0lUSU9OXG4gICAgbWVzaFBvc2l0aW9uID0gcG9zaXRpb247XG4gICAgI2VuZGlmXG4gICAgYDtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBHTFNMQ2h1bmsgfSBmcm9tIFwiLi9HTFNMQ2h1bmtcIjtcbmV4cG9ydCBjbGFzcyBSZXZlcnNpYmxlQ2h1bmsgZXh0ZW5kcyBHTFNMQ2h1bmsge1xuICAgIHN0YXRpYyByZWdpc3RlckNodW5rKCkge1xuICAgICAgICBSZXZlcnNpYmxlVW5pZm9ybUNodW5rLnJlZ2lzdGVyQ2h1bmsoKTtcbiAgICB9XG4gICAgc3RhdGljIGdldFVuaWZvcm0oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpc1JldmVyc2VkOiB7IHZhbHVlOiBmYWxzZSB9LFxuICAgICAgICB9O1xuICAgIH1cbn1cbmNsYXNzIFJldmVyc2libGVVbmlmb3JtQ2h1bmsgZXh0ZW5kcyBHTFNMQ2h1bmsge1xuICAgIHN0YXRpYyBnZXRDaHVua05hbWUoKSB7XG4gICAgICAgIHJldHVybiBcInJldmVyc2libGVfdW5pZm9ybV9jaHVua1wiO1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0Q2h1bmsoKSB7XG4gICAgICAgIHJldHVybiBgXG4gICAgICB1bmlmb3JtIGJvb2wgaXNSZXZlcnNlZDtcbiAgICBgO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IEdMU0xDaHVuayB9IGZyb20gXCIuL0dMU0xDaHVua1wiO1xuZXhwb3J0IGNsYXNzIFN1cmZhY2VOb3JtYWxDaHVuayBleHRlbmRzIEdMU0xDaHVuayB7XG4gICAgc3RhdGljIHJlZ2lzdGVyQ2h1bmsoKSB7XG4gICAgICAgIFN1cmZhY2VOb3JtYWxWYXJ5aW5nQ2h1bmsucmVnaXN0ZXJDaHVuaygpO1xuICAgICAgICBTdXJmYWNlTm9ybWFsVmVydGV4Q2h1bmsucmVnaXN0ZXJDaHVuaygpO1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0RGVmaW5lcygpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIFVTRV9TVVJGQUNFX05PUk1BTDogZmFsc2UsXG4gICAgICAgIH07XG4gICAgfVxuICAgIHN0YXRpYyBnZXRVbmlmb3JtKCkge1xuICAgICAgICByZXR1cm4ge307XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIFN1cmZhY2VOb3JtYWxWYXJ5aW5nQ2h1bmsgZXh0ZW5kcyBHTFNMQ2h1bmsge1xuICAgIHN0YXRpYyBnZXRDaHVua05hbWUoKSB7XG4gICAgICAgIHJldHVybiBcInN1cmZhY2Vfbm9ybWFsX3ZhcnlpbmdfY2h1bmtcIjtcbiAgICB9XG4gICAgc3RhdGljIGdldENodW5rKCkge1xuICAgICAgICByZXR1cm4gYFxuICAgICNpZmRlZiBVU0VfU1VSRkFDRV9OT1JNQUxcbiAgICAgIHZhcnlpbmcgdmVjMyBzdXJmYWNlTm9ybWFsO1xuICAgICNlbmRpZlxuICAgIGA7XG4gICAgfVxufVxuZXhwb3J0IGNsYXNzIFN1cmZhY2VOb3JtYWxWZXJ0ZXhDaHVuayBleHRlbmRzIEdMU0xDaHVuayB7XG4gICAgc3RhdGljIGdldENodW5rTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIFwic3VyZmFjZV9ub3JtYWxfdmVydGV4X2NodW5rXCI7XG4gICAgfVxuICAgIHN0YXRpYyBnZXRDaHVuaygpIHtcbiAgICAgICAgcmV0dXJuIGBcbiAgICAjaWZkZWYgVVNFX1NVUkZBQ0VfTk9STUFMXG4gICAgICBzdXJmYWNlTm9ybWFsID0gbm9ybWFsaXplKCB0cmFuc2Zvcm1lZE5vcm1hbCApO1xuICAgICNlbmRpZlxuICAgIGA7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgQW5pbWF0aW9uQ2h1bmsgfSBmcm9tIFwiLi9BbmltYXRpb25DaHVua1wiO1xuaW1wb3J0IHsgR0xTTENodW5rIH0gZnJvbSBcIi4vR0xTTENodW5rXCI7XG5pbXBvcnQgeyBVbmlmb3Jtc1V0aWxzIH0gZnJvbSBcInRocmVlXCI7XG4vKipcbiAqIElXYXZlQW5pbWF0YWJsZeOCpOODs+OCv+ODvOODleOCp+ODvOOCueOBp+Wumue+qeOBleOCjOOBn+OCouODi+ODoeODvOOCt+ODp+ODs+OCkuWun+ijheOBmeOCi+OBn+OCgeOBrkdMU0zjg4Hjg6Pjg7Pjgq/jgIJcbiAqIOWun+ihjOOBq+OBr+OCsOODquODg+ODiWlk5YCk44GM5b+F6KaB44CCaWTjga92ZWMy44CCXG4gKiDntZDmnpzjga9kaWZmdXNlQ29sb3IuYeOBq+WPjeaYoOOBleOCjOOCi+OAglxuICovXG5leHBvcnQgY2xhc3MgV2F2eUFuaW1hdGlvbkNodW5rIGV4dGVuZHMgQW5pbWF0aW9uQ2h1bmsge1xuICAgIHN0YXRpYyByZWdpc3RlckNodW5rKCkge1xuICAgICAgICBzdXBlci5yZWdpc3RlckNodW5rKCk7XG4gICAgICAgIFdhdnlBbmltYXRpb25GcmFnbWVudENodW5rLnJlZ2lzdGVyQ2h1bmsoKTtcbiAgICAgICAgV2F2eUFuaW1hdGlvblVuaWZvcm1DaHVuay5yZWdpc3RlckNodW5rKCk7XG4gICAgfVxuICAgIHN0YXRpYyBnZXRVbmlmb3JtKCkge1xuICAgICAgICByZXR1cm4gVW5pZm9ybXNVdGlscy5tZXJnZShbXG4gICAgICAgICAgICBzdXBlci5nZXRVbmlmb3JtKCksXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcmFpc2VkQm90dG9tOiB7IHZhbHVlOiAwLjA1IH0sXG4gICAgICAgICAgICAgICAgd2F2ZUZyZXF1ZW5jeTogeyB2YWx1ZTogMC4yIH0sXG4gICAgICAgICAgICAgICAgd2F2ZVBvdzogeyB2YWx1ZTogNC4wIH0sXG4gICAgICAgICAgICAgICAgZGlyZWN0aW9uOiB7IHZhbHVlOiBEaXJlY3Rpb25zLnZlcnRpY2FsIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICBdKTtcbiAgICB9XG59XG5jbGFzcyBXYXZ5QW5pbWF0aW9uRnJhZ21lbnRDaHVuayBleHRlbmRzIEdMU0xDaHVuayB7XG4gICAgc3RhdGljIGdldENodW5rTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIFwid2F2eV9hbmltYXRpb25fZnJhZ21lbnRfY2h1bmtcIjtcbiAgICB9XG4gICAgc3RhdGljIGdldENodW5rKCkge1xuICAgICAgICByZXR1cm4gYFxuICAgIGZsb2F0IGRpc3RhbmNlID0gaWQueTtcbiAgICBpZiggZGlyZWN0aW9uID09ICR7RGlyZWN0aW9ucy5ob3Jpem9udGFsfSl7XG4gICAgICBkaXN0YW5jZSA9IGlkLng7XG4gICAgfWVsc2UgaWYoIGRpcmVjdGlvbiA9PSAke0RpcmVjdGlvbnMucmFkaWFsfSApe1xuICAgICAgZGlzdGFuY2UgPSBsZW5ndGgoaWQueHkpO1xuICAgIH1cblxuICAgIGZsb2F0IHdhdnkgPSBpc0FuaW1hdGVcbiAgICAgID8gcG93KCBzaW4oIChkaXN0YW5jZSAqIHdhdmVGcmVxdWVuY3kgLSB0aW1lKSApLCB3YXZlUG93KSArIHJhaXNlZEJvdHRvbVxuICAgICAgOiAxLjA7XG4gIFxuICAgIGRpZmZ1c2VDb2xvci5hICo9IHdhdnk7XG4gICAgYDtcbiAgICB9XG59XG5jbGFzcyBXYXZ5QW5pbWF0aW9uVW5pZm9ybUNodW5rIGV4dGVuZHMgR0xTTENodW5rIHtcbiAgICBzdGF0aWMgZ2V0Q2h1bmtOYW1lKCkge1xuICAgICAgICByZXR1cm4gXCJ3YXZ5X2FuaW1hdGlvbl91bmlmb3JtX2NodW5rXCI7XG4gICAgfVxuICAgIHN0YXRpYyBnZXRDaHVuaygpIHtcbiAgICAgICAgcmV0dXJuIGBcbiAgICB1bmlmb3JtIGZsb2F0IHJhaXNlZEJvdHRvbTtcbiAgICB1bmlmb3JtIGZsb2F0IHdhdmVGcmVxdWVuY3k7XG4gICAgdW5pZm9ybSBmbG9hdCB3YXZlUG93O1xuICAgIHVuaWZvcm0gaW50IGRpcmVjdGlvbjtcbiAgICBgO1xuICAgIH1cbn1cbi8qKlxuICogV2F2eeOCouODi+ODoeODvOOCt+ODp+ODs+OBruazouWPiuaWueWQkeOCkuekuuOBmWVudW3jgIJcbiAqL1xuZXhwb3J0IHZhciBEaXJlY3Rpb25zO1xuKGZ1bmN0aW9uIChEaXJlY3Rpb25zKSB7XG4gICAgRGlyZWN0aW9uc1tEaXJlY3Rpb25zW1widmVydGljYWxcIl0gPSA0XSA9IFwidmVydGljYWxcIjtcbiAgICBEaXJlY3Rpb25zW0RpcmVjdGlvbnNbXCJob3Jpem9udGFsXCJdID0gM10gPSBcImhvcml6b250YWxcIjtcbiAgICAvKipcbiAgICAgKiBpZOWApCgwLDAp44KS5Lit5b+D44Gr5ZCM5b+D5YaG54q244Gr5rOi5Y+K44GZ44KL44CCXG4gICAgICovXG4gICAgRGlyZWN0aW9uc1tEaXJlY3Rpb25zW1wicmFkaWFsXCJdID0gNV0gPSBcInJhZGlhbFwiO1xufSkoRGlyZWN0aW9ucyB8fCAoRGlyZWN0aW9ucyA9IHt9KSk7XG4iLCJleHBvcnQgKiBmcm9tIFwiLi9BbmltYXRpb25DaHVua1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vRXhwYW5zaW9uQ2h1bmtcIjtcbmV4cG9ydCAqIGZyb20gXCIuL0dMU0xDaHVua1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vSGV4R3JpZENodW5rXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9NYXBDaHVua1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vTWFza01hcENodW5rXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9NZXNoUGhvbmdDaHVua1wiO1xuZXhwb3J0ICogZnJvbSBcIi4vUmVwZWF0UGF0dGVybkNodW5rXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9SZXZlcnNpYmxlQ2h1bmtcIjtcbmV4cG9ydCAqIGZyb20gXCIuL1Nwcml0ZUNodW5rXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9TdXJmYWNlTm9ybWFsQ2h1bmtcIjtcbmV4cG9ydCAqIGZyb20gXCIuL1RpbGluZ0ZCTUNodW5rXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9XYXZ5QW5pbWF0aW9uQ2h1bmtcIjtcbiIsImltcG9ydCBGcmFnbWVudFNoYWRlciBmcm9tIFwiLi9TaGFkZXJQaG9uZ01hdGVyaWFsLmZyYWcuZ2xzbFwiO1xuaW1wb3J0IFZlcnRleFNoYWRlciBmcm9tIFwiLi9TaGFkZXJQaG9uZ01hdGVyaWFsLnZlcnQuZ2xzbFwiO1xuaW1wb3J0IHsgRXhwYW5zaW9uQ2h1bmssIE1hcENodW5rLCBNZXNoUGhvbmdDaHVuaywgU3VyZmFjZU5vcm1hbENodW5rLCB9IGZyb20gXCIuL2NodW5rL1wiO1xuaW1wb3J0IHsgQWRkaXRpdmVCbGVuZGluZywgQ29sb3IsIFNoYWRlck1hdGVyaWFsLCBVbmlmb3Jtc0xpYiwgVW5pZm9ybXNVdGlscywgfSBmcm9tIFwidGhyZWVcIjtcbi8qKlxuICogTWVzaFBob25nTWF0ZXJpYWzjgavmupbjgZjjgotTaGFkZXJNYXRlcmlhbOOCr+ODqeOCueOAglxuICpcbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL21yZG9vYi90aHJlZS5qcy9ibG9iLzc2YzY0YjIzZDQyMmRjZmIzNmEyODM1M2Y0NWIxZWZmYTFmNjhjNWEvc3JjL3JlbmRlcmVycy9zaGFkZXJzL1NoYWRlckxpYi5qcyNMNTNcbiAqL1xuZXhwb3J0IGNsYXNzIFNoYWRlclBob25nTWF0ZXJpYWwgZXh0ZW5kcyBTaGFkZXJNYXRlcmlhbCB7XG4gICAgLyoqXG4gICAgICog44Kz44Oz44K544OI44Op44Kv44K/44CCXG4gICAgICogQHBhcmFtIHZlcnRleFNoYWRlclxuICAgICAqIEBwYXJhbSBmcmFnbWVudFNoYWRlclxuICAgICAqIEBwYXJhbSBwYXJhbWV0ZXJzXG4gICAgICovXG4gICAgY29uc3RydWN0b3IodmVydGV4U2hhZGVyLCBmcmFnbWVudFNoYWRlciwgcGFyYW1ldGVycykge1xuICAgICAgICBzdXBlcihwYXJhbWV0ZXJzKTtcbiAgICAgICAgdGhpcy5fb3BhY2l0eSA9IDEuMDtcbiAgICAgICAgcGFyYW1ldGVycyAhPT0gbnVsbCAmJiBwYXJhbWV0ZXJzICE9PSB2b2lkIDAgPyBwYXJhbWV0ZXJzIDogKHBhcmFtZXRlcnMgPSB7fSk7XG4gICAgICAgIHZlcnRleFNoYWRlciAhPT0gbnVsbCAmJiB2ZXJ0ZXhTaGFkZXIgIT09IHZvaWQgMCA/IHZlcnRleFNoYWRlciA6ICh2ZXJ0ZXhTaGFkZXIgPSBWZXJ0ZXhTaGFkZXIoKSk7XG4gICAgICAgIGZyYWdtZW50U2hhZGVyICE9PSBudWxsICYmIGZyYWdtZW50U2hhZGVyICE9PSB2b2lkIDAgPyBmcmFnbWVudFNoYWRlciA6IChmcmFnbWVudFNoYWRlciA9IEZyYWdtZW50U2hhZGVyKCkpO1xuICAgICAgICB0aGlzLmluaXRDaHVua3MoKTtcbiAgICAgICAgdGhpcy5pbml0VW5pZm9ybXMoKTtcbiAgICAgICAgdGhpcy5pbml0RGVmaW5lcygpO1xuICAgICAgICB0aGlzLnZlcnRleFNoYWRlciA9IHZlcnRleFNoYWRlcjtcbiAgICAgICAgdGhpcy5mcmFnbWVudFNoYWRlciA9IGZyYWdtZW50U2hhZGVyO1xuICAgICAgICB0aGlzLmluaXREZWZhdWx0U2V0dGluZyhwYXJhbWV0ZXJzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICog44GT44GuTWF0ZXJpYWzjgavlv4XopoHjgap1bmlmb3Jtc+OCkueUn+aIkOOBmeOCi+OAglxuICAgICAqL1xuICAgIHN0YXRpYyBnZXRCYXNpY1VuaWZvcm1zKCkge1xuICAgICAgICByZXR1cm4gVW5pZm9ybXNVdGlscy5tZXJnZShbXG4gICAgICAgICAgICBVbmlmb3Jtc0xpYi5jb21tb24sXG4gICAgICAgICAgICBVbmlmb3Jtc0xpYi5zcGVjdWxhcm1hcCxcbiAgICAgICAgICAgIFVuaWZvcm1zTGliLmVudm1hcCxcbiAgICAgICAgICAgIFVuaWZvcm1zTGliLmFvbWFwLFxuICAgICAgICAgICAgVW5pZm9ybXNMaWIubGlnaHRtYXAsXG4gICAgICAgICAgICBVbmlmb3Jtc0xpYi5lbWlzc2l2ZW1hcCxcbiAgICAgICAgICAgIFVuaWZvcm1zTGliLmJ1bXBtYXAsXG4gICAgICAgICAgICBVbmlmb3Jtc0xpYi5ub3JtYWxtYXAsXG4gICAgICAgICAgICBVbmlmb3Jtc0xpYi5kaXNwbGFjZW1lbnRtYXAsXG4gICAgICAgICAgICBVbmlmb3Jtc0xpYi5ncmFkaWVudG1hcCxcbiAgICAgICAgICAgIFVuaWZvcm1zTGliLmZvZyxcbiAgICAgICAgICAgIFVuaWZvcm1zTGliLmxpZ2h0cyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBlbWlzc2l2ZTogeyB2YWx1ZTogbmV3IENvbG9yKDB4MDAwMDAwKSB9LFxuICAgICAgICAgICAgICAgIHNwZWN1bGFyOiB7IHZhbHVlOiBuZXcgQ29sb3IoMHgxMTExMTEpIH0sXG4gICAgICAgICAgICAgICAgc2hpbmluZXNzOiB7IHZhbHVlOiAzMCB9LFxuICAgICAgICAgICAgICAgIGhhc0FscGhhTWFwOiB7IHZhbHVlOiBmYWxzZSB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFN1cmZhY2VOb3JtYWxDaHVuay5nZXRVbmlmb3JtKCksXG4gICAgICAgICAgICBFeHBhbnNpb25DaHVuay5nZXRVbmlmb3JtKCksXG4gICAgICAgICAgICBNYXBDaHVuay5nZXRVbmlmb3JtKCksXG4gICAgICAgIF0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTaGFkZXJDaHVua+OBq+OBk+OBruODnuODhuODquOCouODq+OBq+W/heimgeOBqkNodW5r44KS6L+95Yqg44GZ44KL44CCXG4gICAgICovXG4gICAgaW5pdENodW5rcygpIHtcbiAgICAgICAgTWVzaFBob25nQ2h1bmsucmVnaXN0ZXJDaHVuaygpO1xuICAgICAgICBTdXJmYWNlTm9ybWFsQ2h1bmsucmVnaXN0ZXJDaHVuaygpO1xuICAgICAgICBFeHBhbnNpb25DaHVuay5yZWdpc3RlckNodW5rKCk7XG4gICAgICAgIE1hcENodW5rLnJlZ2lzdGVyQ2h1bmsoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogdW5pZm9ybXPjgpLliJ3mnJ/ljJbjgZnjgovjgIJcbiAgICAgKi9cbiAgICBpbml0VW5pZm9ybXMoKSB7XG4gICAgICAgIHRoaXMudW5pZm9ybXMgPSBVbmlmb3Jtc1V0aWxzLm1lcmdlKFtcbiAgICAgICAgICAgIFNoYWRlclBob25nTWF0ZXJpYWwuZ2V0QmFzaWNVbmlmb3JtcygpLFxuICAgICAgICAgICAgRXhwYW5zaW9uQ2h1bmsuZ2V0VW5pZm9ybSgpLFxuICAgICAgICAgICAge30sXG4gICAgICAgIF0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBkZWZpbmVz44KS5Yid5pyf5YyW44GZ44KL44CCXG4gICAgICovXG4gICAgaW5pdERlZmluZXMoKSB7XG4gICAgICAgIHRoaXMuZGVmaW5lcyA9IE9iamVjdC5hc3NpZ24oe30sIE1lc2hQaG9uZ0NodW5rLmdldERlZmluZXMoKSwgU3VyZmFjZU5vcm1hbENodW5rLmdldERlZmluZXMoKSwgRXhwYW5zaW9uQ2h1bmsuZ2V0RGVmaW5lcygpLCB0aGlzLmRlZmluZXMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAxLuOCquODl+OCt+ODp+ODs+OBp+aMh+WumuOBleOCjOOBquOBi+OBo+OBn+ODkeODqeODoeODvOOCv+ODvOWApOOCkuijnOWujOOBmeOCi+OAglxuICAgICAqIDIudW5pZm9ybXPjgavku6PlhaXjgZnjgovlv4XopoHjga7jgYLjgovjg5Hjg6njg6Hjg7zjgr/jg7zjgpLmmI7npLrnmoTjgavku6PlhaXjgZnjgovjgIJcbiAgICAgKlxuICAgICAqIEBwYXJhbSBwYXJhbWV0ZXJzXG4gICAgICovXG4gICAgaW5pdERlZmF1bHRTZXR0aW5nKHBhcmFtZXRlcnMpIHtcbiAgICAgICAgdGhpcy51bmlmb3JtT3BhY2l0eSA9IHRoaXMuX29wYWNpdHk7XG4gICAgICAgIHRoaXMubGlnaHRzID0gdHJ1ZTsgLy9GSVhNRSDjgrfjgqfjg7zjg4Djg7zjgYzjgqjjg6njg7zjgpLotbfjgZPjgZnjga7jgadsaWdodHPoqK3lrprjga/lvLfliLbjgadPTlxuICAgIH1cbiAgICAvKipcbiAgICAgKiBNZXNoUGhvbmfjg57jg4bjg6rjgqLjg6vjgajkupLmj5vmgKfjgpLmjIHjgaTjgZ/jgoHjgavjgIFjb2xvcuODl+ODreODkeODhuOCo+OBr2RpZmZ1c2Xjgbjku6PlhaXjgZXjgozjgovjgIJcbiAgICAgKi9cbiAgICBnZXQgY29sb3IoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnVuaWZvcm1zLmRpZmZ1c2UudmFsdWU7XG4gICAgfVxuICAgIHNldCBjb2xvcih2YWx1ZSkge1xuICAgICAgICB0aGlzLnVuaWZvcm1zLmRpZmZ1c2UudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICog6YCP5piO5bqmXG4gICAgICogQGRlcHJlY2F0ZWQgVXNlIHVuaWZvcm1PcGFjaXR5LCBUbyBiZSByZW1vdmVkIGluIHZlcnNpb24gMC4zLjBcbiAgICAgKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9taWNyb3NvZnQvVHlwZVNjcmlwdC9wdWxsLzM3ODk0XG4gICAgICovXG4gICAgLy9AdHMtaWdub3JlIDog44GT44KM44Gvb3BhY2l0eeODl+ODreODkeODhuOCo+OBqHVuaWZvcm1zLm9wYWNpdHnjg5fjg63jg5Hjg4bjgqPjgpLlkIzmnJ/jgZnjgovjgZ/jgoHjgavliKnnlKjjgZXjgozjgb7jgZnjgIJcbiAgICBnZXQgb3BhY2l0eSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudW5pZm9ybU9wYWNpdHk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOmAj+aYjuW6plxuICAgICAqL1xuICAgIGdldCB1bmlmb3JtT3BhY2l0eSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX29wYWNpdHk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOmAj+aYjuW6plxuICAgICAqIEBwYXJhbSB2YWx1ZVxuICAgICAqIEBkZXByZWNhdGVkIFVzZSB1bmlmb3JtT3BhY2l0eSwgVG8gYmUgcmVtb3ZlZCBpbiB2ZXJzaW9uIDAuMy4wXG4gICAgICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vbWljcm9zb2Z0L1R5cGVTY3JpcHQvcHVsbC8zNzg5NFxuICAgICAqL1xuICAgIC8vQHRzLWlnbm9yZSA6IOOBk+OCjOOBr29wYWNpdHnjg5fjg63jg5Hjg4bjgqPjgah1bmlmb3Jtcy5vcGFjaXR544OX44Ot44OR44OG44Kj44KS5ZCM5pyf44GZ44KL44Gf44KB44Gr5Yip55So44GV44KM44G+44GZ44CCXG4gICAgc2V0IG9wYWNpdHkodmFsdWUpIHtcbiAgICAgICAgdGhpcy51bmlmb3JtT3BhY2l0eSA9IHZhbHVlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiDpgI/mmI7luqZcbiAgICAgKiBvcGFjaXR544Gv5Z+65bqV44Kv44Op44K544GuTWF0ZXJpYWzjga7jgrPjg7Pjgrnjg4jjg6njgq/jgr/lhoXjgafmmI7npLrnmoTjgasxLjDjgYzku6PlhaXjgZXjgozjgovjgIJcbiAgICAgKiDjgZPjga7mrrXpmo7jgad1bmlmb3Jtc+OBr3VuZGVmaW5lZOOBquOBruOBp+OAgeOBneOBruOBvuOBvuOBp+OBr+WIneacn+WMluOBp+OBjeOBquOBhOOAglxuICAgICAqIOOBk+OBrnNldHRlcuOBp+OBr+WPl+OBkeWPluOBo+OBn+WApOOCknByaXZhdGXlpInmlbDjgavkv53lrZjjgZfjgabjgIHliJ3mnJ/ljJblvozjgat1bmlmb3Jtc+OBq+WGjeS7o+WFpeOBmeOCi+OAglxuICAgICAqIEBwYXJhbSB2YWx1ZVxuICAgICAqL1xuICAgIHNldCB1bmlmb3JtT3BhY2l0eSh2YWx1ZSkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHRoaXMuX29wYWNpdHkgPSB2YWx1ZTtcbiAgICAgICAgaWYgKChfYSA9IHRoaXMudW5pZm9ybXMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5vcGFjaXR5KSB7XG4gICAgICAgICAgICB0aGlzLnVuaWZvcm1zLm9wYWNpdHkudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXQgZW1pc3NpdmUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnVuaWZvcm1zLmVtaXNzaXZlLnZhbHVlO1xuICAgIH1cbiAgICBzZXQgZW1pc3NpdmUodmFsdWUpIHtcbiAgICAgICAgdGhpcy51bmlmb3Jtcy5lbWlzc2l2ZS52YWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgICBnZXQgbWFwKCkge1xuICAgICAgICByZXR1cm4gTWFwQ2h1bmsuZ2V0TWFwKHRoaXMpO1xuICAgIH1cbiAgICBzZXQgbWFwKHZhbCkge1xuICAgICAgICBNYXBDaHVuay5zZXRNYXAodGhpcywgdmFsKTtcbiAgICAgICAgdGhpcy5vblNldE1hcCh2YWwpO1xuICAgIH1cbiAgICBvblNldE1hcCh2YWwpIHsgfVxuICAgIGdldCBhbHBoYU1hcCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudW5pZm9ybXMuYWxwaGFNYXAudmFsdWU7XG4gICAgfVxuICAgIHNldCBhbHBoYU1hcCh2YWx1ZSkge1xuICAgICAgICB0aGlzLnVuaWZvcm1zLmFscGhhTWFwLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIHRoaXMudW5pZm9ybXMuaGFzQWxwaGFNYXAudmFsdWUgPSB2YWx1ZSAhPSBudWxsO1xuICAgICAgICB0aGlzLm9uU2V0QWxwaGFNYXAodmFsdWUpO1xuICAgIH1cbiAgICBvblNldEFscGhhTWFwKHZhbHVlKSB7IH1cbiAgICAvKipcbiAgICAgKiDnmbrlhYnnirbmhYvjga7jgZ/jgoHjgavjgIHjg57jg4bjg6rjgqLjg6vjga7oqK3lrprjgpLjgb7jgajjgoHjgablpInmm7TjgZnjgovjgIJcbiAgICAgKiB7QGxpbmsgaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMzc2NDc4NTMvdGhyZWUtanMtZGVwdGh3cml0ZS12cy1kZXB0aHRlc3QtZm9yLXRyYW5zcGFyZW50LWNhbnZhcy10ZXh0dXJlLW1hcC1vbi10aHJlZS1wfVxuICAgICAqL1xuICAgIHN0YXJ0R2xvdygpIHtcbiAgICAgICAgdGhpcy5hbHBoYVRlc3QgPSAwLjA7XG4gICAgICAgIHRoaXMuZGVwdGhXcml0ZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLmJsZW5kaW5nID0gQWRkaXRpdmVCbGVuZGluZztcbiAgICB9XG59XG4iLCJpbXBvcnQgRnJhZ21lbnRTaGFkZXIgZnJvbSBcIi4vU2hhZGVyU3ByaXRlTWF0ZXJpYWwuZnJhZy5nbHNsXCI7XG5pbXBvcnQgVmVydGV4U2hhZGVyIGZyb20gXCIuL1NoYWRlclNwcml0ZU1hdGVyaWFsLnZlcnQuZ2xzbFwiO1xuaW1wb3J0IHsgU3ByaXRlQ2h1bmsgfSBmcm9tIFwiLi9jaHVuay9cIjtcbmltcG9ydCB7IFNoYWRlck1hdGVyaWFsLCBVbmlmb3Jtc1V0aWxzLCB9IGZyb20gXCJ0aHJlZVwiO1xuZXhwb3J0IGNsYXNzIFNoYWRlclNwcml0ZU1hdGVyaWFsIGV4dGVuZHMgU2hhZGVyTWF0ZXJpYWwge1xuICAgIC8qKlxuICAgICAqIOOCs+ODs+OCueODiOODqeOCr+OCv+OAglxuICAgICAqIEBwYXJhbSB2ZXJ0ZXhTaGFkZXJcbiAgICAgKiBAcGFyYW0gZnJhZ21lbnRTaGFkZXJcbiAgICAgKiBAcGFyYW0gcGFyYW1ldGVyc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHZlcnRleFNoYWRlciwgZnJhZ21lbnRTaGFkZXIsIHBhcmFtZXRlcnMpIHtcbiAgICAgICAgc3VwZXIocGFyYW1ldGVycyk7XG4gICAgICAgIHRoaXMuX29wYWNpdHkgPSAxLjA7XG4gICAgICAgIHBhcmFtZXRlcnMgIT09IG51bGwgJiYgcGFyYW1ldGVycyAhPT0gdm9pZCAwID8gcGFyYW1ldGVycyA6IChwYXJhbWV0ZXJzID0ge30pO1xuICAgICAgICB2ZXJ0ZXhTaGFkZXIgIT09IG51bGwgJiYgdmVydGV4U2hhZGVyICE9PSB2b2lkIDAgPyB2ZXJ0ZXhTaGFkZXIgOiAodmVydGV4U2hhZGVyID0gVmVydGV4U2hhZGVyKCkpO1xuICAgICAgICBmcmFnbWVudFNoYWRlciAhPT0gbnVsbCAmJiBmcmFnbWVudFNoYWRlciAhPT0gdm9pZCAwID8gZnJhZ21lbnRTaGFkZXIgOiAoZnJhZ21lbnRTaGFkZXIgPSBGcmFnbWVudFNoYWRlcigpKTtcbiAgICAgICAgdGhpcy5pbml0Q2h1bmtzKCk7XG4gICAgICAgIHRoaXMuaW5pdFVuaWZvcm1zKCk7XG4gICAgICAgIHRoaXMuaW5pdERlZmluZXMoKTtcbiAgICAgICAgdGhpcy52ZXJ0ZXhTaGFkZXIgPSB2ZXJ0ZXhTaGFkZXI7XG4gICAgICAgIHRoaXMuZnJhZ21lbnRTaGFkZXIgPSBmcmFnbWVudFNoYWRlcjtcbiAgICAgICAgdGhpcy5pbml0RGVmYXVsdFNldHRpbmcocGFyYW1ldGVycyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNoYWRlckNodW5r44Gr44GT44Gu44Oe44OG44Oq44Ki44Or44Gr5b+F6KaB44GqQ2h1bmvjgpLov73liqDjgZnjgovjgIJcbiAgICAgKi9cbiAgICBpbml0Q2h1bmtzKCkge1xuICAgICAgICBTcHJpdGVDaHVuay5yZWdpc3RlckNodW5rKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIHVuaWZvcm1z44KS5Yid5pyf5YyW44GZ44KL44CCXG4gICAgICovXG4gICAgaW5pdFVuaWZvcm1zKCkge1xuICAgICAgICB0aGlzLnVuaWZvcm1zID0gVW5pZm9ybXNVdGlscy5tZXJnZShbU3ByaXRlQ2h1bmsuZ2V0VW5pZm9ybSgpLCB7fV0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBkZWZpbmVz44KS5Yid5pyf5YyW44GZ44KL44CCXG4gICAgICovXG4gICAgaW5pdERlZmluZXMoKSB7XG4gICAgICAgIHRoaXMuZGVmaW5lcyA9IE9iamVjdC5hc3NpZ24oe30sIFNwcml0ZUNodW5rLmdldERlZmluZXMoKSwgdGhpcy5kZWZpbmVzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogMS7jgqrjg5fjgrfjg6fjg7PjgafmjIflrprjgZXjgozjgarjgYvjgaPjgZ/jg5Hjg6njg6Hjg7zjgr/jg7zlgKTjgpLoo5zlrozjgZnjgovjgIJcbiAgICAgKiAyLnVuaWZvcm1z44Gr5Luj5YWl44GZ44KL5b+F6KaB44Gu44GC44KL44OR44Op44Oh44O844K/44O844KS5piO56S655qE44Gr5Luj5YWl44GZ44KL44CCXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcGFyYW1ldGVyc1xuICAgICAqL1xuICAgIGluaXREZWZhdWx0U2V0dGluZyhwYXJhbWV0ZXJzKSB7XG4gICAgICAgIHRoaXMudW5pZm9ybU9wYWNpdHkgPSB0aGlzLl9vcGFjaXR5O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiDpgI/mmI7luqZcbiAgICAgKiBAZGVwcmVjYXRlZCBVc2UgdW5pZm9ybU9wYWNpdHksIFRvIGJlIHJlbW92ZWQgaW4gdmVyc2lvbiAwLjMuMFxuICAgICAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9UeXBlU2NyaXB0L3B1bGwvMzc4OTRcbiAgICAgKi9cbiAgICAvL0B0cy1pZ25vcmUgOiDjgZPjgozjga9vcGFjaXR544OX44Ot44OR44OG44Kj44GodW5pZm9ybXMub3BhY2l0eeODl+ODreODkeODhuOCo+OCkuWQjOacn+OBmeOCi+OBn+OCgeOBq+WIqeeUqOOBleOCjOOBvuOBmeOAglxuICAgIGdldCBvcGFjaXR5KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fb3BhY2l0eTtcbiAgICB9XG4gICAgLyoqXG4gICAgICog6YCP5piO5bqmXG4gICAgICovXG4gICAgZ2V0IHVuaWZvcm1PcGFjaXR5KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fb3BhY2l0eTtcbiAgICB9XG4gICAgLyoqXG4gICAgICog6YCP5piO5bqmXG4gICAgICogQGRlcHJlY2F0ZWQgVXNlIHVuaWZvcm1PcGFjaXR5LCBUbyBiZSByZW1vdmVkIGluIHZlcnNpb24gMC4zLjBcbiAgICAgKiBAcGFyYW0gdmFsdWVcbiAgICAgKi9cbiAgICAvL0B0cy1pZ25vcmUgOiDjgZPjgozjga9vcGFjaXR544OX44Ot44OR44OG44Kj44GodW5pZm9ybXMub3BhY2l0eeODl+ODreODkeODhuOCo+OCkuWQjOacn+OBmeOCi+OBn+OCgeOBq+WIqeeUqOOBleOCjOOBvuOBmeOAglxuICAgIHNldCBvcGFjaXR5KHZhbHVlKSB7XG4gICAgICAgIHRoaXMudW5pZm9ybU9wYWNpdHkgPSB2YWx1ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICog6YCP5piO5bqmXG4gICAgICogb3BhY2l0eeOBr+WfuuW6leOCr+ODqeOCueOBrk1hdGVyaWFs44Gu44Kz44Oz44K544OI44Op44Kv44K/5YaF44Gn5piO56S655qE44GrMS4w44GM5Luj5YWl44GV44KM44KL44CCXG4gICAgICog44GT44Gu5q616ZqO44GndW5pZm9ybXPjga91bmRlZmluZWTjgarjga7jgafjgIHjgZ3jga7jgb7jgb7jgafjga/liJ3mnJ/ljJbjgafjgY3jgarjgYTjgIJcbiAgICAgKiDjgZPjga5zZXR0ZXLjgafjga/lj5fjgZHlj5bjgaPjgZ/lgKTjgpJwcml2YXRl5aSJ5pWw44Gr5L+d5a2Y44GX44Gm44CB5Yid5pyf5YyW5b6M44GrdW5pZm9ybXPjgavlho3ku6PlhaXjgZnjgovjgIJcbiAgICAgKiBAcGFyYW0gdmFsdWVcbiAgICAgKi9cbiAgICBzZXQgdW5pZm9ybU9wYWNpdHkodmFsdWUpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB0aGlzLl9vcGFjaXR5ID0gdmFsdWU7XG4gICAgICAgIGlmICgoX2EgPSB0aGlzLnVuaWZvcm1zKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Eub3BhY2l0eSkge1xuICAgICAgICAgICAgdGhpcy51bmlmb3Jtcy5vcGFjaXR5LnZhbHVlID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogU3ByaXRl44Oe44OG44Oq44Ki44Or44Go5LqS5o+b5oCn44KS5oyB44Gk44Gf44KB44Gr44CBY29sb3Ljg5fjg63jg5Hjg4bjgqPjga9kaWZmdXNl44G45Luj5YWl44GV44KM44KL44CCXG4gICAgICovXG4gICAgZ2V0IGNvbG9yKCkge1xuICAgICAgICByZXR1cm4gdGhpcy51bmlmb3Jtcy5kaWZmdXNlLnZhbHVlO1xuICAgIH1cbiAgICBzZXQgY29sb3IodmFsdWUpIHtcbiAgICAgICAgdGhpcy51bmlmb3Jtcy5kaWZmdXNlLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIGdldCBjZW50ZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnVuaWZvcm1zLmNlbnRlci52YWx1ZTtcbiAgICB9XG4gICAgc2V0IGNlbnRlcih2YWx1ZSkge1xuICAgICAgICB0aGlzLnVuaWZvcm1zLmNlbnRlci52YWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgICBnZXQgcm90YXRpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnVuaWZvcm1zLnJvdGF0aW9uLnZhbHVlO1xuICAgIH1cbiAgICBzZXQgcm90YXRpb24odmFsdWUpIHtcbiAgICAgICAgdGhpcy51bmlmb3Jtcy5yb3RhdGlvbi52YWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgICBnZXQgdXZUcmFuc2Zvcm0oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnVuaWZvcm1zLnV2VHJhbnNmb3JtLnZhbHVlO1xuICAgIH1cbiAgICBzZXQgdXZUcmFuc2Zvcm0odmFsdWUpIHtcbiAgICAgICAgdGhpcy51bmlmb3Jtcy51dlRyYW5zZm9ybS52YWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgICBnZXQgbWFwKCkge1xuICAgICAgICByZXR1cm4gdGhpcy51bmlmb3Jtcy5tYXAudmFsdWU7XG4gICAgfVxuICAgIHNldCBtYXAodmFsdWUpIHtcbiAgICAgICAgdGhpcy51bmlmb3Jtcy5tYXAudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG59XG4iLCJpbXBvcnQgRnJhZ21lbnRTaGFkZXIgZnJvbSBcIi4vU2hhZGVyQmFzaWNNYXRlcmlhbC5mcmFnLmdsc2xcIjtcbmltcG9ydCBWZXJ0ZXhTaGFkZXIgZnJvbSBcIi4vU2hhZGVyQmFzaWNNYXRlcmlhbC52ZXJ0Lmdsc2xcIjtcbmltcG9ydCB7IFN1cmZhY2VOb3JtYWxDaHVuayB9IGZyb20gXCIuL2NodW5rXCI7XG5pbXBvcnQgeyBTaGFkZXJNYXRlcmlhbCwgVW5pZm9ybXNMaWIsIFVuaWZvcm1zVXRpbHMsIH0gZnJvbSBcInRocmVlXCI7XG4vKipcbiAqIE1lc2hCYXNpY01hdGVyaWFs44Gr5rqW44GY44GfU2hhZGVyTWF0ZXJpYWxcbiAqL1xuZXhwb3J0IGNsYXNzIFNoYWRlckJhc2ljTWF0ZXJpYWwgZXh0ZW5kcyBTaGFkZXJNYXRlcmlhbCB7XG4gICAgLyoqXG4gICAgICogQHBhcmFtIHZlcnRleFNoYWRlclxuICAgICAqIEBwYXJhbSBmcmFnbWVudFNoYWRlclxuICAgICAqIEBwYXJhbSBwYXJhbWV0ZXJzXG4gICAgICovXG4gICAgY29uc3RydWN0b3IodmVydGV4U2hhZGVyLCBmcmFnbWVudFNoYWRlciwgcGFyYW1ldGVycykge1xuICAgICAgICBzdXBlcihwYXJhbWV0ZXJzKTtcbiAgICAgICAgdGhpcy5fb3BhY2l0eSA9IDEuMDtcbiAgICAgICAgdGhpcy51bmlmb3JtcyA9IFNoYWRlckJhc2ljTWF0ZXJpYWwuZ2V0QmFzaWNVbmlmb3JtcygpO1xuICAgICAgICB0aGlzLnZlcnRleFNoYWRlciA9IHZlcnRleFNoYWRlciAhPT0gbnVsbCAmJiB2ZXJ0ZXhTaGFkZXIgIT09IHZvaWQgMCA/IHZlcnRleFNoYWRlciA6IFZlcnRleFNoYWRlcigpO1xuICAgICAgICB0aGlzLmZyYWdtZW50U2hhZGVyID0gZnJhZ21lbnRTaGFkZXIgIT09IG51bGwgJiYgZnJhZ21lbnRTaGFkZXIgIT09IHZvaWQgMCA/IGZyYWdtZW50U2hhZGVyIDogRnJhZ21lbnRTaGFkZXIoKTtcbiAgICAgICAgU3VyZmFjZU5vcm1hbENodW5rLnJlZ2lzdGVyQ2h1bmsoKTtcbiAgICAgICAgdGhpcy5pbml0RGVmaW5lcygpO1xuICAgICAgICB0aGlzLnVuaWZvcm1PcGFjaXR5ID0gdGhpcy5fb3BhY2l0eTtcbiAgICB9XG4gICAgLyoqXG4gICAgICog44GT44GuTWF0ZXJpYWzjgavlv4XopoHjgap1bmlmb3Jtc+OCkueUn+aIkOOBmeOCi+OAglxuICAgICAqXG4gICAgICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vbXJkb29iL3RocmVlLmpzL2Jsb2IvMGMyNmJiNGJiODIyMDEyNjQ0N2M4MzczMTU0YWMwNDU1ODg0NDFkZS9zcmMvcmVuZGVyZXJzL3NoYWRlcnMvU2hhZGVyTGliLmpzI0wxMVxuICAgICAqL1xuICAgIHN0YXRpYyBnZXRCYXNpY1VuaWZvcm1zKCkge1xuICAgICAgICByZXR1cm4gVW5pZm9ybXNVdGlscy5tZXJnZShbXG4gICAgICAgICAgICBVbmlmb3Jtc0xpYi5jb21tb24sXG4gICAgICAgICAgICBVbmlmb3Jtc0xpYi5zcGVjdWxhcm1hcCxcbiAgICAgICAgICAgIFVuaWZvcm1zTGliLmVudm1hcCxcbiAgICAgICAgICAgIFVuaWZvcm1zTGliLmFvbWFwLFxuICAgICAgICAgICAgVW5pZm9ybXNMaWIubGlnaHRtYXAsXG4gICAgICAgICAgICBVbmlmb3Jtc0xpYi5mb2csXG4gICAgICAgIF0pO1xuICAgIH1cbiAgICBnZXQgY29sb3IoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnVuaWZvcm1zLmRpZmZ1c2UudmFsdWU7XG4gICAgfVxuICAgIHNldCBjb2xvcih2YWx1ZSkge1xuICAgICAgICB0aGlzLnVuaWZvcm1zLmRpZmZ1c2UudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gICAgZ2V0IHVuaWZvcm1PcGFjaXR5KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fb3BhY2l0eTtcbiAgICB9XG4gICAgc2V0IHVuaWZvcm1PcGFjaXR5KHZhbHVlKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgdGhpcy5fb3BhY2l0eSA9IHZhbHVlO1xuICAgICAgICBpZiAoKF9hID0gdGhpcy51bmlmb3JtcykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLm9wYWNpdHkpIHtcbiAgICAgICAgICAgIHRoaXMudW5pZm9ybXMub3BhY2l0eS52YWx1ZSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGluaXREZWZpbmVzKCkge1xuICAgICAgICB0aGlzLmRlZmluZXMgPSBPYmplY3QuYXNzaWduKHt9LCBTdXJmYWNlTm9ybWFsQ2h1bmsuZ2V0RGVmaW5lcygpLCB0aGlzLmRlZmluZXMpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IFNoYWRlclBob25nTWF0ZXJpYWwgfSBmcm9tIFwiLi4vU2hhZGVyUGhvbmdNYXRlcmlhbFwiO1xuaW1wb3J0IFZlcnRleFNoYWRlciBmcm9tIFwiLi4vU2hhZGVyUGhvbmdNYXRlcmlhbC52ZXJ0Lmdsc2xcIjtcbmltcG9ydCBGcmFnbWVudFNoYWRlciBmcm9tIFwiLi9Db250b3VyTWF0ZXJpYWwuZnJhZy5nbHNsXCI7XG5pbXBvcnQgeyBEb3VibGVTaWRlLCBUZXh0dXJlTG9hZGVyLCBVbmlmb3Jtc1V0aWxzLCB9IGZyb20gXCJ0aHJlZVwiO1xuLyoqXG4gKiDjg4bjgq/jgrnjg4Hjg6PjgpLnrYnpq5jnt5rnirbjgavjg57jg4Pjg5fjgZnjgovjg57jg4bjg6rjgqLjg6vjgIJcbiAqIOODnuODg+ODlOODs+OCsOS7peWkluOBruapn+iDveOBr01lc2hQaG9uZ01hdGVyaWFs44Gr5rqW44GY44KL44CCXG4gKi9cbmV4cG9ydCBjbGFzcyBDb250b3VyTWF0ZXJpYWwgZXh0ZW5kcyBTaGFkZXJQaG9uZ01hdGVyaWFsIHtcbiAgICBnZXQgbWFwKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbWFwO1xuICAgIH1cbiAgICBsb2FkTWFwKHVybCwgZ2VvKSB7XG4gICAgICAgIHRoaXMuX21hcCA9IG5ldyBUZXh0dXJlTG9hZGVyKCkubG9hZCh1cmwsICh0ZXh0dXJlKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy51bmlmb3JtcyAmJiB0aGlzLnVuaWZvcm1zLm1hcCkge1xuICAgICAgICAgICAgICAgIHRoaXMudW5pZm9ybXMubWFwLnZhbHVlID0gdGV4dHVyZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGdlby5jb21wdXRlQm91bmRpbmdCb3goKTtcbiAgICAgICAgdGhpcy51bmlmb3Jtcy50b3AudmFsdWUgPSBnZW8uYm91bmRpbmdCb3gubWF4Lnk7XG4gICAgICAgIHRoaXMudW5pZm9ybXMuYm90dG9tLnZhbHVlID0gZ2VvLmJvdW5kaW5nQm94Lm1pbi55O1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihwYXJhbWV0ZXJzKSB7XG4gICAgICAgIHN1cGVyKFZlcnRleFNoYWRlcigpLCBGcmFnbWVudFNoYWRlcigpLCBwYXJhbWV0ZXJzKTtcbiAgICB9XG4gICAgaW5pdERlZmluZXMoKSB7XG4gICAgICAgIHN1cGVyLmluaXREZWZpbmVzKCk7XG4gICAgICAgIHRoaXMuZGVmaW5lcy5VU0VfTUVTSF9QT1NJVElPTiA9IHRydWU7XG4gICAgfVxuICAgIGluaXRVbmlmb3JtcygpIHtcbiAgICAgICAgdGhpcy51bmlmb3JtcyA9IFVuaWZvcm1zVXRpbHMubWVyZ2UoW1xuICAgICAgICAgICAgU2hhZGVyUGhvbmdNYXRlcmlhbC5nZXRCYXNpY1VuaWZvcm1zKCksXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdG9wOiB7IHZhbHVlOiAxLjAgfSxcbiAgICAgICAgICAgICAgICBib3R0b206IHsgdmFsdWU6IC0xLjAgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0pO1xuICAgIH1cbiAgICBpbml0RGVmYXVsdFNldHRpbmcocGFyYW1ldGVycykge1xuICAgICAgICBzdXBlci5pbml0RGVmYXVsdFNldHRpbmcocGFyYW1ldGVycyk7XG4gICAgICAgIGlmIChwYXJhbWV0ZXJzLnRyYW5zcGFyZW50ID09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMudHJhbnNwYXJlbnQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy50cmFuc3BhcmVudCA9IHBhcmFtZXRlcnMudHJhbnNwYXJlbnQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMudHJhbnNwYXJlbnQgJiYgcGFyYW1ldGVycy5hbHBoYVRlc3QgPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5hbHBoYVRlc3QgPSAwLjU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcmFtZXRlcnMuc2lkZSA9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLnNpZGUgPSBEb3VibGVTaWRlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zaWRlID0gcGFyYW1ldGVycy5zaWRlO1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgU2hhZGVyUGhvbmdNYXRlcmlhbCB9IGZyb20gXCIuL1NoYWRlclBob25nTWF0ZXJpYWxcIjtcbmltcG9ydCB7IE1hc2tNYXBDaHVuaywgUmV2ZXJzaWJsZUNodW5rIH0gZnJvbSBcIi4vY2h1bmtcIjtcbmltcG9ydCB7IFVuaWZvcm1zVXRpbHMgfSBmcm9tIFwidGhyZWVcIjtcbi8qKlxuICog44Kw44Oq44OD44OJ54q244Gr5YiG5Ymy44GV44KM44Gf44Oe44OG44Oq44Ki44Or44CCXG4gKi9cbmV4cG9ydCBjbGFzcyBHcmlkTWF0ZXJpYWwgZXh0ZW5kcyBTaGFkZXJQaG9uZ01hdGVyaWFsIHtcbiAgICBnZXQgZGl2aXNpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnVuaWZvcm1zLmRpdmlzaW9uLnZhbHVlO1xuICAgIH1cbiAgICBzZXQgZGl2aXNpb24odmFsdWUpIHtcbiAgICAgICAgdGhpcy51bmlmb3Jtcy5kaXZpc2lvbi52YWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgICBnZXQgZGl2aXNpb25TY2FsZVgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnVuaWZvcm1zLmRpdmlzaW9uU2NhbGVYLnZhbHVlO1xuICAgIH1cbiAgICBzZXQgZGl2aXNpb25TY2FsZVgodmFsdWUpIHtcbiAgICAgICAgdGhpcy51bmlmb3Jtcy5kaXZpc2lvblNjYWxlWC52YWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgICBnZXQgaXNSZXZlcnNlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudW5pZm9ybXMuaXNSZXZlcnNlZC52YWx1ZTtcbiAgICB9XG4gICAgc2V0IGlzUmV2ZXJzZWQodmFsdWUpIHtcbiAgICAgICAgdGhpcy51bmlmb3Jtcy5pc1JldmVyc2VkLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIGdldCBtYXNrVGV4dHVyZSgpIHtcbiAgICAgICAgcmV0dXJuIE1hc2tNYXBDaHVuay5nZXRNYXNrVGV4dHVyZSh0aGlzKTtcbiAgICB9XG4gICAgc2V0IG1hc2tUZXh0dXJlKHZhbCkge1xuICAgICAgICBNYXNrTWFwQ2h1bmsuc2V0TWFza1RleHR1cmUodGhpcywgdmFsKTtcbiAgICB9XG4gICAgaW5pdENodW5rcygpIHtcbiAgICAgICAgc3VwZXIuaW5pdENodW5rcygpO1xuICAgICAgICBNYXNrTWFwQ2h1bmsucmVnaXN0ZXJDaHVuaygpO1xuICAgICAgICBSZXZlcnNpYmxlQ2h1bmsucmVnaXN0ZXJDaHVuaygpO1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0QmFzaWNVbmlmb3JtcygpIHtcbiAgICAgICAgcmV0dXJuIFVuaWZvcm1zVXRpbHMubWVyZ2UoW1xuICAgICAgICAgICAgU2hhZGVyUGhvbmdNYXRlcmlhbC5nZXRCYXNpY1VuaWZvcm1zKCksXG4gICAgICAgICAgICBSZXZlcnNpYmxlQ2h1bmsuZ2V0VW5pZm9ybSgpLFxuICAgICAgICAgICAgTWFza01hcENodW5rLmdldFVuaWZvcm0oKSxcbiAgICAgICAgXSk7XG4gICAgfVxuICAgIGluaXREZWZhdWx0U2V0dGluZyhwYXJhbWV0ZXJzKSB7XG4gICAgICAgIHN1cGVyLmluaXREZWZhdWx0U2V0dGluZyhwYXJhbWV0ZXJzKTtcbiAgICAgICAgaWYgKHBhcmFtZXRlcnMudHJhbnNwYXJlbnQgPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy50cmFuc3BhcmVudCA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJpbXBvcnQgeyBHcmlkTWF0ZXJpYWwgfSBmcm9tIFwiLi9HcmlkTWF0ZXJpYWxcIjtcbmltcG9ydCB7IEFuaW1hdGlvbkNodW5rLCBNYXNrTWFwQ2h1bmssIFJldmVyc2libGVDaHVuaywgV2F2eUFuaW1hdGlvbkNodW5rLCB9IGZyb20gXCIuL2NodW5rXCI7XG5pbXBvcnQgeyBSQUZUaWNrZXIsIFJBRlRpY2tlckV2ZW50VHlwZSB9IGZyb20gXCJAbWFzYXRvbWFraW5vL3JhZi10aWNrZXJcIjtcbmltcG9ydCB7IFVuaWZvcm1zVXRpbHMgfSBmcm9tIFwidGhyZWVcIjtcbi8qKlxuICog44Kw44Oq44OD44OJ54q244Gr5YiG5Ymy44GV44KM44CBV2F2eeOCouODi+ODoeODvOOCt+ODp+ODs+OCkuihjOOBhuODnuODhuODquOCouODq+OAglxuICovXG5leHBvcnQgY2xhc3MgV2F2eUdyaWRNYXRlcmlhbCBleHRlbmRzIEdyaWRNYXRlcmlhbCB7XG4gICAgYWRkVGltZShkZWx0YSkge1xuICAgICAgICBBbmltYXRpb25DaHVuay5hZGRUaW1lKHRoaXMsIGRlbHRhKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICog5rOi44Ki44OL44Oh44O844K344On44Oz44KS6KGM44GG44GL5ZCm44GL44CCXG4gICAgICovXG4gICAgZ2V0IGlzQW5pbWF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudW5pZm9ybXMuaXNBbmltYXRlLnZhbHVlO1xuICAgIH1cbiAgICBzZXQgaXNBbmltYXRlKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudW5pZm9ybXMuaXNBbmltYXRlLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIGlmICh0aGlzLmlzQW5pbWF0ZSkge1xuICAgICAgICAgICAgdGhpcy5zdGFydEFuaW1hdGlvbigpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zdG9wQW5pbWF0aW9uKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICog5rOi44Gu5oyv5bmFXG4gICAgICogMeOBruWgtOWQiOOAgeW5hTHjg5jjg4Pjgq/jgrlcbiAgICAgKiAwLjXjga7loLTlkIjjgIHluYUy44OY44OD44Kv44K544Gr44Gq44KLXG4gICAgICovXG4gICAgZ2V0IHdhdmVGcmVxdWVuY3koKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnVuaWZvcm1zLndhdmVGcmVxdWVuY3kudmFsdWU7XG4gICAgfVxuICAgIHNldCB3YXZlRnJlcXVlbmN5KHZhbHVlKSB7XG4gICAgICAgIHRoaXMudW5pZm9ybXMud2F2ZUZyZXF1ZW5jeS52YWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgICBnZXQgd2F2ZVBvdygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudW5pZm9ybXMud2F2ZVBvdy52YWx1ZTtcbiAgICB9XG4gICAgc2V0IHdhdmVQb3codmFsdWUpIHtcbiAgICAgICAgdGhpcy51bmlmb3Jtcy53YXZlUG93LnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOaYjuOCi+OBleOBruW6leS4iuOBklxuICAgICAqL1xuICAgIGdldCByYWlzZWRCb3R0b20oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnVuaWZvcm1zLnJhaXNlZEJvdHRvbS52YWx1ZTtcbiAgICB9XG4gICAgc2V0IHJhaXNlZEJvdHRvbSh2YWx1ZSkge1xuICAgICAgICB0aGlzLnVuaWZvcm1zLnJhaXNlZEJvdHRvbS52YWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiDms6LjgYznmbrnlJ/jgZnjgovmlrnop5JcbiAgICAgKi9cbiAgICBnZXQgZGlyZWN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy51bmlmb3Jtcy5kaXJlY3Rpb24udmFsdWU7XG4gICAgfVxuICAgIHNldCBkaXJlY3Rpb24odmFsdWUpIHtcbiAgICAgICAgdGhpcy51bmlmb3Jtcy5kaXJlY3Rpb24udmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IodmVydGV4U2hhZGVyLCBmcmFnbWVudFNoYWRlciwgcGFyYW1ldGVycykge1xuICAgICAgICBzdXBlcih2ZXJ0ZXhTaGFkZXIsIGZyYWdtZW50U2hhZGVyLCBwYXJhbWV0ZXJzKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIOazouOBrumAn+W6plxuICAgICAgICAgKiAwLjXjgavjgZnjgovjgagx44Gu5Y2K5YiG44Gu6YCf5bqm44Gr44Gq44KL44CCXG4gICAgICAgICAqIOODnuOCpOODiuOCueOCkuaMh+WumuOBmeOCi+OBqOOAgeazouOBrumAsuihjOaWueWQkeOBjOWPjei7ouOBmeOCi+OAglxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zcGVlZCA9IC0wLjU7XG4gICAgICAgIC8qXG4gICAgICAgICAqIElBbmltYXRhYmxlIGltcGxlbWVudHNcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuYW5pbWF0aW9uTGlzdGVuZXIgPSAoZSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5hZGRUaW1lKGUuZGVsdGEgLyAxMDAwKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5pc0FuaW1hdGUgPSB0aGlzLmlzQW5pbWF0ZTsgLy9yZXNldCBhbmQgc3RhcnQgYW5pbWF0aW9uXG4gICAgfVxuICAgIGluaXRDaHVua3MoKSB7XG4gICAgICAgIHN1cGVyLmluaXRDaHVua3MoKTtcbiAgICAgICAgV2F2eUFuaW1hdGlvbkNodW5rLnJlZ2lzdGVyQ2h1bmsoKTtcbiAgICB9XG4gICAgc3RhdGljIGdldEJhc2ljVW5pZm9ybXMoKSB7XG4gICAgICAgIHJldHVybiBVbmlmb3Jtc1V0aWxzLm1lcmdlKFtcbiAgICAgICAgICAgIHN1cGVyLmdldEJhc2ljVW5pZm9ybXMoKSxcbiAgICAgICAgICAgIFJldmVyc2libGVDaHVuay5nZXRVbmlmb3JtKCksXG4gICAgICAgICAgICBXYXZ5QW5pbWF0aW9uQ2h1bmsuZ2V0VW5pZm9ybSgpLFxuICAgICAgICAgICAgTWFza01hcENodW5rLmdldFVuaWZvcm0oKSxcbiAgICAgICAgXSk7XG4gICAgfVxuICAgIGluaXREZWZhdWx0U2V0dGluZyhwYXJhbWV0ZXJzKSB7XG4gICAgICAgIHN1cGVyLmluaXREZWZhdWx0U2V0dGluZyhwYXJhbWV0ZXJzKTtcbiAgICB9XG4gICAgc3RhcnRBbmltYXRpb24oKSB7XG4gICAgICAgIFJBRlRpY2tlci5vbihSQUZUaWNrZXJFdmVudFR5cGUub25CZWZvcmVUaWNrLCB0aGlzLmFuaW1hdGlvbkxpc3RlbmVyKTtcbiAgICB9XG4gICAgc3RvcEFuaW1hdGlvbigpIHtcbiAgICAgICAgUkFGVGlja2VyLm9mZihSQUZUaWNrZXJFdmVudFR5cGUub25CZWZvcmVUaWNrLCB0aGlzLmFuaW1hdGlvbkxpc3RlbmVyKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgVmVydGV4U2hhZGVyIGZyb20gXCIuLi9TaGFkZXJQaG9uZ01hdGVyaWFsLnZlcnQuZ2xzbFwiO1xuaW1wb3J0IHsgV2F2eUdyaWRNYXRlcmlhbCB9IGZyb20gXCIuLi9XYXZ5R3JpZE1hdGVyaWFsXCI7XG5pbXBvcnQgRnJhZ21lbnRTaGFkZXIgZnJvbSBcIi4vQ3Jvc3NHcmlkTWF0ZXJpYWwuZnJhZy5nbHNsXCI7XG5pbXBvcnQgeyBVbmlmb3Jtc1V0aWxzIH0gZnJvbSBcInRocmVlXCI7XG4vKipcbiAqIOWNgeWtl+e3muOCkuato+aWueW9ouOCsOODquODg+ODieOBruS4reW/g+OBq+aPj+eUu+OBmeOCi+ODnuODhuODquOCouODq+OAglxuICovXG5leHBvcnQgY2xhc3MgQ3Jvc3NHcmlkTWF0ZXJpYWwgZXh0ZW5kcyBXYXZ5R3JpZE1hdGVyaWFsIHtcbiAgICAvKipcbiAgICAgKiDjgrDjg6rjg4Pjg4nnt5rjga7lpKrjgZVcbiAgICAgKiAwLjDjgafnt5rjgarjgZfjgIEwLjXjgafjgrDjg6rjg4Pjg4npnaLjgarjgZfjgavjgarjgovjgIJcbiAgICAgKi9cbiAgICBnZXQgZ3JpZFdlaWdodCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudW5pZm9ybXMuZ3JpZFdlaWdodC52YWx1ZTtcbiAgICB9XG4gICAgc2V0IGdyaWRXZWlnaHQodmFsdWUpIHtcbiAgICAgICAgdGhpcy51bmlmb3Jtcy5ncmlkV2VpZ2h0LnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIGdldCByYWRpdXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnVuaWZvcm1zLnJhZGl1cy52YWx1ZTtcbiAgICB9XG4gICAgc2V0IHJhZGl1cyh2YWx1ZSkge1xuICAgICAgICB0aGlzLnVuaWZvcm1zLnJhZGl1cy52YWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihwYXJhbWV0ZXJzKSB7XG4gICAgICAgIHN1cGVyKFZlcnRleFNoYWRlcigpLCBGcmFnbWVudFNoYWRlcigpLCBwYXJhbWV0ZXJzKTtcbiAgICB9XG4gICAgaW5pdFVuaWZvcm1zKCkge1xuICAgICAgICB0aGlzLnVuaWZvcm1zID0gVW5pZm9ybXNVdGlscy5tZXJnZShbXG4gICAgICAgICAgICBXYXZ5R3JpZE1hdGVyaWFsLmdldEJhc2ljVW5pZm9ybXMoKSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBncmlkV2VpZ2h0OiB7IHZhbHVlOiAwLjAzIH0sXG4gICAgICAgICAgICAgICAgcmFkaXVzOiB7IHZhbHVlOiAwLjE1IH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICBdKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgVmVydGV4U2hhZGVyIGZyb20gXCIuLi9TaGFkZXJQaG9uZ01hdGVyaWFsLnZlcnQuZ2xzbFwiO1xuaW1wb3J0IHsgV2F2eUdyaWRNYXRlcmlhbCB9IGZyb20gXCIuLi9XYXZ5R3JpZE1hdGVyaWFsXCI7XG5pbXBvcnQgRnJhZ21lbnRTaGFkZXIgZnJvbSBcIi4vSGFsZnRvbmVHcmlkTWF0ZXJpYWwuZnJhZy5nbHNsXCI7XG5pbXBvcnQgeyBVbmlmb3Jtc1V0aWxzIH0gZnJvbSBcInRocmVlXCI7XG4vKipcbiAqIE1hc2tNYXDjgpLjg4/jg7zjg5Xjg4jjg7zjg7PliIbop6PjgZnjgovjg57jg4bjg6rjgqLjg6tcbiAqL1xuZXhwb3J0IGNsYXNzIEhhbGZ0b25lR3JpZE1hdGVyaWFsIGV4dGVuZHMgV2F2eUdyaWRNYXRlcmlhbCB7XG4gICAgZ2V0IHJhZGl1cygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudW5pZm9ybXMucmFkaXVzLnZhbHVlO1xuICAgIH1cbiAgICBzZXQgcmFkaXVzKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudW5pZm9ybXMucmFkaXVzLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKHBhcmFtZXRlcnMpIHtcbiAgICAgICAgc3VwZXIoVmVydGV4U2hhZGVyKCksIEZyYWdtZW50U2hhZGVyKCksIHBhcmFtZXRlcnMpO1xuICAgIH1cbiAgICBpbml0VW5pZm9ybXMoKSB7XG4gICAgICAgIHRoaXMudW5pZm9ybXMgPSBVbmlmb3Jtc1V0aWxzLm1lcmdlKFtcbiAgICAgICAgICAgIFdhdnlHcmlkTWF0ZXJpYWwuZ2V0QmFzaWNVbmlmb3JtcygpLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHJhZGl1czogeyB2YWx1ZTogMC43NSB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSk7XG4gICAgfVxufVxuIiwiaW1wb3J0IFZlcnRleFNoYWRlciBmcm9tIFwiLi4vU2hhZGVyUGhvbmdNYXRlcmlhbC52ZXJ0Lmdsc2xcIjtcbmltcG9ydCB7IFdhdnlHcmlkTWF0ZXJpYWwgfSBmcm9tIFwiLi4vV2F2eUdyaWRNYXRlcmlhbFwiO1xuaW1wb3J0IHsgSGV4R3JpZENodW5rIH0gZnJvbSBcIi4uL2NodW5rXCI7XG5pbXBvcnQgRnJhZ21lbnRTaGFkZXIgZnJvbSBcIi4vSGV4R3JpZE1hdGVyaWFsLmZyYWcuZ2xzbFwiO1xuaW1wb3J0IHsgVW5pZm9ybXNVdGlscyB9IGZyb20gXCJ0aHJlZVwiO1xuLyoqXG4gKiDlha3op5LlvaLjgrDjg6rjg4Pjg4njg57jg4bjg6rjgqLjg6tcbiAqL1xuZXhwb3J0IGNsYXNzIEhleEdyaWRNYXRlcmlhbCBleHRlbmRzIFdhdnlHcmlkTWF0ZXJpYWwge1xuICAgIC8qKlxuICAgICAqIOOCsOODquODg+ODiee3muOBruWkquOBlVxuICAgICAqIDAuMOOBp+e3muOBquOBl+OAgTAuNeOBp+OCsOODquODg+ODiemdouOBquOBl+OBq+OBquOCi+OAglxuICAgICAqL1xuICAgIGdldCBncmlkV2VpZ2h0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy51bmlmb3Jtcy5ncmlkV2VpZ2h0LnZhbHVlO1xuICAgIH1cbiAgICBzZXQgZ3JpZFdlaWdodCh2YWx1ZSkge1xuICAgICAgICB0aGlzLnVuaWZvcm1zLmdyaWRXZWlnaHQudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IocGFyYW1ldGVycykge1xuICAgICAgICBzdXBlcihWZXJ0ZXhTaGFkZXIoKSwgRnJhZ21lbnRTaGFkZXIoKSwgcGFyYW1ldGVycyk7XG4gICAgfVxuICAgIGluaXRVbmlmb3JtcygpIHtcbiAgICAgICAgdGhpcy51bmlmb3JtcyA9IFVuaWZvcm1zVXRpbHMubWVyZ2UoW1xuICAgICAgICAgICAgV2F2eUdyaWRNYXRlcmlhbC5nZXRCYXNpY1VuaWZvcm1zKCksXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgZ3JpZFdlaWdodDogeyB2YWx1ZTogMC4wMyB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSk7XG4gICAgfVxuICAgIGluaXRDaHVua3MoKSB7XG4gICAgICAgIHN1cGVyLmluaXRDaHVua3MoKTtcbiAgICAgICAgSGV4R3JpZENodW5rLnJlZ2lzdGVyQ2h1bmsoKTtcbiAgICB9XG59XG4iLCIvKipcbiAqIOWbm+inkuW9ouOBruOCsOODquODg+ODieOCkuaPj+eUu+OBmeOCi+OCt+OCp+ODvOODgOODvFxuICovXG5leHBvcnQgZGVmYXVsdCAoKSA9PiB7XG4gICAgLy8gbGFuZ3VhZ2U9R0xTTFxuICAgIHJldHVybiBgXG4jZGVmaW5lIFBIT05HXG5cbiNpbmNsdWRlIDxtZXNoX3Bob25nX3VuaWZvcm0+XG52YXJ5aW5nIHZlYzIgdXZQb3NpdGlvbjtcbiNpbmNsdWRlIDxtZXNoX3Bvc2l0aW9uX3Zhcnlpbmc+XG5cbi8vdXNlciBzZXR0aW5nc1xuI2luY2x1ZGUgPHRpbWVfYW5pbWF0aW9uX3VuaWZvcm1fY2h1bms+XG4jaW5jbHVkZSA8d2F2eV9hbmltYXRpb25fdW5pZm9ybV9jaHVuaz5cbiNpbmNsdWRlIDxyZXBlYXRfcGF0dGVybl91bmlmb3JtX2NodW5rPlxuI2luY2x1ZGUgPG1hc2tfbWFwX3VuaWZvcm1fY2h1bms+XG4jaW5jbHVkZSA8cmV2ZXJzaWJsZV91bmlmb3JtX2NodW5rPlxudW5pZm9ybSBmbG9hdCBncmlkV2VpZ2h0O1xuXG4jaW5jbHVkZSA8Y29tbW9uPlxuI2luY2x1ZGUgPHBhY2tpbmc+XG4jaW5jbHVkZSA8ZGl0aGVyaW5nX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8Y29sb3JfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDx1dl9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPHV2Ml9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPG1hcF9wYXJzX2ZyYWdtZW50PlxuLy8gI2luY2x1ZGUgPGFscGhhbWFwX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8YWxwaGF0ZXN0X3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8YW9tYXBfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxsaWdodG1hcF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGVtaXNzaXZlbWFwX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8ZW52bWFwX2NvbW1vbl9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGVudm1hcF9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGN1YmVfdXZfcmVmbGVjdGlvbl9mcmFnbWVudD5cbiNpbmNsdWRlIDxmb2dfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxic2Rmcz5cbiNpbmNsdWRlIDxsaWdodHNfcGFyc19iZWdpbj5cbiNpbmNsdWRlIDxub3JtYWxfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxsaWdodHNfcGhvbmdfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxzaGFkb3dtYXBfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxidW1wbWFwX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8bm9ybWFsbWFwX3BhcnNfZnJhZ21lbnQ+XG4jaW5jbHVkZSA8c3BlY3VsYXJtYXBfcGFyc19mcmFnbWVudD5cbiNpbmNsdWRlIDxsb2dkZXB0aGJ1Zl9wYXJzX2ZyYWdtZW50PlxuI2luY2x1ZGUgPGNsaXBwaW5nX3BsYW5lc19wYXJzX2ZyYWdtZW50Plxudm9pZCBtYWluKCkge1xuICAgICNpbmNsdWRlIDxjbGlwcGluZ19wbGFuZXNfZnJhZ21lbnQ+XG4gIFxuICAgICNpbmNsdWRlIDxtZXNoX3Bob25nX2RpZmZ1c2VfY29sb3I+XG4gICAgXG4gICAgI2luY2x1ZGUgPGxvZ2RlcHRoYnVmX2ZyYWdtZW50PlxuICAgICNpbmNsdWRlIDxfX1NoYWRlck1hdGVyaWFsX19tYXBfZnJhZ21lbnRfYmVnaW5fY2h1bms+XG4gICAgI2luY2x1ZGUgPG1hcF9mcmFnbWVudD5cbiAgICAjaW5jbHVkZSA8Y29sb3JfZnJhZ21lbnQ+XG5cbiAgICAjaW5jbHVkZSA8cmVwZWF0X3BhdHRlcm5fZnJhZ21lbnRfY2h1bms+ICAgIFxuICAgIHZlYzIgbG9jYWxQb3MgPSBtb2QodXYsIDEuMCkgLSAwLjU7XG4gICAgdmVjMiBpZCA9IHV2IC0gbG9jYWxQb3M7XG4gICAgI2luY2x1ZGUgPHdhdnlfYW5pbWF0aW9uX2ZyYWdtZW50X2NodW5rPlxuXG4gICAgI2luY2x1ZGUgPG1hc2tfbWFwX2ZyYWdtZW50X2NodW5rPlxuICAgIGZsb2F0IHcgPSBncmlkV2VpZ2h0ICsgKDEuMC1tYXNrKTtcbiAgICB3ID0gY2xhbXAoIHcsIDAuMCwgMS4wKTtcbiAgICBmbG9hdCBtYXJnaW4gPSBjbGFtcCAoIHcgKiAwLjMzLCAwLjAzLCAwLjEgKTtcbiAgICBcbiAgICBmbG9hdCBzdGVwSGlnaCA9IDAuNS0odyttYXJnaW4pO1xuICAgIGZsb2F0IHN0ZXBMb3cgPSAtMC41K3crbWFyZ2luO1xuICAgIFxuICAgIC8vZmxvYXQgZ3JpZExpbmUgPSBzbW9vdGhzdGVwKHcsIHN0ZXBNYXgsIGhjLnkpO1xuICAgIGZsb2F0IGdyaWRMaW5lID0gc21vb3Roc3RlcCAoIDAuNS13LCBzdGVwSGlnaCwgbG9jYWxQb3MueCApO1xuICAgIGdyaWRMaW5lICo9IHNtb290aHN0ZXAgKCAwLjUtdywgc3RlcEhpZ2gsIGxvY2FsUG9zLnkgKTtcbiAgICBncmlkTGluZSAqPSBzbW9vdGhzdGVwICggLTAuNSt3LCBzdGVwTG93LCBsb2NhbFBvcy54ICk7XG4gICAgZ3JpZExpbmUgKj0gc21vb3Roc3RlcCAoIC0wLjUrdywgc3RlcExvdywgbG9jYWxQb3MueSApO1xuICAgIFxuICAgIGdyaWRMaW5lID0gaXNSZXZlcnNlZFxuICAgICAgICA/IDEuMCAtIGdyaWRMaW5lXG4gICAgICAgIDogZ3JpZExpbmU7XG4gICAgZGlmZnVzZUNvbG9yLmEgKj0gZ3JpZExpbmU7XG5cbiAgICAjaW5jbHVkZSA8bWVzaF9waG9uZ19zd2l0Y2hpbmdfYWxwaGFfbWFwPlxuXG4gICAgLy8jaW5jbHVkZSA8YWxwaGFtYXBfZnJhZ21lbnQ+XG4gICAgI2luY2x1ZGUgPGFscGhhdGVzdF9mcmFnbWVudD5cbiAgICAjaW5jbHVkZSA8c3BlY3VsYXJtYXBfZnJhZ21lbnQ+XG4gICAgI2luY2x1ZGUgPG5vcm1hbF9mcmFnbWVudF9iZWdpbj5cbiAgICAjaW5jbHVkZSA8bm9ybWFsX2ZyYWdtZW50X21hcHM+XG4gICAgI2luY2x1ZGUgPGVtaXNzaXZlbWFwX2ZyYWdtZW50PlxuICAgIC8vIGFjY3VtdWxhdGlvblxuICAgICNpbmNsdWRlIDxsaWdodHNfcGhvbmdfZnJhZ21lbnQ+XG4gICAgI2luY2x1ZGUgPGxpZ2h0c19mcmFnbWVudF9iZWdpbj5cbiAgICAjaW5jbHVkZSA8bGlnaHRzX2ZyYWdtZW50X21hcHM+XG4gICAgI2luY2x1ZGUgPGxpZ2h0c19mcmFnbWVudF9lbmQ+XG4gICAgLy8gbW9kdWxhdGlvblxuICAgICNpbmNsdWRlIDxhb21hcF9mcmFnbWVudD5cbiAgICB2ZWMzIG91dGdvaW5nTGlnaHQgPSByZWZsZWN0ZWRMaWdodC5kaXJlY3REaWZmdXNlICsgcmVmbGVjdGVkTGlnaHQuaW5kaXJlY3REaWZmdXNlICsgcmVmbGVjdGVkTGlnaHQuZGlyZWN0U3BlY3VsYXIgKyByZWZsZWN0ZWRMaWdodC5pbmRpcmVjdFNwZWN1bGFyICsgdG90YWxFbWlzc2l2ZVJhZGlhbmNlO1xuICAgICNpbmNsdWRlIDxlbnZtYXBfZnJhZ21lbnQ+XG4gICAgI2luY2x1ZGUgPG91dHB1dF9mcmFnbWVudD5cbiAgICAjaW5jbHVkZSA8dG9uZW1hcHBpbmdfZnJhZ21lbnQ+XG4gICAgI2luY2x1ZGUgPGVuY29kaW5nc19mcmFnbWVudD5cbiAgICAjaW5jbHVkZSA8Zm9nX2ZyYWdtZW50PlxuICAgICNpbmNsdWRlIDxwcmVtdWx0aXBsaWVkX2FscGhhX2ZyYWdtZW50PlxuICAgICNpbmNsdWRlIDxkaXRoZXJpbmdfZnJhZ21lbnQ+XG59YDtcbn07XG4iLCJpbXBvcnQgVmVydGV4U2hhZGVyIGZyb20gXCIuLi9TaGFkZXJQaG9uZ01hdGVyaWFsLnZlcnQuZ2xzbFwiO1xuaW1wb3J0IHsgV2F2eUdyaWRNYXRlcmlhbCB9IGZyb20gXCIuLi9XYXZ5R3JpZE1hdGVyaWFsXCI7XG5pbXBvcnQgRnJhZ21lbnRTaGFkZXIgZnJvbSBcIi4vU3F1YXJlR3JpZE1hdGVyaWFsLmZyYWcuZ2xzbFwiO1xuaW1wb3J0IHsgVW5pZm9ybXNVdGlscyB9IGZyb20gXCJ0aHJlZVwiO1xuLyoqXG4gKiDlm5vop5LlvaLjgrDjg6rjg4Pjg4njg57jg4bjg6rjgqLjg6tcbiAqL1xuZXhwb3J0IGNsYXNzIFNxdWFyZUdyaWRNYXRlcmlhbCBleHRlbmRzIFdhdnlHcmlkTWF0ZXJpYWwge1xuICAgIC8qKlxuICAgICAqIOOCsOODquODg+ODiee3muOBruWkquOBlVxuICAgICAqIDAuMOOBp+e3muOBquOBl+OAgTAuNeOBp+OCsOODquODg+ODiemdouOBquOBl+OBq+OBquOCi+OAglxuICAgICAqL1xuICAgIGdldCBncmlkV2VpZ2h0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy51bmlmb3Jtcy5ncmlkV2VpZ2h0LnZhbHVlO1xuICAgIH1cbiAgICBzZXQgZ3JpZFdlaWdodCh2YWx1ZSkge1xuICAgICAgICB0aGlzLnVuaWZvcm1zLmdyaWRXZWlnaHQudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IocGFyYW1ldGVycykge1xuICAgICAgICBzdXBlcihWZXJ0ZXhTaGFkZXIoKSwgRnJhZ21lbnRTaGFkZXIoKSwgcGFyYW1ldGVycyk7XG4gICAgfVxuICAgIGluaXRVbmlmb3JtcygpIHtcbiAgICAgICAgdGhpcy51bmlmb3JtcyA9IFVuaWZvcm1zVXRpbHMubWVyZ2UoW1xuICAgICAgICAgICAgV2F2eUdyaWRNYXRlcmlhbC5nZXRCYXNpY1VuaWZvcm1zKCksXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgZ3JpZFdlaWdodDogeyB2YWx1ZTogMC4wMyB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSk7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgU2hhZGVyUGhvbmdNYXRlcmlhbCB9IGZyb20gXCIuLi9TaGFkZXJQaG9uZ01hdGVyaWFsXCI7XG5pbXBvcnQgVmVydGV4U2hhZGVyIGZyb20gXCIuLi9TaGFkZXJQaG9uZ01hdGVyaWFsLnZlcnQuZ2xzbFwiO1xuaW1wb3J0IHsgQW5pbWF0aW9uQ2h1bmsgfSBmcm9tIFwiLi4vY2h1bmsvXCI7XG5pbXBvcnQgRnJhZ21lbnRTaGFkZXIgZnJvbSBcIi4vU2t5Q2xvdWRNYXRlcmlhbC5mcmFnLmdsc2xcIjtcbmltcG9ydCB7IFJBRlRpY2tlciwgUkFGVGlja2VyRXZlbnRUeXBlIH0gZnJvbSBcIkBtYXNhdG9tYWtpbm8vcmFmLXRpY2tlclwiO1xuaW1wb3J0IHsgQ29sb3IsIFVuaWZvcm1zVXRpbHMgfSBmcm9tIFwidGhyZWVcIjtcbmV4cG9ydCBjbGFzcyBTa3lDbG91ZE1hdGVyaWFsIGV4dGVuZHMgU2hhZGVyUGhvbmdNYXRlcmlhbCB7XG4gICAgZ2V0IHNjYWxlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy51bmlmb3Jtcy5zY2FsZS52YWx1ZTtcbiAgICB9XG4gICAgc2V0IHNjYWxlKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudW5pZm9ybXMuc2NhbGUudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gICAgYWRkVGltZShkZWx0YSkge1xuICAgICAgICBBbmltYXRpb25DaHVuay5hZGRUaW1lKHRoaXMsIGRlbHRhKTtcbiAgICB9XG4gICAgZ2V0IGlzQW5pbWF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudW5pZm9ybXMuaXNBbmltYXRlLnZhbHVlO1xuICAgIH1cbiAgICBzZXQgaXNBbmltYXRlKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudW5pZm9ybXMuaXNBbmltYXRlLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIGlmICh0aGlzLmlzQW5pbWF0ZSkge1xuICAgICAgICAgICAgdGhpcy5zdGFydEFuaW1hdGlvbigpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zdG9wQW5pbWF0aW9uKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0IHNreUNvbG9yKCkge1xuICAgICAgICByZXR1cm4gdGhpcy51bmlmb3Jtcy5za3lDb2xvci52YWx1ZTtcbiAgICB9XG4gICAgc2V0IHNreUNvbG9yKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudW5pZm9ybXMuc2t5Q29sb3IudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gICAgZ2V0IGNsb3VkVm9sdW1lKCkge1xuICAgICAgICByZXR1cm4gdGhpcy51bmlmb3Jtcy5jbG91ZFZvbHVtZS52YWx1ZTtcbiAgICB9XG4gICAgc2V0IGNsb3VkVm9sdW1lKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudW5pZm9ybXMuY2xvdWRWb2x1bWUudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gICAgZ2V0IGNsb3VkQm90dG9tVm9sdW1lKCkge1xuICAgICAgICByZXR1cm4gdGhpcy51bmlmb3Jtcy5jbG91ZEJvdHRvbVZvbHVtZS52YWx1ZTtcbiAgICB9XG4gICAgc2V0IGNsb3VkQm90dG9tVm9sdW1lKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudW5pZm9ybXMuY2xvdWRCb3R0b21Wb2x1bWUudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gICAgZ2V0IGNsb3VkQm90dG9tU2F0dXJhdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudW5pZm9ybXMuY2xvdWRCb3R0b21TYXR1cmF0aW9uLnZhbHVlO1xuICAgIH1cbiAgICBzZXQgY2xvdWRCb3R0b21TYXR1cmF0aW9uKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudW5pZm9ybXMuY2xvdWRCb3R0b21TYXR1cmF0aW9uLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIGdldCBjbG91ZFRyYW5zZm9ybVNwZWVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy51bmlmb3Jtcy5jbG91ZFRyYW5zZm9ybVNwZWVkLnZhbHVlO1xuICAgIH1cbiAgICBzZXQgY2xvdWRUcmFuc2Zvcm1TcGVlZCh2YWx1ZSkge1xuICAgICAgICB0aGlzLnVuaWZvcm1zLmNsb3VkVHJhbnNmb3JtU3BlZWQudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcGFyYW1ldGVyc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHBhcmFtZXRlcnMpIHtcbiAgICAgICAgc3VwZXIoVmVydGV4U2hhZGVyKCksIEZyYWdtZW50U2hhZGVyKCksIHBhcmFtZXRlcnMpO1xuICAgICAgICAvKipcbiAgICAgICAgICog5rOi44Gu6YCf5bqmXG4gICAgICAgICAqIDAuNeOBq+OBmeOCi+OBqDHjga7ljYrliIbjga7pgJ/luqbjgavjgarjgovjgIJcbiAgICAgICAgICog44Oe44Kk44OK44K544KS5oyH5a6a44GZ44KL44Go44CB5rOi44Gu6YCy6KGM5pa55ZCR44GM5Y+N6Lui44GZ44KL44CCXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnNwZWVkID0gLTAuMDI7XG4gICAgICAgIC8qXG4gICAgICAgICAqIElBbmltYXRhYmxlIGltcGxlbWVudHNcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuYW5pbWF0aW9uTGlzdGVuZXIgPSAoZSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5hZGRUaW1lKGUuZGVsdGEgLyAxMDAwKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5pc0FuaW1hdGUgPSB0aGlzLmlzQW5pbWF0ZTsgLy9yZXNldCBhbmQgc3RhcnQgYW5pbWF0aW9uXG4gICAgfVxuICAgIGluaXRDaHVua3MoKSB7XG4gICAgICAgIHN1cGVyLmluaXRDaHVua3MoKTtcbiAgICAgICAgQW5pbWF0aW9uQ2h1bmsucmVnaXN0ZXJDaHVuaygpO1xuICAgIH1cbiAgICBpbml0VW5pZm9ybXMoKSB7XG4gICAgICAgIHRoaXMudW5pZm9ybXMgPSBVbmlmb3Jtc1V0aWxzLm1lcmdlKFtcbiAgICAgICAgICAgIFNoYWRlclBob25nTWF0ZXJpYWwuZ2V0QmFzaWNVbmlmb3JtcygpLFxuICAgICAgICAgICAgQW5pbWF0aW9uQ2h1bmsuZ2V0VW5pZm9ybSgpLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNjYWxlOiB7IHZhbHVlOiAzLjAgfSxcbiAgICAgICAgICAgICAgICBjbG91ZFRyYW5zZm9ybVNwZWVkOiB7IHZhbHVlOiAwLjE1IH0sXG4gICAgICAgICAgICAgICAgY2xvdWRWb2x1bWU6IHsgdmFsdWU6IDE2LjAgfSxcbiAgICAgICAgICAgICAgICBjbG91ZEJvdHRvbVZvbHVtZTogeyB2YWx1ZTogMC4wOCB9LFxuICAgICAgICAgICAgICAgIGNsb3VkQm90dG9tU2F0dXJhdGlvbjogeyB2YWx1ZTogMC41IH0sXG4gICAgICAgICAgICAgICAgc2t5Q29sb3I6IHsgdmFsdWU6IG5ldyBDb2xvcigwLjEwMTk2MSwgMC42MTk2MDgsIDAuNjY2NjY3KSB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSk7XG4gICAgfVxuICAgIGluaXREZWZhdWx0U2V0dGluZyhwYXJhbWV0ZXJzKSB7XG4gICAgICAgIHN1cGVyLmluaXREZWZhdWx0U2V0dGluZyhwYXJhbWV0ZXJzKTtcbiAgICAgICAgaWYgKHBhcmFtZXRlcnMudHJhbnNwYXJlbnQgPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy50cmFuc3BhcmVudCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnRyYW5zcGFyZW50ID0gcGFyYW1ldGVycy50cmFuc3BhcmVudDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzdGFydEFuaW1hdGlvbigpIHtcbiAgICAgICAgUkFGVGlja2VyLm9uKFJBRlRpY2tlckV2ZW50VHlwZS5vbkJlZm9yZVRpY2ssIHRoaXMuYW5pbWF0aW9uTGlzdGVuZXIpO1xuICAgIH1cbiAgICBzdG9wQW5pbWF0aW9uKCkge1xuICAgICAgICBSQUZUaWNrZXIub2ZmKFJBRlRpY2tlckV2ZW50VHlwZS5vbkJlZm9yZVRpY2ssIHRoaXMuYW5pbWF0aW9uTGlzdGVuZXIpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IFNoYWRlclBob25nTWF0ZXJpYWwgfSBmcm9tIFwiLi5cIjtcbmltcG9ydCBWZXJ0ZXhTaGFkZXIgZnJvbSBcIi4uL1NoYWRlclBob25nTWF0ZXJpYWwudmVydC5nbHNsXCI7XG5pbXBvcnQgeyBUaWxpbmdGQk1DaHVuayB9IGZyb20gXCIuLi9jaHVua1wiO1xuaW1wb3J0IEZyYWdtZW50U2hhZGVyIGZyb20gXCIuL0ZCTURpc3NvbHZlTWF0ZXJpYWwuZnJhZy5nbHNsXCI7XG5pbXBvcnQgeyBDb2xvciwgVW5pZm9ybXNVdGlscyB9IGZyb20gXCJ0aHJlZVwiO1xuZXhwb3J0IGNsYXNzIEZCTURpc3NvbHZlTWF0ZXJpYWwgZXh0ZW5kcyBTaGFkZXJQaG9uZ01hdGVyaWFsIHtcbiAgICBnZXQgdGlsZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnVuaWZvcm1zLnRpbGVzLnZhbHVlO1xuICAgIH1cbiAgICBzZXQgdGlsZXModmFsdWUpIHtcbiAgICAgICAgdGhpcy51bmlmb3Jtcy50aWxlcy52YWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgICBnZXQgaGFzaExvb3AoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnVuaWZvcm1zLmhhc2hMb29wLnZhbHVlO1xuICAgIH1cbiAgICBzZXQgaGFzaExvb3AodmFsdWUpIHtcbiAgICAgICAgdGhpcy51bmlmb3Jtcy5oYXNoTG9vcC52YWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgICBnZXQgYW1wKCkge1xuICAgICAgICByZXR1cm4gdGhpcy51bmlmb3Jtcy5hbXAudmFsdWU7XG4gICAgfVxuICAgIHNldCBhbXAodmFsdWUpIHtcbiAgICAgICAgdGhpcy51bmlmb3Jtcy5hbXAudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gICAgZ2V0IHByb2dyZXNzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy51bmlmb3Jtcy5wcm9ncmVzcy52YWx1ZTtcbiAgICB9XG4gICAgc2V0IHByb2dyZXNzKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudW5pZm9ybXMucHJvZ3Jlc3MudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gICAgZ2V0IGVkZ2VXZWlnaHQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnVuaWZvcm1zLmVkZ2VXZWlnaHQudmFsdWU7XG4gICAgfVxuICAgIHNldCBlZGdlV2VpZ2h0KHZhbHVlKSB7XG4gICAgICAgIHRoaXMudW5pZm9ybXMuZWRnZVdlaWdodC52YWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgICBnZXQgZWRnZUNvbG9yKCkge1xuICAgICAgICByZXR1cm4gdGhpcy51bmlmb3Jtcy5lZGdlQ29sb3IudmFsdWU7XG4gICAgfVxuICAgIHNldCBlZGdlQ29sb3IodmFsdWUpIHtcbiAgICAgICAgdGhpcy51bmlmb3Jtcy5lZGdlQ29sb3IudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcGFyYW1ldGVyc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHBhcmFtZXRlcnMpIHtcbiAgICAgICAgc3VwZXIoVmVydGV4U2hhZGVyKCksIEZyYWdtZW50U2hhZGVyKCksIHBhcmFtZXRlcnMpO1xuICAgIH1cbiAgICBpbml0VW5pZm9ybXMoKSB7XG4gICAgICAgIHRoaXMudW5pZm9ybXMgPSBVbmlmb3Jtc1V0aWxzLm1lcmdlKFtcbiAgICAgICAgICAgIFNoYWRlclBob25nTWF0ZXJpYWwuZ2V0QmFzaWNVbmlmb3JtcygpLFxuICAgICAgICAgICAgVGlsaW5nRkJNQ2h1bmsuZ2V0VW5pZm9ybSgpLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHByb2dyZXNzOiB7IHZhbHVlOiAwLjAgfSxcbiAgICAgICAgICAgICAgICBlZGdlV2VpZ2h0OiB7IHZhbHVlOiAwLjEgfSxcbiAgICAgICAgICAgICAgICBlZGdlQ29sb3I6IHsgdmFsdWU6IG5ldyBDb2xvcigxLjAsIDEuMCwgMS4wKSB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSk7XG4gICAgfVxuICAgIGluaXRDaHVua3MoKSB7XG4gICAgICAgIHN1cGVyLmluaXRDaHVua3MoKTtcbiAgICAgICAgVGlsaW5nRkJNQ2h1bmsucmVnaXN0ZXJDaHVuaygpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBkZWZpbmVz44KS5Yid5pyf5YyW44GZ44KL44CCXG4gICAgICovXG4gICAgaW5pdERlZmluZXMoKSB7XG4gICAgICAgIHN1cGVyLmluaXREZWZpbmVzKCk7XG4gICAgICAgIHRoaXMuZGVmaW5lcyA9IE9iamVjdC5hc3NpZ24oe30sIFRpbGluZ0ZCTUNodW5rLmdldERlZmluZXMoKSwgdGhpcy5kZWZpbmVzKTtcbiAgICB9XG4gICAgaW5pdERlZmF1bHRTZXR0aW5nKHBhcmFtZXRlcnMpIHtcbiAgICAgICAgc3VwZXIuaW5pdERlZmF1bHRTZXR0aW5nKHBhcmFtZXRlcnMpO1xuICAgICAgICBpZiAocGFyYW1ldGVycy50cmFuc3BhcmVudCA9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLnRyYW5zcGFyZW50ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMudHJhbnNwYXJlbnQgPSBwYXJhbWV0ZXJzLnRyYW5zcGFyZW50O1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgU2hhZGVyUGhvbmdNYXRlcmlhbCB9IGZyb20gXCIuLlwiO1xuaW1wb3J0IFZlcnRleFNoYWRlciBmcm9tIFwiLi4vU2hhZGVyUGhvbmdNYXRlcmlhbC52ZXJ0Lmdsc2xcIjtcbmltcG9ydCB7IEFuaW1hdGlvbkNodW5rLCBUaWxpbmdGQk1DaHVuaywgfSBmcm9tIFwiLi4vY2h1bmtcIjtcbmltcG9ydCBGcmFnbWVudFNoYWRlciBmcm9tIFwiLi9GQk1GaXJlTWF0ZXJpYWwuZnJhZy5nbHNsXCI7XG5pbXBvcnQgeyBSQUZUaWNrZXIsIFJBRlRpY2tlckV2ZW50VHlwZSB9IGZyb20gXCJAbWFzYXRvbWFraW5vL3JhZi10aWNrZXJcIjtcbmltcG9ydCB7IFVuaWZvcm1zVXRpbHMgfSBmcm9tIFwidGhyZWVcIjtcbmV4cG9ydCBjbGFzcyBGQk1GaXJlTWF0ZXJpYWwgZXh0ZW5kcyBTaGFkZXJQaG9uZ01hdGVyaWFsIHtcbiAgICBnZXQgdGlsZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnVuaWZvcm1zLnRpbGVzLnZhbHVlO1xuICAgIH1cbiAgICBzZXQgdGlsZXModmFsdWUpIHtcbiAgICAgICAgdGhpcy51bmlmb3Jtcy50aWxlcy52YWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgICBnZXQgaGFzaExvb3AoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnVuaWZvcm1zLmhhc2hMb29wLnZhbHVlO1xuICAgIH1cbiAgICBzZXQgaGFzaExvb3AodmFsdWUpIHtcbiAgICAgICAgdGhpcy51bmlmb3Jtcy5oYXNoTG9vcC52YWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgICBnZXQgYW1wKCkge1xuICAgICAgICByZXR1cm4gdGhpcy51bmlmb3Jtcy5hbXAudmFsdWU7XG4gICAgfVxuICAgIHNldCBhbXAodmFsdWUpIHtcbiAgICAgICAgdGhpcy51bmlmb3Jtcy5hbXAudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gICAgLypcbiAgICAgKiBJQW5pbWF0YWJsZSBpbXBsZW1lbnRzXG4gICAgICovXG4gICAgYWRkVGltZShkZWx0YSkge1xuICAgICAgICBBbmltYXRpb25DaHVuay5hZGRUaW1lKHRoaXMsIGRlbHRhKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICog44Ki44OL44Oh44O844K344On44Oz44KS6KGM44GG44GL5ZCm44GL44CCXG4gICAgICovXG4gICAgZ2V0IGlzQW5pbWF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudW5pZm9ybXMuaXNBbmltYXRlLnZhbHVlO1xuICAgIH1cbiAgICBzZXQgaXNBbmltYXRlKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudW5pZm9ybXMuaXNBbmltYXRlLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIGlmICh0aGlzLmlzQW5pbWF0ZSkge1xuICAgICAgICAgICAgdGhpcy5zdGFydEFuaW1hdGlvbigpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zdG9wQW5pbWF0aW9uKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0IHN0cmVuZ3RoKCkge1xuICAgICAgICByZXR1cm4gdGhpcy51bmlmb3Jtcy5zdHJlbmd0aC52YWx1ZTtcbiAgICB9XG4gICAgc2V0IHN0cmVuZ3RoKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudW5pZm9ybXMuc3RyZW5ndGgudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gICAgZ2V0IGJsb29tKCkge1xuICAgICAgICByZXR1cm4gdGhpcy51bmlmb3Jtcy5ibG9vbS52YWx1ZTtcbiAgICB9XG4gICAgc2V0IGJsb29tKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudW5pZm9ybXMuYmxvb20udmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gICAgZ2V0IHRyYW5zZm9ybVNwZWVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy51bmlmb3Jtcy50cmFuc2Zvcm1TcGVlZC52YWx1ZTtcbiAgICB9XG4gICAgc2V0IHRyYW5zZm9ybVNwZWVkKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudW5pZm9ybXMudHJhbnNmb3JtU3BlZWQudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gICAgZ2V0IHJpbVBvdygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudW5pZm9ybXMucmltUG93LnZhbHVlO1xuICAgIH1cbiAgICBzZXQgcmltUG93KHZhbHVlKSB7XG4gICAgICAgIHRoaXMudW5pZm9ybXMucmltUG93LnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIGdldCByaW1TdHJlbmd0aCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudW5pZm9ybXMucmltU3RyZW5ndGgudmFsdWU7XG4gICAgfVxuICAgIHNldCByaW1TdHJlbmd0aCh2YWx1ZSkge1xuICAgICAgICB0aGlzLnVuaWZvcm1zLnJpbVN0cmVuZ3RoLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIHBhcmFtZXRlcnNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihwYXJhbWV0ZXJzKSB7XG4gICAgICAgIHN1cGVyKFZlcnRleFNoYWRlcigpLCBGcmFnbWVudFNoYWRlcigpLCBwYXJhbWV0ZXJzKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIOazouOBrumAn+W6plxuICAgICAgICAgKiAwLjXjgavjgZnjgovjgagx44Gu5Y2K5YiG44Gu6YCf5bqm44Gr44Gq44KL44CCXG4gICAgICAgICAqIOODnuOCpOODiuOCueOCkuaMh+WumuOBmeOCi+OBqOOAgeazouOBrumAsuihjOaWueWQkeOBjOWPjei7ouOBmeOCi+OAglxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5zcGVlZCA9IC0wLjU7XG4gICAgICAgIC8qXG4gICAgICAgICAqIElBbmltYXRhYmxlIGltcGxlbWVudHNcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuYW5pbWF0aW9uTGlzdGVuZXIgPSAoZSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5hZGRUaW1lKGUuZGVsdGEgLyAxMDAwKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5pc0FuaW1hdGUgPSB0aGlzLmlzQW5pbWF0ZTsgLy9yZXNldCBhbmQgc3RhcnQgYW5pbWF0aW9uXG4gICAgfVxuICAgIGluaXRVbmlmb3JtcygpIHtcbiAgICAgICAgdGhpcy51bmlmb3JtcyA9IFVuaWZvcm1zVXRpbHMubWVyZ2UoW1xuICAgICAgICAgICAgU2hhZGVyUGhvbmdNYXRlcmlhbC5nZXRCYXNpY1VuaWZvcm1zKCksXG4gICAgICAgICAgICBUaWxpbmdGQk1DaHVuay5nZXRVbmlmb3JtKCksXG4gICAgICAgICAgICBBbmltYXRpb25DaHVuay5nZXRVbmlmb3JtKCksXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc3RyZW5ndGg6IHsgdmFsdWU6IDAuNDUgfSxcbiAgICAgICAgICAgICAgICBibG9vbTogeyB2YWx1ZTogMC4xIH0sXG4gICAgICAgICAgICAgICAgcmltU3RyZW5ndGg6IHsgdmFsdWU6IDEuMCB9LFxuICAgICAgICAgICAgICAgIHJpbVBvdzogeyB2YWx1ZTogMS4wIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICBdKTtcbiAgICB9XG4gICAgaW5pdENodW5rcygpIHtcbiAgICAgICAgc3VwZXIuaW5pdENodW5rcygpO1xuICAgICAgICBUaWxpbmdGQk1DaHVuay5yZWdpc3RlckNodW5rKCk7XG4gICAgICAgIEFuaW1hdGlvbkNodW5rLnJlZ2lzdGVyQ2h1bmsoKTtcbiAgICB9XG4gICAgaW5pdERlZmluZXMoKSB7XG4gICAgICAgIHN1cGVyLmluaXREZWZpbmVzKCk7XG4gICAgICAgIHRoaXMuZGVmaW5lcyA9IE9iamVjdC5hc3NpZ24oe30sIFRpbGluZ0ZCTUNodW5rLmdldERlZmluZXMoKSwgdGhpcy5kZWZpbmVzKTtcbiAgICAgICAgdGhpcy5kZWZpbmVzLlVTRV9TVVJGQUNFX05PUk1BTCA9IHRydWU7XG4gICAgfVxuICAgIGluaXREZWZhdWx0U2V0dGluZyhwYXJhbWV0ZXJzKSB7XG4gICAgICAgIHN1cGVyLmluaXREZWZhdWx0U2V0dGluZyhwYXJhbWV0ZXJzKTtcbiAgICAgICAgaWYgKHBhcmFtZXRlcnMudHJhbnNwYXJlbnQgPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy50cmFuc3BhcmVudCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnRyYW5zcGFyZW50ID0gcGFyYW1ldGVycy50cmFuc3BhcmVudDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzdGFydEFuaW1hdGlvbigpIHtcbiAgICAgICAgUkFGVGlja2VyLm9uKFJBRlRpY2tlckV2ZW50VHlwZS5vbkJlZm9yZVRpY2ssIHRoaXMuYW5pbWF0aW9uTGlzdGVuZXIpO1xuICAgIH1cbiAgICBzdG9wQW5pbWF0aW9uKCkge1xuICAgICAgICBSQUZUaWNrZXIub2ZmKFJBRlRpY2tlckV2ZW50VHlwZS5vbkJlZm9yZVRpY2ssIHRoaXMuYW5pbWF0aW9uTGlzdGVuZXIpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IFNoYWRlckJhc2ljTWF0ZXJpYWwgfSBmcm9tIFwiLi5cIjtcbmltcG9ydCBGcmFnbWVudFNoYWRlciBmcm9tIFwiLi9SaW1CYXNpY01hdGVyaWFsLmZyYWcuZ2xzbFwiO1xuaW1wb3J0IHsgQ29sb3IsIFVuaWZvcm1zVXRpbHMgfSBmcm9tIFwidGhyZWVcIjtcbmV4cG9ydCBjbGFzcyBSaW1CYXNpY01hdGVyaWFsIGV4dGVuZHMgU2hhZGVyQmFzaWNNYXRlcmlhbCB7XG4gICAgZ2V0IHJpbVBvdygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudW5pZm9ybXMucmltUG93LnZhbHVlO1xuICAgIH1cbiAgICBzZXQgcmltUG93KHZhbHVlKSB7XG4gICAgICAgIHRoaXMudW5pZm9ybXMucmltUG93LnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIGdldCByaW1TdHJlbmd0aCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudW5pZm9ybXMucmltU3RyZW5ndGgudmFsdWU7XG4gICAgfVxuICAgIHNldCByaW1TdHJlbmd0aCh2YWx1ZSkge1xuICAgICAgICB0aGlzLnVuaWZvcm1zLnJpbVN0cmVuZ3RoLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIGdldCByaW1Db2xvcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudW5pZm9ybXMucmltQ29sb3IudmFsdWU7XG4gICAgfVxuICAgIHNldCByaW1Db2xvcih2YWx1ZSkge1xuICAgICAgICB0aGlzLnVuaWZvcm1zLnJpbUNvbG9yLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIGdldCBpbnNpZGVQb3coKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnVuaWZvcm1zLmluc2lkZVBvdy52YWx1ZTtcbiAgICB9XG4gICAgc2V0IGluc2lkZVBvdyh2YWx1ZSkge1xuICAgICAgICB0aGlzLnVuaWZvcm1zLmluc2lkZVBvdy52YWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgICBnZXQgaW5zaWRlU3RyZW5ndGgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnVuaWZvcm1zLmluc2lkZVN0cmVuZ3RoLnZhbHVlO1xuICAgIH1cbiAgICBzZXQgaW5zaWRlU3RyZW5ndGgodmFsdWUpIHtcbiAgICAgICAgdGhpcy51bmlmb3Jtcy5pbnNpZGVTdHJlbmd0aC52YWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgICBnZXQgaW5zaWRlQ29sb3IoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnVuaWZvcm1zLmluc2lkZUNvbG9yLnZhbHVlO1xuICAgIH1cbiAgICBzZXQgaW5zaWRlQ29sb3IodmFsdWUpIHtcbiAgICAgICAgdGhpcy51bmlmb3Jtcy5pbnNpZGVDb2xvci52YWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihwYXJhbSkge1xuICAgICAgICBzdXBlcihudWxsLCBGcmFnbWVudFNoYWRlcigpLCBwYXJhbSk7XG4gICAgICAgIHRoaXMudW5pZm9ybXMgPSBVbmlmb3Jtc1V0aWxzLm1lcmdlKFtcbiAgICAgICAgICAgIFNoYWRlckJhc2ljTWF0ZXJpYWwuZ2V0QmFzaWNVbmlmb3JtcygpLFxuICAgICAgICAgICAgUmltQmFzaWNNYXRlcmlhbC5nZXRSaW1Vbmlmb3JtcygpLFxuICAgICAgICBdKTtcbiAgICAgICAgdGhpcy5pbml0RGVmaW5lcygpO1xuICAgIH1cbiAgICBzdGF0aWMgZ2V0UmltVW5pZm9ybXMoKSB7XG4gICAgICAgIHJldHVybiBVbmlmb3Jtc1V0aWxzLm1lcmdlKFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICByaW1Db2xvcjogeyB2YWx1ZTogbmV3IENvbG9yKDEuMCwgMS4wLCAxLjApIH0sXG4gICAgICAgICAgICAgICAgcmltU3RyZW5ndGg6IHsgdmFsdWU6IDEuMCB9LFxuICAgICAgICAgICAgICAgIHJpbVBvdzogeyB2YWx1ZTogMS4wIH0sXG4gICAgICAgICAgICAgICAgaW5zaWRlQ29sb3I6IHsgdmFsdWU6IG5ldyBDb2xvcigwLjAsIDAuMCwgMC4wKSB9LFxuICAgICAgICAgICAgICAgIGluc2lkZVN0cmVuZ3RoOiB7IHZhbHVlOiAxLjAgfSxcbiAgICAgICAgICAgICAgICBpbnNpZGVQb3c6IHsgdmFsdWU6IDEuMCB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSk7XG4gICAgfVxuICAgIGluaXREZWZpbmVzKCkge1xuICAgICAgICBzdXBlci5pbml0RGVmaW5lcygpO1xuICAgICAgICB0aGlzLmRlZmluZXMuVVNFX1NVUkZBQ0VfTk9STUFMID0gdHJ1ZTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBTaGFkZXJQaG9uZ01hdGVyaWFsIH0gZnJvbSBcIi4uL1NoYWRlclBob25nTWF0ZXJpYWxcIjtcbmltcG9ydCBGcmFnbWVudFNoYWRlciBmcm9tIFwiLi9SaW1FZmZlY3RNYXRlcmlhbC5mcmFnLmdsc2xcIjtcbmltcG9ydCB7IENvbG9yLCBVbmlmb3Jtc1V0aWxzIH0gZnJvbSBcInRocmVlXCI7XG5leHBvcnQgY2xhc3MgUmltRWZmZWN0TWF0ZXJpYWwgZXh0ZW5kcyBTaGFkZXJQaG9uZ01hdGVyaWFsIHtcbiAgICBnZXQgcmltUG93KCkge1xuICAgICAgICByZXR1cm4gdGhpcy51bmlmb3Jtcy5yaW1Qb3cudmFsdWU7XG4gICAgfVxuICAgIHNldCByaW1Qb3codmFsdWUpIHtcbiAgICAgICAgdGhpcy51bmlmb3Jtcy5yaW1Qb3cudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gICAgZ2V0IHJpbVN0cmVuZ3RoKCkge1xuICAgICAgICByZXR1cm4gdGhpcy51bmlmb3Jtcy5yaW1TdHJlbmd0aC52YWx1ZTtcbiAgICB9XG4gICAgc2V0IHJpbVN0cmVuZ3RoKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudW5pZm9ybXMucmltU3RyZW5ndGgudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gICAgZ2V0IHJpbUNvbG9yKCkge1xuICAgICAgICByZXR1cm4gdGhpcy51bmlmb3Jtcy5yaW1Db2xvci52YWx1ZTtcbiAgICB9XG4gICAgc2V0IHJpbUNvbG9yKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudW5pZm9ybXMucmltQ29sb3IudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gICAgZ2V0IGluc2lkZVBvdygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudW5pZm9ybXMuaW5zaWRlUG93LnZhbHVlO1xuICAgIH1cbiAgICBzZXQgaW5zaWRlUG93KHZhbHVlKSB7XG4gICAgICAgIHRoaXMudW5pZm9ybXMuaW5zaWRlUG93LnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIGdldCBpbnNpZGVTdHJlbmd0aCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudW5pZm9ybXMuaW5zaWRlU3RyZW5ndGgudmFsdWU7XG4gICAgfVxuICAgIHNldCBpbnNpZGVTdHJlbmd0aCh2YWx1ZSkge1xuICAgICAgICB0aGlzLnVuaWZvcm1zLmluc2lkZVN0cmVuZ3RoLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIGdldCBpbnNpZGVDb2xvcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudW5pZm9ybXMuaW5zaWRlQ29sb3IudmFsdWU7XG4gICAgfVxuICAgIHNldCBpbnNpZGVDb2xvcih2YWx1ZSkge1xuICAgICAgICB0aGlzLnVuaWZvcm1zLmluc2lkZUNvbG9yLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIHBhcmFtZXRlcnNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihwYXJhbWV0ZXJzKSB7XG4gICAgICAgIHN1cGVyKG51bGwsIEZyYWdtZW50U2hhZGVyKCksIHBhcmFtZXRlcnMpO1xuICAgIH1cbiAgICBpbml0VW5pZm9ybXMoKSB7XG4gICAgICAgIHRoaXMudW5pZm9ybXMgPSBVbmlmb3Jtc1V0aWxzLm1lcmdlKFtcbiAgICAgICAgICAgIFNoYWRlclBob25nTWF0ZXJpYWwuZ2V0QmFzaWNVbmlmb3JtcygpLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHJpbUNvbG9yOiB7IHZhbHVlOiBuZXcgQ29sb3IoMS4wLCAxLjAsIDEuMCkgfSxcbiAgICAgICAgICAgICAgICByaW1TdHJlbmd0aDogeyB2YWx1ZTogMS4wIH0sXG4gICAgICAgICAgICAgICAgcmltUG93OiB7IHZhbHVlOiAxLjAgfSxcbiAgICAgICAgICAgICAgICBpbnNpZGVDb2xvcjogeyB2YWx1ZTogbmV3IENvbG9yKDAuMCwgMC4wLCAwLjApIH0sXG4gICAgICAgICAgICAgICAgaW5zaWRlU3RyZW5ndGg6IHsgdmFsdWU6IDEuMCB9LFxuICAgICAgICAgICAgICAgIGluc2lkZVBvdzogeyB2YWx1ZTogMS4wIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICBdKTtcbiAgICB9XG4gICAgaW5pdERlZmluZXMoKSB7XG4gICAgICAgIHN1cGVyLmluaXREZWZpbmVzKCk7XG4gICAgICAgIHRoaXMuZGVmaW5lcy5VU0VfTElHSFQgPSB0cnVlO1xuICAgICAgICB0aGlzLmRlZmluZXMuVVNFX1NVUkZBQ0VfTk9STUFMID0gdHJ1ZTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBSaW1FZmZlY3RNYXRlcmlhbCB9IGZyb20gXCIuL1JpbUVmZmVjdE1hdGVyaWFsXCI7XG5leHBvcnQgY2xhc3MgT3V0ZXJHbG93TWF0ZXJpYWwgZXh0ZW5kcyBSaW1FZmZlY3RNYXRlcmlhbCB7XG4gICAgZ2V0IGV4cGFuc2lvblN0cmVuZ3RoKCkge1xuICAgICAgICByZXR1cm4gdGhpcy51bmlmb3Jtcy5leHBhbnNpb25TdHJlbmd0aC52YWx1ZTtcbiAgICB9XG4gICAgc2V0IGV4cGFuc2lvblN0cmVuZ3RoKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudW5pZm9ybXMuZXhwYW5zaW9uU3RyZW5ndGgudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gICAgaW5pdERlZmluZXMoKSB7XG4gICAgICAgIHN1cGVyLmluaXREZWZpbmVzKCk7XG4gICAgICAgIHRoaXMuZGVmaW5lcy5VU0VfTElHSFQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5kZWZpbmVzLlVTRV9FWFBBTlNJT04gPSB0cnVlO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IFNoYWRlclBob25nTWF0ZXJpYWwgfSBmcm9tIFwiLi5cIjtcbmV4cG9ydCBjbGFzcyBFeHBhbnNpb25NYXRlcmlhbCBleHRlbmRzIFNoYWRlclBob25nTWF0ZXJpYWwge1xuICAgIGdldCBleHBhbnNpb25TdHJlbmd0aCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudW5pZm9ybXMuZXhwYW5zaW9uU3RyZW5ndGgudmFsdWU7XG4gICAgfVxuICAgIHNldCBleHBhbnNpb25TdHJlbmd0aCh2YWx1ZSkge1xuICAgICAgICB0aGlzLnVuaWZvcm1zLmV4cGFuc2lvblN0cmVuZ3RoLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKHBhcmFtZXRlcnMpIHtcbiAgICAgICAgc3VwZXIobnVsbCwgbnVsbCwgcGFyYW1ldGVycyk7XG4gICAgfVxuICAgIGluaXREZWZpbmVzKCkge1xuICAgICAgICBzdXBlci5pbml0RGVmaW5lcygpO1xuICAgICAgICB0aGlzLmRlZmluZXMuVVNFX0VYUEFOU0lPTiA9IHRydWU7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgU2hhZGVyU3ByaXRlTWF0ZXJpYWwgfSBmcm9tIFwiLi4vU2hhZGVyU3ByaXRlTWF0ZXJpYWxcIjtcbmltcG9ydCBGcmFnbWVudFNoYWRlciBmcm9tIFwiLi9TcHJpdGVDbG91ZE1hdGVyaWFsLmZyYWcuZ2xzbFwiO1xuaW1wb3J0IHsgQ29sb3IsIFVuaWZvcm1zVXRpbHMgfSBmcm9tIFwidGhyZWVcIjtcbmV4cG9ydCBjbGFzcyBTcHJpdGVDbG91ZE1hdGVyaWFsIGV4dGVuZHMgU2hhZGVyU3ByaXRlTWF0ZXJpYWwge1xuICAgIGNvbnN0cnVjdG9yKHBhcmFtZXRlcnMpIHtcbiAgICAgICAgc3VwZXIobnVsbCwgRnJhZ21lbnRTaGFkZXIoKSwgcGFyYW1ldGVycyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIHVuaWZvcm1z44KS5Yid5pyf5YyW44GZ44KL44CCXG4gICAgICovXG4gICAgaW5pdFVuaWZvcm1zKCkge1xuICAgICAgICBzdXBlci5pbml0VW5pZm9ybXMoKTtcbiAgICAgICAgdGhpcy51bmlmb3JtcyA9IFVuaWZvcm1zVXRpbHMubWVyZ2UoW1xuICAgICAgICAgICAgdGhpcy51bmlmb3JtcyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICByaW1TdHJlbmd0aDogeyB2YWx1ZTogMC4yIH0sXG4gICAgICAgICAgICAgICAgYm90dG9tU3RyZW5ndGg6IHsgdmFsdWU6IDAuNzUgfSxcbiAgICAgICAgICAgICAgICByaW1Db2xvcjogeyB2YWx1ZTogbmV3IENvbG9yKDB4ZmZmZmZmKSB9LFxuICAgICAgICAgICAgICAgIHNreUNvbG9yOiB7IHZhbHVlOiBuZXcgQ29sb3IoMHhjY2NjY2MpIH0sXG4gICAgICAgICAgICAgICAgcmltQ2VudGVyOiB7IHZhbHVlOiAwLjYgfSxcbiAgICAgICAgICAgICAgICByaW1SYW5nZTogeyB2YWx1ZTogMC4xNSB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSk7XG4gICAgfVxuICAgIGluaXREZWZhdWx0U2V0dGluZyhwYXJhbWV0ZXJzKSB7XG4gICAgICAgIHN1cGVyLmluaXREZWZhdWx0U2V0dGluZyhwYXJhbWV0ZXJzKTtcbiAgICB9XG4gICAgZ2V0IHJpbUNlbnRlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudW5pZm9ybXMucmltQ2VudGVyLnZhbHVlO1xuICAgIH1cbiAgICBzZXQgcmltQ2VudGVyKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudW5pZm9ybXMucmltQ2VudGVyLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIGdldCByaW1SYW5nZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudW5pZm9ybXMucmltUmFuZ2UudmFsdWU7XG4gICAgfVxuICAgIHNldCByaW1SYW5nZSh2YWx1ZSkge1xuICAgICAgICB0aGlzLnVuaWZvcm1zLnJpbVJhbmdlLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIGdldCByaW1TdHJlbmd0aCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudW5pZm9ybXMucmltU3RyZW5ndGgudmFsdWU7XG4gICAgfVxuICAgIHNldCByaW1TdHJlbmd0aCh2YWx1ZSkge1xuICAgICAgICB0aGlzLnVuaWZvcm1zLnJpbVN0cmVuZ3RoLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIGdldCBib3R0b21TdHJlbmd0aCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudW5pZm9ybXMuYm90dG9tU3RyZW5ndGgudmFsdWU7XG4gICAgfVxuICAgIHNldCBib3R0b21TdHJlbmd0aCh2YWx1ZSkge1xuICAgICAgICB0aGlzLnVuaWZvcm1zLmJvdHRvbVN0cmVuZ3RoLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIGdldCByaW1Db2xvcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudW5pZm9ybXMucmltQ29sb3IudmFsdWU7XG4gICAgfVxuICAgIHNldCByaW1Db2xvcih2YWx1ZSkge1xuICAgICAgICB0aGlzLnVuaWZvcm1zLnJpbUNvbG9yLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIGdldCBza3lDb2xvcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudW5pZm9ybXMuc2t5Q29sb3IudmFsdWU7XG4gICAgfVxuICAgIHNldCBza3lDb2xvcih2YWx1ZSkge1xuICAgICAgICB0aGlzLnVuaWZvcm1zLnNreUNvbG9yLnZhbHVlID0gdmFsdWU7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgQW5pbWF0aW9uQ2h1bmssIFNoYWRlclBob25nTWF0ZXJpYWwsIFRpbGluZ0ZCTUNodW5rLCB9IGZyb20gXCIuLi9pbmRleFwiO1xuaW1wb3J0IEZyYWdtZW50U2hhZGVyIGZyb20gXCIuL0V4cGFuc2lvbkRpc3NvbHZlTWF0ZXJpYWwuZnJhZy5nbHNsXCI7XG5pbXBvcnQgVmVydGV4U2hhZGVyIGZyb20gXCIuL0V4cGFuc2lvbkRpc3NvbHZlTWF0ZXJpYWwudmVydC5nbHNsXCI7XG5pbXBvcnQgeyBSQUZUaWNrZXIsIFJBRlRpY2tlckV2ZW50VHlwZSB9IGZyb20gXCJAbWFzYXRvbWFraW5vL3JhZi10aWNrZXJcIjtcbmltcG9ydCB7IENvbG9yLCBVbmlmb3Jtc1V0aWxzIH0gZnJvbSBcInRocmVlXCI7XG4vKipcbiAqIEZCTeODjuOCpOOCuuOBq+OCiOOCi+OCuOOCquODoeODiOODquOBruiGqOW8teOBp+ODh+OCo+OCvuODq+ODluOCkuihjOOBhuODnuODhuODquOCouODq+OAglxuICog54iG55m644GX44Gq44GM44KJ5raI5ruF44GZ44KL44KI44GG44Gq6KGo54++44Gr44Gq44KL44CCXG4gKiDohqjlvLXjga7pgLLooYzluqblkIjjgYTjga9wcm9ncmVzc+OBp+WItuW+oeOBmeOCi+OAglxuICovXG5leHBvcnQgY2xhc3MgRXhwYW5zaW9uRGlzc29sdmVNYXRlcmlhbCBleHRlbmRzIFNoYWRlclBob25nTWF0ZXJpYWwge1xuICAgIGFkZFRpbWUoZGVsdGEpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNBbmltYXRlKSB7XG4gICAgICAgICAgICBBbmltYXRpb25DaHVuay5hZGRUaW1lKHRoaXMsIGRlbHRhKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXQgaXNBbmltYXRlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy51bmlmb3Jtcy5pc0FuaW1hdGUudmFsdWU7XG4gICAgfVxuICAgIHNldCBpc0FuaW1hdGUodmFsdWUpIHtcbiAgICAgICAgdGhpcy51bmlmb3Jtcy5pc0FuaW1hdGUudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgaWYgKHRoaXMuaXNBbmltYXRlKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXJ0QW5pbWF0aW9uKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnN0b3BBbmltYXRpb24oKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBJVGlsZWRGQk0gLy9cbiAgICBnZXQgdGlsZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnVuaWZvcm1zLnRpbGVzLnZhbHVlO1xuICAgIH1cbiAgICBzZXQgdGlsZXModmFsdWUpIHtcbiAgICAgICAgdGhpcy51bmlmb3Jtcy50aWxlcy52YWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgICBnZXQgaGFzaExvb3AoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnVuaWZvcm1zLmhhc2hMb29wLnZhbHVlO1xuICAgIH1cbiAgICBzZXQgaGFzaExvb3AodmFsdWUpIHtcbiAgICAgICAgdGhpcy51bmlmb3Jtcy5oYXNoTG9vcC52YWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgICBnZXQgYW1wKCkge1xuICAgICAgICByZXR1cm4gdGhpcy51bmlmb3Jtcy5hbXAudmFsdWU7XG4gICAgfVxuICAgIHNldCBhbXAodmFsdWUpIHtcbiAgICAgICAgdGhpcy51bmlmb3Jtcy5hbXAudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gICAgZ2V0IHNjYWxlTWF4KCkge1xuICAgICAgICByZXR1cm4gdGhpcy51bmlmb3Jtcy5zY2FsZU1heC52YWx1ZTtcbiAgICB9XG4gICAgc2V0IHNjYWxlTWF4KHZhbHVlKSB7XG4gICAgICAgIHRoaXMudW5pZm9ybXMuc2NhbGVNYXgudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gICAgZ2V0IHRpbWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnVuaWZvcm1zLnRpbWUudmFsdWU7XG4gICAgfVxuICAgIHNldCB0aW1lKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudW5pZm9ybXMudGltZS52YWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgICBnZXQgcHJvZ3Jlc3MoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnVuaWZvcm1zLnByb2dyZXNzLnZhbHVlO1xuICAgIH1cbiAgICBzZXQgcHJvZ3Jlc3ModmFsdWUpIHtcbiAgICAgICAgdGhpcy51bmlmb3Jtcy5wcm9ncmVzcy52YWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgICBnZXQgZGlzc29sdmVDb2xvcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudW5pZm9ybXMuZGlzc29sdmVDb2xvci52YWx1ZTtcbiAgICB9XG4gICAgc2V0IGRpc3NvbHZlQ29sb3IodmFsdWUpIHtcbiAgICAgICAgdGhpcy51bmlmb3Jtcy5kaXNzb2x2ZUNvbG9yLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIGdldCBkaXNzb2x2ZU91dENvbG9yKCkge1xuICAgICAgICByZXR1cm4gdGhpcy51bmlmb3Jtcy5kaXNzb2x2ZU91dENvbG9yLnZhbHVlO1xuICAgIH1cbiAgICBzZXQgZGlzc29sdmVPdXRDb2xvcih2YWx1ZSkge1xuICAgICAgICB0aGlzLnVuaWZvcm1zLmRpc3NvbHZlT3V0Q29sb3IudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcGFyYW1ldGVyc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHBhcmFtZXRlcnMpIHtcbiAgICAgICAgc3VwZXIoVmVydGV4U2hhZGVyKCksIEZyYWdtZW50U2hhZGVyKCksIHBhcmFtZXRlcnMpO1xuICAgICAgICAvLyBJQW5pbWF0YWJsZSAvL1xuICAgICAgICB0aGlzLnNwZWVkID0gLTAuNTtcbiAgICAgICAgLypcbiAgICAgICAgICogSUFuaW1hdGFibGUgaW1wbGVtZW50c1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5hbmltYXRpb25MaXN0ZW5lciA9IChlKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmFkZFRpbWUoZS5kZWx0YSAvIDEwMDApO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmlzQW5pbWF0ZSA9IHRoaXMuaXNBbmltYXRlO1xuICAgIH1cbiAgICBpbml0VW5pZm9ybXMoKSB7XG4gICAgICAgIHRoaXMudW5pZm9ybXMgPSBVbmlmb3Jtc1V0aWxzLm1lcmdlKFtcbiAgICAgICAgICAgIFNoYWRlclBob25nTWF0ZXJpYWwuZ2V0QmFzaWNVbmlmb3JtcygpLFxuICAgICAgICAgICAgVGlsaW5nRkJNQ2h1bmsuZ2V0VW5pZm9ybSgpLFxuICAgICAgICAgICAgQW5pbWF0aW9uQ2h1bmsuZ2V0VW5pZm9ybSgpLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNjYWxlTWF4OiB7IHZhbHVlOiAyMC4wIH0sXG4gICAgICAgICAgICAgICAgcHJvZ3Jlc3M6IHsgdmFsdWU6IDAuMCB9LFxuICAgICAgICAgICAgICAgIGRpc3NvbHZlQ29sb3I6IHsgdmFsdWU6IG5ldyBDb2xvcigxLjAsIDEuMCwgMS4wKSB9LFxuICAgICAgICAgICAgICAgIGRpc3NvbHZlT3V0Q29sb3I6IHsgdmFsdWU6IG5ldyBDb2xvcigwLjAsIDAuMCwgMC4wKSB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgXSk7XG4gICAgfVxuICAgIGluaXRDaHVua3MoKSB7XG4gICAgICAgIHN1cGVyLmluaXRDaHVua3MoKTtcbiAgICAgICAgVGlsaW5nRkJNQ2h1bmsucmVnaXN0ZXJDaHVuaygpO1xuICAgIH1cbiAgICBpbml0RGVmaW5lcygpIHtcbiAgICAgICAgc3VwZXIuaW5pdERlZmluZXMoKTtcbiAgICAgICAgdGhpcy5kZWZpbmVzID0gT2JqZWN0LmFzc2lnbih0aGlzLmRlZmluZXMsIFRpbGluZ0ZCTUNodW5rLmdldERlZmluZXMoKSk7XG4gICAgICAgIHRoaXMuZGVmaW5lcy5VU0VfRVhQQU5TSU9OID0gdHJ1ZTtcbiAgICB9XG4gICAgc3RhcnRBbmltYXRpb24oKSB7XG4gICAgICAgIFJBRlRpY2tlci5vbihSQUZUaWNrZXJFdmVudFR5cGUub25CZWZvcmVUaWNrLCB0aGlzLmFuaW1hdGlvbkxpc3RlbmVyKTtcbiAgICB9XG4gICAgc3RvcEFuaW1hdGlvbigpIHtcbiAgICAgICAgUkFGVGlja2VyLm9mZihSQUZUaWNrZXJFdmVudFR5cGUub25CZWZvcmVUaWNrLCB0aGlzLmFuaW1hdGlvbkxpc3RlbmVyKTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBBbmltYXRpb25DaHVuaywgU2hhZGVyUGhvbmdNYXRlcmlhbCB9IGZyb20gXCIuLlwiO1xuaW1wb3J0IEZyYWdtZW50U2hhZGVyIGZyb20gXCIuL1N3aXJsTWF0ZXJpYWwuZnJhZy5nbHNsXCI7XG5pbXBvcnQgeyBSQUZUaWNrZXIsIFJBRlRpY2tlckV2ZW50VHlwZSB9IGZyb20gXCJAbWFzYXRvbWFraW5vL3JhZi10aWNrZXJcIjtcbmltcG9ydCB7IFJlcGVhdFdyYXBwaW5nLCBVbmlmb3Jtc1V0aWxzLCBWZWN0b3IyLCB9IGZyb20gXCJ0aHJlZVwiO1xuZXhwb3J0IGNsYXNzIFN3aXJsTWF0ZXJpYWwgZXh0ZW5kcyBTaGFkZXJQaG9uZ01hdGVyaWFsIHtcbiAgICBhZGRUaW1lKGRlbHRhKSB7XG4gICAgICAgIGlmICh0aGlzLmlzQW5pbWF0ZSkge1xuICAgICAgICAgICAgQW5pbWF0aW9uQ2h1bmsuYWRkVGltZSh0aGlzLCBkZWx0YSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2V0IGlzQW5pbWF0ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudW5pZm9ybXMuaXNBbmltYXRlLnZhbHVlO1xuICAgIH1cbiAgICBzZXQgaXNBbmltYXRlKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudW5pZm9ybXMuaXNBbmltYXRlLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIGlmICh0aGlzLmlzQW5pbWF0ZSkge1xuICAgICAgICAgICAgdGhpcy5zdGFydEFuaW1hdGlvbigpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zdG9wQW5pbWF0aW9uKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgb25TZXRNYXAodmFsKSB7XG4gICAgICAgIHN1cGVyLm9uU2V0TWFwKHZhbCk7XG4gICAgICAgIHRoaXMuc2V0UmVwZWF0KHZhbCk7XG4gICAgfVxuICAgIG9uU2V0QWxwaGFNYXAodmFsdWUpIHtcbiAgICAgICAgc3VwZXIub25TZXRBbHBoYU1hcCh2YWx1ZSk7XG4gICAgICAgIHRoaXMuc2V0UmVwZWF0KHZhbHVlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICog44Oq44OU44O844OI44Oi44O844OJ44Gv5by35Yi255qE44GrUmVwZWF0V3JhcHBpbmfjgatcbiAgICAgKiBAcGFyYW0gdmFsdWVcbiAgICAgKi9cbiAgICBzZXRSZXBlYXQodmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICB2YWx1ZS53cmFwUyA9IFJlcGVhdFdyYXBwaW5nO1xuICAgICAgICAgICAgdmFsdWUud3JhcFQgPSBSZXBlYXRXcmFwcGluZztcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXQgdXZSb3RhdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudW5pZm9ybXMudXZSb3RhdGlvbi52YWx1ZTtcbiAgICB9XG4gICAgc2V0IHV2Um90YXRpb24odmFsdWUpIHtcbiAgICAgICAgdGhpcy51bmlmb3Jtcy51dlJvdGF0aW9uLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIGdldCBzd2lybFJvdGF0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy51bmlmb3Jtcy5zd2lybFJvdGF0aW9uLnZhbHVlO1xuICAgIH1cbiAgICBzZXQgc3dpcmxSb3RhdGlvbih2YWx1ZSkge1xuICAgICAgICB0aGlzLnVuaWZvcm1zLnN3aXJsUm90YXRpb24udmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gICAgZ2V0IHJhZGl1cygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudW5pZm9ybXMucmFkaXVzLnZhbHVlO1xuICAgIH1cbiAgICBzZXQgcmFkaXVzKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudW5pZm9ybXMucmFkaXVzLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIGdldCBjZW50ZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnVuaWZvcm1zLmNlbnRlci52YWx1ZTtcbiAgICB9XG4gICAgc2V0IGNlbnRlcih2YWx1ZSkge1xuICAgICAgICB0aGlzLnVuaWZvcm1zLmNlbnRlci52YWx1ZSA9IHZhbHVlO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihwYXJhbWV0ZXJzKSB7XG4gICAgICAgIHN1cGVyKG51bGwsIEZyYWdtZW50U2hhZGVyKCksIHBhcmFtZXRlcnMpO1xuICAgICAgICAvKlxuICAgICAgICAgKiBpbXBsZW1lbnRzIElBbmltYXRhYmxlXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnNwZWVkID0gLTAuMDI7XG4gICAgICAgIC8qXG4gICAgICAgICAqIElBbmltYXRhYmxlIGltcGxlbWVudHNcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuYW5pbWF0aW9uTGlzdGVuZXIgPSAoZSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5hZGRUaW1lKGUuZGVsdGEgLyAxMDAwKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5pc0FuaW1hdGUgPSB0aGlzLmlzQW5pbWF0ZTtcbiAgICB9XG4gICAgaW5pdENodW5rcygpIHtcbiAgICAgICAgc3VwZXIuaW5pdENodW5rcygpO1xuICAgICAgICBBbmltYXRpb25DaHVuay5yZWdpc3RlckNodW5rKCk7XG4gICAgfVxuICAgIGluaXRVbmlmb3JtcygpIHtcbiAgICAgICAgdGhpcy51bmlmb3JtcyA9IFVuaWZvcm1zVXRpbHMubWVyZ2UoW1xuICAgICAgICAgICAgU2hhZGVyUGhvbmdNYXRlcmlhbC5nZXRCYXNpY1VuaWZvcm1zKCksXG4gICAgICAgICAgICBBbmltYXRpb25DaHVuay5nZXRVbmlmb3JtKCksXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgdXZSb3RhdGlvbjogeyB2YWx1ZTogMC4wIH0sXG4gICAgICAgICAgICAgICAgc3dpcmxSb3RhdGlvbjogeyB2YWx1ZTogMy4xNCB9LFxuICAgICAgICAgICAgICAgIHJhZGl1czogeyB2YWx1ZTogMC41IH0sXG4gICAgICAgICAgICAgICAgY2VudGVyOiB7IHZhbHVlOiBuZXcgVmVjdG9yMigwLjUsIDAuNSkgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0pO1xuICAgIH1cbiAgICBzdGFydEFuaW1hdGlvbigpIHtcbiAgICAgICAgUkFGVGlja2VyLm9uKFJBRlRpY2tlckV2ZW50VHlwZS5vbkJlZm9yZVRpY2ssIHRoaXMuYW5pbWF0aW9uTGlzdGVuZXIpO1xuICAgIH1cbiAgICBzdG9wQW5pbWF0aW9uKCkge1xuICAgICAgICBSQUZUaWNrZXIub2ZmKFJBRlRpY2tlckV2ZW50VHlwZS5vbkJlZm9yZVRpY2ssIHRoaXMuYW5pbWF0aW9uTGlzdGVuZXIpO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IEFuaW1hdGlvbkNodW5rLCBTaGFkZXJQaG9uZ01hdGVyaWFsIH0gZnJvbSBcIi4uL1wiO1xuaW1wb3J0IEZyYWdtZW50U2hhZGVyIGZyb20gXCIuL0NlbGx1bGFyTm9pc2VNYXRlcmlhbC5mcmFnLmdsc2xcIjtcbmltcG9ydCB7IFJBRlRpY2tlciwgUkFGVGlja2VyRXZlbnRUeXBlIH0gZnJvbSBcIkBtYXNhdG9tYWtpbm8vcmFmLXRpY2tlclwiO1xuaW1wb3J0IHsgVW5pZm9ybXNVdGlscyB9IGZyb20gXCJ0aHJlZVwiO1xuZXhwb3J0IGNsYXNzIENlbGx1bGFyTm9pc2VNYXRlcmlhbCBleHRlbmRzIFNoYWRlclBob25nTWF0ZXJpYWwge1xuICAgIGFkZFRpbWUoZGVsdGEpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNBbmltYXRlKSB7XG4gICAgICAgICAgICBBbmltYXRpb25DaHVuay5hZGRUaW1lKHRoaXMsIGRlbHRhKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXQgaXNBbmltYXRlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy51bmlmb3Jtcy5pc0FuaW1hdGUudmFsdWU7XG4gICAgfVxuICAgIHNldCBpc0FuaW1hdGUodmFsdWUpIHtcbiAgICAgICAgdGhpcy51bmlmb3Jtcy5pc0FuaW1hdGUudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgaWYgKHRoaXMuaXNBbmltYXRlKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXJ0QW5pbWF0aW9uKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnN0b3BBbmltYXRpb24oKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXQgZ3JpZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudW5pZm9ybXMuZ3JpZC52YWx1ZTtcbiAgICB9XG4gICAgc2V0IGdyaWQodmFsdWUpIHtcbiAgICAgICAgdGhpcy51bmlmb3Jtcy5ncmlkLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIGdldCBkaXZpc2lvblNjYWxlWCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudW5pZm9ybXMuZGl2aXNpb25TY2FsZVgudmFsdWU7XG4gICAgfVxuICAgIHNldCBkaXZpc2lvblNjYWxlWCh2YWx1ZSkge1xuICAgICAgICB0aGlzLnVuaWZvcm1zLmRpdmlzaW9uU2NhbGVYLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKHBhcmFtZXRlcnMpIHtcbiAgICAgICAgc3VwZXIobnVsbCwgRnJhZ21lbnRTaGFkZXIoKSwgcGFyYW1ldGVycyk7XG4gICAgICAgIC8qXG4gICAgICAgICAqIGltcGxlbWVudHMgSUFuaW1hdGFibGVcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuc3BlZWQgPSAtMC4wMjtcbiAgICAgICAgLypcbiAgICAgICAgICogSUFuaW1hdGFibGUgaW1wbGVtZW50c1xuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5hbmltYXRpb25MaXN0ZW5lciA9IChlKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmFkZFRpbWUoZS5kZWx0YSAvIDEwMDApO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmlzQW5pbWF0ZSA9IHRoaXMuaXNBbmltYXRlO1xuICAgIH1cbiAgICBpbml0Q2h1bmtzKCkge1xuICAgICAgICBzdXBlci5pbml0Q2h1bmtzKCk7XG4gICAgICAgIEFuaW1hdGlvbkNodW5rLnJlZ2lzdGVyQ2h1bmsoKTtcbiAgICB9XG4gICAgaW5pdFVuaWZvcm1zKCkge1xuICAgICAgICB0aGlzLnVuaWZvcm1zID0gVW5pZm9ybXNVdGlscy5tZXJnZShbXG4gICAgICAgICAgICBTaGFkZXJQaG9uZ01hdGVyaWFsLmdldEJhc2ljVW5pZm9ybXMoKSxcbiAgICAgICAgICAgIEFuaW1hdGlvbkNodW5rLmdldFVuaWZvcm0oKSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBncmlkOiB7IHZhbHVlOiAzLjAgfSxcbiAgICAgICAgICAgICAgICBkaXZpc2lvblNjYWxlWDogeyB2YWx1ZTogMS4wIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICBdKTtcbiAgICB9XG4gICAgc3RhcnRBbmltYXRpb24oKSB7XG4gICAgICAgIFJBRlRpY2tlci5vbihSQUZUaWNrZXJFdmVudFR5cGUub25CZWZvcmVUaWNrLCB0aGlzLmFuaW1hdGlvbkxpc3RlbmVyKTtcbiAgICB9XG4gICAgc3RvcEFuaW1hdGlvbigpIHtcbiAgICAgICAgUkFGVGlja2VyLm9mZihSQUZUaWNrZXJFdmVudFR5cGUub25CZWZvcmVUaWNrLCB0aGlzLmFuaW1hdGlvbkxpc3RlbmVyKTtcbiAgICB9XG59XG4iLCIvKipcbiAqIOODqeOCpOODiOOBq+W9semfv+OCkuWPl+OBkeOBquOBhOOAgeOCveODquODg+ODieOBquWIh+aWremdouOCkuOCguOBpOODnuODhuODquOCouODq1xuICovXG5pbXBvcnQgeyBTaGFkZXJQaG9uZ01hdGVyaWFsIH0gZnJvbSBcIi4uXCI7XG5pbXBvcnQgRnJhZ21lbnRTaGFkZXIgZnJvbSBcIi4vU29saWRDbGlwcGluZ01hdGVyaWFsLmZyYWcuZ2xzbFwiO1xuaW1wb3J0IHsgQ29sb3IsIERvdWJsZVNpZGUsIFVuaWZvcm1zVXRpbHMsIH0gZnJvbSBcInRocmVlXCI7XG5leHBvcnQgY2xhc3MgU29saWRDbGlwcGluZ01hdGVyaWFsIGV4dGVuZHMgU2hhZGVyUGhvbmdNYXRlcmlhbCB7XG4gICAgZ2V0IGN1dFNlY3Rpb25Db2xvcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudW5pZm9ybXMuY3V0U2VjdGlvbkNvbG9yLnZhbHVlO1xuICAgIH1cbiAgICBzZXQgY3V0U2VjdGlvbkNvbG9yKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudW5pZm9ybXMuY3V0U2VjdGlvbkNvbG9yLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKHBhcmFtZXRlcnMpIHtcbiAgICAgICAgc3VwZXIobnVsbCwgRnJhZ21lbnRTaGFkZXIoKSwgcGFyYW1ldGVycyk7XG4gICAgfVxuICAgIGluaXRVbmlmb3JtcygpIHtcbiAgICAgICAgdGhpcy51bmlmb3JtcyA9IFVuaWZvcm1zVXRpbHMubWVyZ2UoW1xuICAgICAgICAgICAgU2hhZGVyUGhvbmdNYXRlcmlhbC5nZXRCYXNpY1VuaWZvcm1zKCksXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgY3V0U2VjdGlvbkNvbG9yOiB7IHZhbHVlOiBuZXcgQ29sb3IoMS4wLCAxLjAsIDEuMCkgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0pO1xuICAgIH1cbiAgICBpbml0RGVmYXVsdFNldHRpbmcocGFyYW1ldGVycykge1xuICAgICAgICBzdXBlci5pbml0RGVmYXVsdFNldHRpbmcocGFyYW1ldGVycyk7XG4gICAgICAgIHRoaXMuY2xpcHBpbmcgPSB0cnVlO1xuICAgICAgICB0aGlzLnNpZGUgPSBEb3VibGVTaWRlO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IEdyaWRNYXRlcmlhbCB9IGZyb20gXCIuLi9HcmlkTWF0ZXJpYWxcIjtcbmltcG9ydCB7IEhleEdyaWRDaHVuayB9IGZyb20gXCIuLi9pbmRleFwiO1xuaW1wb3J0IEZyYWdtZW50U2hhZGVyIGZyb20gXCIuL0hleERpc3NvbHZlTWF0ZXJpYWwuZnJhZy5nbHNsXCI7XG5pbXBvcnQgeyBDb2xvciwgVW5pZm9ybXNVdGlscyB9IGZyb20gXCJ0aHJlZVwiO1xuLyoqXG4gKiDlha3op5LlvaLjgrDjg6rjg4Pjg4njg57jg4bjg6rjgqLjg6tcbiAqL1xuZXhwb3J0IGNsYXNzIEhleERpc3NvbHZlTWF0ZXJpYWwgZXh0ZW5kcyBHcmlkTWF0ZXJpYWwge1xuICAgIC8qKlxuICAgICAqIOODh+OCo+OCvuODq+ODluOBrumAsuihjOW6puOCkuaMh+WumuOBmeOCi+OAglxuICAgICAqIDEuMOOBp+ODh+OCo+OCvuODq+ODluWujOS6huOBqOOBquOCi+OAglxuICAgICAqL1xuICAgIGdldCBwcm9ncmVzcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudW5pZm9ybXMucHJvZ3Jlc3MudmFsdWU7XG4gICAgfVxuICAgIHNldCBwcm9ncmVzcyh2YWx1ZSkge1xuICAgICAgICB0aGlzLnVuaWZvcm1zLnByb2dyZXNzLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOODh+OCo+OCvuODq+ODluOBrumWi+Wni+OBmuOCjOOCkuaMh+WumuOBmeOCi+OAglxuICAgICAqIOacgOW+jOOBq+ODh+OCo+OCvuODq+ODluOBjOWni+OBvuOCi+OCsOODquODg+ODieOBjOOAgXByb2dyZXNz44Gu44Gp44Gu5YCk44Gn6ZaL5aeL44GV44KM44KL44GL44KS5oSP5ZGz44GZ44KL44CCXG4gICAgICogZXgpXG4gICAgICogZGVsYXkgPSAwLjjjga7mmYLjgIHmnIDlvozjga7jgrDjg6rjg4Pjg4njga9wcm9ncmVzcyA9IDAuOCB+IDEuMOOBp+ODh+OCo+OCvuODq+ODluOBmeOCi+OAglxuICAgICAqL1xuICAgIGdldCBkZWxheSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudW5pZm9ybXMuZGVsYXkudmFsdWU7XG4gICAgfVxuICAgIHNldCBkZWxheSh2YWx1ZSkge1xuICAgICAgICB0aGlzLnVuaWZvcm1zLmRlbGF5LnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIGdldCBpc0FzY2VuZGluZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudW5pZm9ybXMuaXNBc2NlbmRpbmcudmFsdWU7XG4gICAgfVxuICAgIHNldCBpc0FzY2VuZGluZyh2YWx1ZSkge1xuICAgICAgICB0aGlzLnVuaWZvcm1zLmlzQXNjZW5kaW5nLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOOCsOODquODg+ODiee3muOBruWkquOBlVxuICAgICAqIDAuMOOBp+e3muOBquOBl+OAgTAuNeOBp+OCsOODquODg+ODiemdouOBquOBl+OBq+OBquOCi+OAglxuICAgICAqL1xuICAgIGdldCBncmlkV2VpZ2h0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy51bmlmb3Jtcy5ncmlkV2VpZ2h0LnZhbHVlO1xuICAgIH1cbiAgICBzZXQgZ3JpZFdlaWdodCh2YWx1ZSkge1xuICAgICAgICB0aGlzLnVuaWZvcm1zLmdyaWRXZWlnaHQudmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gICAgZ2V0IGdyaWRFbWlzc2l2ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudW5pZm9ybXMuZ3JpZEVtaXNzaXZlLnZhbHVlO1xuICAgIH1cbiAgICBzZXQgZ3JpZEVtaXNzaXZlKHZhbHVlKSB7XG4gICAgICAgIHRoaXMudW5pZm9ybXMuZ3JpZEVtaXNzaXZlLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIOODh+OCo+OCvuODq+ODluS4reOBq+ihqOekuuOBleOCjOOCi+OCsOODreODvOODqeOCpOODs+OBruWkquOBlVxuICAgICAqIOaVsOWApOOBr+OCsOODquODg+ODiee3muOBruWkquOBleOBruWAjeeOh+OAgTIuMOOBquOCieOCsOODreODvOOCouOCpuODiOODqeOCpOODs+OBr+ODh+OCo+OCvuODq+ODluODqeOCpOODs+OBruWAjeOBruWkquOBleOBq+OBquOCi+OAglxuICAgICAqXG4gICAgICog5rOo5oSPIDogaXNSZXZlcnNlZCA9IHRydWUg44GL44GkZ3JpZEVtaXNzaXZlV2VpZ2h044GMMi4w5Lul5LiL44Gu5aC05ZCI44CB44Kw44Ot44O857ea44GM5raI44GI44Gq44GP44Gq44KL44CCXG4gICAgICog5Y+N6Lui44GV44Gb44KL5aC05ZCI44Gv44CBMi4w5Lul5LiK44KS5oyH5a6a44GZ44KL44GT44Go44CCXG4gICAgICovXG4gICAgZ2V0IGdyaWRFbWlzc2l2ZVdlaWdodCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudW5pZm9ybXMuZ3JpZEVtaXNzaXZlV2VpZ2h0LnZhbHVlO1xuICAgIH1cbiAgICBzZXQgZ3JpZEVtaXNzaXZlV2VpZ2h0KHZhbHVlKSB7XG4gICAgICAgIHRoaXMudW5pZm9ybXMuZ3JpZEVtaXNzaXZlV2VpZ2h0LnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKHBhcmFtZXRlcnMpIHtcbiAgICAgICAgc3VwZXIobnVsbCwgRnJhZ21lbnRTaGFkZXIoKSwgcGFyYW1ldGVycyk7XG4gICAgfVxuICAgIGluaXRVbmlmb3JtcygpIHtcbiAgICAgICAgdGhpcy51bmlmb3JtcyA9IFVuaWZvcm1zVXRpbHMubWVyZ2UoW1xuICAgICAgICAgICAgR3JpZE1hdGVyaWFsLmdldEJhc2ljVW5pZm9ybXMoKSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBwcm9ncmVzczogeyB2YWx1ZTogMC4wIH0sXG4gICAgICAgICAgICAgICAgZGVsYXk6IHsgdmFsdWU6IDAuOCB9LFxuICAgICAgICAgICAgICAgIGdyaWRXZWlnaHQ6IHsgdmFsdWU6IDAuMCB9LFxuICAgICAgICAgICAgICAgIGlzQXNjZW5kaW5nOiB7IHZhbHVlOiB0cnVlIH0sXG4gICAgICAgICAgICAgICAgZ3JpZEVtaXNzaXZlOiB7IHZhbHVlOiBuZXcgQ29sb3IoMHgwMDAwMDApIH0sXG4gICAgICAgICAgICAgICAgZ3JpZEVtaXNzaXZlV2VpZ2h0OiB7IHZhbHVlOiAyLjUgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIF0pO1xuICAgIH1cbiAgICBpbml0Q2h1bmtzKCkge1xuICAgICAgICBzdXBlci5pbml0Q2h1bmtzKCk7XG4gICAgICAgIEhleEdyaWRDaHVuay5yZWdpc3RlckNodW5rKCk7XG4gICAgfVxufVxuIiwiZXhwb3J0ICogZnJvbSBcIi4vU2hhZGVyUGhvbmdNYXRlcmlhbFwiO1xuZXhwb3J0ICogZnJvbSBcIi4vU2hhZGVyU3ByaXRlTWF0ZXJpYWxcIjtcbmV4cG9ydCAqIGZyb20gXCIuL1NoYWRlckJhc2ljTWF0ZXJpYWxcIjtcbmV4cG9ydCAqIGZyb20gXCIuL1NoYWRlckxpbmVNYXRlcmlhbFwiO1xuZXhwb3J0ICogZnJvbSBcIi4vY2h1bmsvXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9jb250b3VyL0NvbnRvdXJNYXRlcmlhbFwiO1xuZXhwb3J0ICogZnJvbSBcIi4vY3Jvc3NHcmlkL0Nyb3NzR3JpZE1hdGVyaWFsXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9oYWxmdG9uZUdyaWQvSGFsZnRvbmVHcmlkTWF0ZXJpYWxcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2hleEdyaWQvSGV4R3JpZE1hdGVyaWFsXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9zcXVhcmVHcmlkL1NxdWFyZUdyaWRNYXRlcmlhbFwiO1xuZXhwb3J0ICogZnJvbSBcIi4vc2t5Q2xvdWQvU2t5Q2xvdWRNYXRlcmlhbFwiO1xuZXhwb3J0ICogZnJvbSBcIi4vZmJtRGlzc29sdmUvRkJNRGlzc29sdmVNYXRlcmlhbFwiO1xuZXhwb3J0ICogZnJvbSBcIi4vZmJtRmlyZS9GQk1GaXJlTWF0ZXJpYWxcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3JpbUJhc2ljL1JpbUJhc2ljTWF0ZXJpYWxcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3JpbUVmZmVjdC9SaW1FZmZlY3RNYXRlcmlhbFwiO1xuZXhwb3J0ICogZnJvbSBcIi4vcmltRWZmZWN0L091dGVyR2xvd01hdGVyaWFsXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9leHBhbnNpb24vRXhwYW5zaW9uTWF0ZXJpYWxcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3Nwcml0ZUNsb3VkL1Nwcml0ZUNsb3VkTWF0ZXJpYWxcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2V4cGFuc2lvbkRpc3NvbHZlL0V4cGFuc2lvbkRpc3NvbHZlTWF0ZXJpYWxcIjtcbmV4cG9ydCAqIGZyb20gXCIuL3N3aXJsL1N3aXJsTWF0ZXJpYWxcIjtcbmV4cG9ydCAqIGZyb20gXCIuL2NlbGx1bGFyTm9pc2UvQ2VsbHVsYXJOb2lzZU1hdGVyaWFsXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9zb2xpZENsaXBwaW5nL1NvbGlkQ2xpcHBpbmdNYXRlcmlhbFwiO1xuZXhwb3J0ICogZnJvbSBcIi4vaGV4RGlzc29sdmUvSGV4RGlzc29sdmVNYXRlcmlhbFwiO1xuIiwiaW1wb3J0IHsgRGlyZWN0aW9ucyB9IGZyb20gXCIuLlwiO1xuaW1wb3J0IHsgVGV4dHVyZUxvYWRlciB9IGZyb20gXCJ0aHJlZVwiO1xuXG5leHBvcnQgY2xhc3MgQ29tbW9uR1VJIHtcbiAgc3RhdGljIGluaXRDb2xvckdVSShmb2xkZXIsIG1hdCwgcHJvcE5hbWUgPSBcImNvbG9yXCIpIHtcbiAgICBjb25zdCBwcm9wID0ge307XG4gICAgY29uc3QgdGFyZ2V0Q29sb3IgPSBtYXRbcHJvcE5hbWVdO1xuICAgIHByb3BbcHJvcE5hbWVdID0gdGFyZ2V0Q29sb3IuZ2V0SGV4KCk7XG4gICAgZm9sZGVyLmFkZENvbG9yKHByb3AsIHByb3BOYW1lKS5vbkNoYW5nZSgodmFsKSA9PiB7XG4gICAgICB0YXJnZXRDb2xvci5zZXRIZXgodmFsKTtcbiAgICB9KTtcbiAgICByZXR1cm4gcHJvcDtcbiAgfVxuXG4gIHN0YXRpYyBpbml0QmFzaWNNYXRlcmlhbEdVSShndWksIG1hdCwgZm9sZGVyTmFtZSA9IFwiTWF0ZXJpYWxcIikge1xuICAgIGNvbnN0IGZvbGRlciA9IGd1aS5hZGRGb2xkZXIoZm9sZGVyTmFtZSk7XG4gICAgdGhpcy5pbml0TWF0ZXJpYWxGb2xkZXIoZm9sZGVyLCBtYXQpO1xuICAgIGZvbGRlci5vcGVuKCk7XG4gICAgcmV0dXJuIGZvbGRlcjtcbiAgfVxuXG4gIHN0YXRpYyBpbml0TWF0ZXJpYWxHVUkoZ3VpLCBtYXQsIGZvbGRlck5hbWUgPSBcIk1hdGVyaWFsXCIpIHtcbiAgICBjb25zdCBmb2xkZXIgPSB0aGlzLmluaXRCYXNpY01hdGVyaWFsR1VJKGd1aSwgbWF0LCBmb2xkZXJOYW1lKTtcbiAgICB0aGlzLmluaXRDb2xvckdVSShmb2xkZXIsIG1hdCwgXCJlbWlzc2l2ZVwiKTtcbiAgfVxuXG4gIHN0YXRpYyBpbml0TWF0ZXJpYWxGb2xkZXIoZm9sZGVyLCBtYXQpIHtcbiAgICB0aGlzLmluaXRDb2xvckdVSShmb2xkZXIsIG1hdCk7XG4gICAgZm9sZGVyLmFkZChtYXQsIFwidHJhbnNwYXJlbnRcIik7XG4gICAgZm9sZGVyLmFkZChtYXQsIFwidW5pZm9ybU9wYWNpdHlcIiwgMC4wLCAxLjApO1xuICB9XG5cbiAgc3RhdGljIGluaXRTcHJpdGVNYXRlcmlhbEdVSShndWksIG1hdCwgZm9sZGVyTmFtZSA9IFwiTWF0ZXJpYWxcIikge1xuICAgIGNvbnN0IGZvbGRlciA9IGd1aS5hZGRGb2xkZXIoZm9sZGVyTmFtZSk7XG4gICAgdGhpcy5pbml0TWF0ZXJpYWxGb2xkZXIoZm9sZGVyLCBtYXQpO1xuICAgIGZvbGRlci5vcGVuKCk7XG4gIH1cblxuICBzdGF0aWMgaW5pdEdyaWRNYXRlcmlhbEdVSShndWksIG1hdCkge1xuICAgIHRoaXMuaW5pdE1hdGVyaWFsR1VJKGd1aSwgbWF0KTtcblxuICAgIGNvbnN0IHByb3AgPSB7XG4gICAgICBtYXNrOiBcIlwiLFxuICAgICAgYWxwaGFNYXA6IFwiXCIsXG4gICAgfTtcblxuICAgIGNvbnN0IGZvbGRlciA9IGd1aS5hZGRGb2xkZXIoXCJXYXZ5R3JpZE1hdGVyaWFsXCIpO1xuXG4gICAgZm9sZGVyLmFkZChtYXQsIFwiaXNSZXZlcnNlZFwiKTtcbiAgICBmb2xkZXIuYWRkKG1hdCwgXCJkaXZpc2lvblwiLCAyLjAsIDI1Ni4wKS5zdGVwKDEpO1xuICAgIGZvbGRlci5hZGQobWF0LCBcImRpdmlzaW9uU2NhbGVYXCIsIDAuMCwgNC4wKS5zdGVwKDEpO1xuXG4gICAgZm9sZGVyXG4gICAgICAuYWRkKHByb3AsIFwibWFza1wiLCB7XG4gICAgICAgIG5vbmU6IFwiXCIsXG4gICAgICAgIGVhcnRoOiBcIi4vdGV4dHVyZXMvbGFuZG1hc2sucG5nXCIsXG4gICAgICB9KVxuICAgICAgLm9uQ2hhbmdlKCh2YWwpID0+IHtcbiAgICAgICAgaWYgKHZhbCA9PT0gXCJcIikge1xuICAgICAgICAgIG1hdC5tYXNrVGV4dHVyZSA9IG51bGw7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbWF0Lm1hc2tUZXh0dXJlID0gbmV3IFRleHR1cmVMb2FkZXIoKS5sb2FkKHZhbCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgZm9sZGVyXG4gICAgICAuYWRkKHByb3AsIFwiYWxwaGFNYXBcIiwge1xuICAgICAgICBub25lOiBcIlwiLFxuICAgICAgICBlYXJ0aDogXCIuL3RleHR1cmVzL2xhbmRtYXNrLnBuZ1wiLFxuICAgICAgfSlcbiAgICAgIC5vbkNoYW5nZSgodmFsKSA9PiB7XG4gICAgICAgIGlmICh2YWwgPT09IFwiXCIpIHtcbiAgICAgICAgICBtYXQuYWxwaGFNYXAgPSBudWxsO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG1hdC5hbHBoYU1hcCA9IG5ldyBUZXh0dXJlTG9hZGVyKCkubG9hZCh2YWwpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgIGZvbGRlci5vcGVuKCk7XG4gICAgcmV0dXJuIGZvbGRlcjtcbiAgfVxuXG4gIHN0YXRpYyBpbml0V2F2eU1hdGVyaWFsR1VJKGd1aSwgbWF0KSB7XG4gICAgY29uc3QgZm9sZGVyID0gdGhpcy5pbml0R3JpZE1hdGVyaWFsR1VJKGd1aSwgbWF0KTtcblxuICAgIGNvbnN0IGFuaW1hdGlvbkZvbGRlciA9IGZvbGRlci5hZGRGb2xkZXIoXCJXYXZ5QW5pbWF0aW9uXCIpO1xuICAgIGFuaW1hdGlvbkZvbGRlci5hZGQobWF0LCBcImlzQW5pbWF0ZVwiKTtcbiAgICBhbmltYXRpb25Gb2xkZXIuYWRkKG1hdCwgXCJzcGVlZFwiLCAtMiwgMik7XG4gICAgYW5pbWF0aW9uRm9sZGVyLmFkZChtYXQsIFwid2F2ZUZyZXF1ZW5jeVwiLCAwLjAsIDEuMCk7XG4gICAgYW5pbWF0aW9uRm9sZGVyLmFkZChtYXQsIFwid2F2ZVBvd1wiLCAwLjAsIDQuMCk7XG4gICAgYW5pbWF0aW9uRm9sZGVyLmFkZChtYXQsIFwiZGlyZWN0aW9uXCIsIHtcbiAgICAgIGhvcml6b250YWw6IERpcmVjdGlvbnMuaG9yaXpvbnRhbCxcbiAgICAgIHZlcnRpY2FsOiBEaXJlY3Rpb25zLnZlcnRpY2FsLFxuICAgICAgcmFkaWFsOiBEaXJlY3Rpb25zLnJhZGlhbCxcbiAgICB9KTtcbiAgICBhbmltYXRpb25Gb2xkZXIuYWRkKG1hdCwgXCJyYWlzZWRCb3R0b21cIiwgMC4wLCAxLjApO1xuICAgIGFuaW1hdGlvbkZvbGRlci5vcGVuKCk7XG4gIH1cblxuICBzdGF0aWMgaW5pdEFuaW1hdGlvbkdVSShndWksIG1hdCwgZm9sZGVyTmFtZSA9IFwiQW5pbWF0aW9uXCIpIHtcbiAgICBjb25zdCBmb2xkZXIgPSBndWkuYWRkRm9sZGVyKGZvbGRlck5hbWUpO1xuICAgIGZvbGRlci5hZGQobWF0LCBcImlzQW5pbWF0ZVwiKTtcbiAgICBmb2xkZXIuYWRkKG1hdCwgXCJzcGVlZFwiLCAtMiwgMik7XG4gICAgZm9sZGVyLm9wZW4oKTtcbiAgfVxuXG4gIHN0YXRpYyBpbml0UmltR1VJKGd1aSwgbWF0LCBmb2xkZXJOYW1lID0gXCJSaW0gRWZmZWN0IE1hdGVyaWFsXCIpIHtcbiAgICBjb25zdCBmb2xkZXIgPSBndWkuYWRkRm9sZGVyKGZvbGRlck5hbWUpO1xuICAgIENvbW1vbkdVSS5pbml0Q29sb3JHVUkoZm9sZGVyLCBtYXQsIFwicmltQ29sb3JcIik7XG4gICAgZm9sZGVyLmFkZChtYXQsIFwicmltU3RyZW5ndGhcIiwgMC4wLCA0LjApLnN0ZXAoMC4wMSk7XG4gICAgZm9sZGVyLmFkZChtYXQsIFwicmltUG93XCIsIDAuMCwgNC4wKS5zdGVwKDAuMDEpO1xuXG4gICAgQ29tbW9uR1VJLmluaXRDb2xvckdVSShmb2xkZXIsIG1hdCwgXCJpbnNpZGVDb2xvclwiKTtcbiAgICBmb2xkZXIuYWRkKG1hdCwgXCJpbnNpZGVTdHJlbmd0aFwiLCAwLjAsIDQuMCkuc3RlcCgwLjAxKTtcbiAgICBmb2xkZXIuYWRkKG1hdCwgXCJpbnNpZGVQb3dcIiwgMC4wLCA4LjApLnN0ZXAoMC4wMSk7XG4gICAgZm9sZGVyLm9wZW4oKTtcbiAgfVxuXG4gIHN0YXRpYyBpbml0RXhwYW5zaW9uR1VJKGd1aSwgbWF0LCBmb2xkZXJOYW1lID0gXCJFeHBhbnNpb25NYXRlcmlhbFwiKSB7XG4gICAgY29uc3QgZm9sZGVyID0gZ3VpLmFkZEZvbGRlcihcIkV4cGFuc2lvbk1hdGVyaWFsXCIpO1xuICAgIGNvbnN0IGFtcFJhbmdlID0gMTIuMDtcbiAgICBmb2xkZXIuYWRkKG1hdCwgXCJleHBhbnNpb25TdHJlbmd0aFwiLCAtYW1wUmFuZ2UsIGFtcFJhbmdlKS5zdGVwKDAuMDEpO1xuICAgIGZvbGRlci5vcGVuKCk7XG4gIH1cblxuICBzdGF0aWMgaW5pdEZCTVRpbGluZ0dVSShndWksIG1hdCwgZm9sZGVyTmFtZSA9IFwiRkJNIFRpbGluZ1wiKSB7XG4gICAgY29uc3QgZm9sZGVyID0gZ3VpLmFkZEZvbGRlcihcIkZCTSBUaWxpbmdcIik7XG4gICAgZm9sZGVyLmFkZChtYXQsIFwidGlsZXNcIiwgMS4wLCA4LjApLnN0ZXAoMS4wKTtcbiAgICBmb2xkZXIuYWRkKG1hdCwgXCJoYXNoTG9vcFwiLCAyLjAsIDE2LjApLnN0ZXAoMS4wKTtcbiAgICBmb2xkZXIuYWRkKG1hdCwgXCJhbXBcIiwgMC4wLCAyLjApLnN0ZXAoMC4wMSk7XG4gICAgZm9sZGVyLm9wZW4oKTtcbiAgfVxuXG4gIHN0YXRpYyBpbml0U2t5R1VJKGd1aSwgc2t5LCBzdW5TcGhlcmUsIHJlbmRlcmVyKSB7XG4gICAgY29uc3QgZWZmZWN0Q29udHJvbGxlciA9IHtcbiAgICAgIHR1cmJpZGl0eTogMTAsXG4gICAgICByYXlsZWlnaDogMC4xNSxcbiAgICAgIG1pZUNvZWZmaWNpZW50OiAwLjAwNSxcbiAgICAgIG1pZURpcmVjdGlvbmFsRzogMC44LFxuICAgICAgaW5jbGluYXRpb246IDAuMDcsIC8vIGVsZXZhdGlvbiAvIGluY2xpbmF0aW9uXG4gICAgICBhemltdXRoOiAwLjI1LCAvLyBGYWNpbmcgZnJvbnQsXG4gICAgICBleHBvc3VyZTogMC43NSxcbiAgICB9O1xuXG4gICAgY29uc3QgZGlzdGFuY2UgPSA0MDAwMDA7XG5cbiAgICBmdW5jdGlvbiBndWlDaGFuZ2VkKCkge1xuICAgICAgY29uc3QgdW5pZm9ybXMgPSBza3kubWF0ZXJpYWwudW5pZm9ybXM7XG4gICAgICB1bmlmb3Jtc1tcInR1cmJpZGl0eVwiXS52YWx1ZSA9IGVmZmVjdENvbnRyb2xsZXIudHVyYmlkaXR5O1xuICAgICAgdW5pZm9ybXNbXCJyYXlsZWlnaFwiXS52YWx1ZSA9IGVmZmVjdENvbnRyb2xsZXIucmF5bGVpZ2g7XG4gICAgICB1bmlmb3Jtc1tcIm1pZUNvZWZmaWNpZW50XCJdLnZhbHVlID0gZWZmZWN0Q29udHJvbGxlci5taWVDb2VmZmljaWVudDtcbiAgICAgIHVuaWZvcm1zW1wibWllRGlyZWN0aW9uYWxHXCJdLnZhbHVlID0gZWZmZWN0Q29udHJvbGxlci5taWVEaXJlY3Rpb25hbEc7XG4gICAgICBjb25zdCB0aGV0YSA9IE1hdGguUEkgKiAoZWZmZWN0Q29udHJvbGxlci5pbmNsaW5hdGlvbiAtIDAuNSk7XG4gICAgICBjb25zdCBwaGkgPSAyICogTWF0aC5QSSAqIChlZmZlY3RDb250cm9sbGVyLmF6aW11dGggLSAwLjUpO1xuICAgICAgc3VuU3BoZXJlLnBvc2l0aW9uLnggPSBkaXN0YW5jZSAqIE1hdGguY29zKHBoaSk7XG4gICAgICBzdW5TcGhlcmUucG9zaXRpb24ueSA9IGRpc3RhbmNlICogTWF0aC5zaW4ocGhpKSAqIE1hdGguc2luKHRoZXRhKTtcbiAgICAgIHN1blNwaGVyZS5wb3NpdGlvbi56ID0gZGlzdGFuY2UgKiBNYXRoLnNpbihwaGkpICogTWF0aC5jb3ModGhldGEpO1xuICAgICAgdW5pZm9ybXNbXCJzdW5Qb3NpdGlvblwiXS52YWx1ZS5jb3B5KHN1blNwaGVyZS5wb3NpdGlvbik7XG5cbiAgICAgIHJlbmRlcmVyLnRvbmVNYXBwaW5nRXhwb3N1cmUgPSBlZmZlY3RDb250cm9sbGVyLmV4cG9zdXJlO1xuICAgIH1cbiAgICBndWlDaGFuZ2VkKCk7XG5cbiAgICBjb25zdCBmb2xkZXIgPSBndWkuYWRkRm9sZGVyKFwiU2t5XCIpO1xuICAgIGZvbGRlclxuICAgICAgLmFkZChlZmZlY3RDb250cm9sbGVyLCBcInR1cmJpZGl0eVwiLCAxLjAsIDIwLjAsIDAuMSlcbiAgICAgIC5vbkNoYW5nZShndWlDaGFuZ2VkKTtcbiAgICBmb2xkZXJcbiAgICAgIC5hZGQoZWZmZWN0Q29udHJvbGxlciwgXCJyYXlsZWlnaFwiLCAwLjAsIDQsIDAuMDAxKVxuICAgICAgLm9uQ2hhbmdlKGd1aUNoYW5nZWQpO1xuICAgIGZvbGRlclxuICAgICAgLmFkZChlZmZlY3RDb250cm9sbGVyLCBcIm1pZUNvZWZmaWNpZW50XCIsIDAuMCwgMC4xLCAwLjAwMSlcbiAgICAgIC5vbkNoYW5nZShndWlDaGFuZ2VkKTtcbiAgICBmb2xkZXJcbiAgICAgIC5hZGQoZWZmZWN0Q29udHJvbGxlciwgXCJtaWVEaXJlY3Rpb25hbEdcIiwgMC4wLCAxLCAwLjAwMSlcbiAgICAgIC5vbkNoYW5nZShndWlDaGFuZ2VkKTtcbiAgICBmb2xkZXJcbiAgICAgIC5hZGQoZWZmZWN0Q29udHJvbGxlciwgXCJpbmNsaW5hdGlvblwiLCAwLCAxLCAwLjAwMDEpXG4gICAgICAub25DaGFuZ2UoZ3VpQ2hhbmdlZCk7XG4gICAgZm9sZGVyLmFkZChlZmZlY3RDb250cm9sbGVyLCBcImF6aW11dGhcIiwgMCwgMSwgMC4wMDAxKS5vbkNoYW5nZShndWlDaGFuZ2VkKTtcbiAgICBmb2xkZXIuYWRkKGVmZmVjdENvbnRyb2xsZXIsIFwiZXhwb3N1cmVcIiwgMCwgMSwgMC4wMDAxKS5vbkNoYW5nZShndWlDaGFuZ2VkKTtcbiAgICBmb2xkZXIub3BlbigpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBDb21tb25HVUkgfSBmcm9tIFwiLi9Db21tb25HVUlcIjtcbmltcG9ydCB7XG4gIEFDRVNGaWxtaWNUb25lTWFwcGluZyxcbiAgQW1iaWVudExpZ2h0LFxuICBBeGVzSGVscGVyLFxuICBDb2xvcixcbiAgTWVzaCxcbiAgTWVzaEJhc2ljTWF0ZXJpYWwsXG4gIFBlcnNwZWN0aXZlQ2FtZXJhLFxuICBTY2VuZSxcbiAgU3BoZXJlQnVmZmVyR2VvbWV0cnksXG4gIFdlYkdMUmVuZGVyZXIsXG59IGZyb20gXCJ0aHJlZVwiO1xuaW1wb3J0IHsgT3JiaXRDb250cm9scyB9IGZyb20gXCJ0aHJlZS9leGFtcGxlcy9qc20vY29udHJvbHMvT3JiaXRDb250cm9sc1wiO1xuaW1wb3J0IHsgU2t5IH0gZnJvbSBcInRocmVlL2V4YW1wbGVzL2pzbS9vYmplY3RzL1NreVwiO1xuXG5leHBvcnQgY2xhc3MgQ29tbW9uIHtcbiAgc3RhdGljIGluaXRTY2VuZSgpIHtcbiAgICBjb25zdCBzY2VuZSA9IG5ldyBTY2VuZSgpO1xuICAgIHJldHVybiBzY2VuZTtcbiAgfVxuXG4gIHN0YXRpYyBpbml0TGlnaHQoc2NlbmUpIHtcbiAgICBjb25zdCBhbWJpZW50TGlnaHQgPSBuZXcgQW1iaWVudExpZ2h0KDB4ZmZmZmZmLCAxLjApO1xuICAgIHNjZW5lLmFkZChhbWJpZW50TGlnaHQpO1xuICAgIHJldHVybiBhbWJpZW50TGlnaHQ7XG4gIH1cblxuICBzdGF0aWMgaW5pdENhbWVyYShzY2VuZSwgVywgSCwgZmFyID0gNDAwKSB7XG4gICAgY29uc3QgY2FtZXJhID0gbmV3IFBlcnNwZWN0aXZlQ2FtZXJhKDQ1LCBXIC8gSCwgMSwgZmFyKTtcbiAgICBjYW1lcmEucG9zaXRpb24uc2V0KDAsIDAsIDEwMCk7XG4gICAgY2FtZXJhLnVwZGF0ZU1hdHJpeFdvcmxkKGZhbHNlKTtcbiAgICBzY2VuZS5hZGQoY2FtZXJhKTtcbiAgICByZXR1cm4gY2FtZXJhO1xuICB9XG5cbiAgc3RhdGljIGluaXRDb250cm9sKGNhbWVyYSwgcmVuZGVyKSB7XG4gICAgbGV0IGRvbUVsZW1lbnQ7XG4gICAgaWYgKHJlbmRlciAhPSBudWxsKSB7XG4gICAgICBkb21FbGVtZW50ID0gcmVuZGVyLmRvbUVsZW1lbnQ7XG4gICAgfVxuICAgIGNvbnN0IGNvbnRyb2wgPSBuZXcgT3JiaXRDb250cm9scyhjYW1lcmEsIGRvbUVsZW1lbnQpO1xuICAgIGNvbnRyb2wudXBkYXRlKCk7XG4gICAgcmV0dXJuIGNvbnRyb2w7XG4gIH1cblxuICBzdGF0aWMgaW5pdFJlbmRlcmVyKFcsIEgsIGNvbG9yID0gMHgwMDAwMDAsIGFudGlhbGlhcyA9IHRydWUpIHtcbiAgICBjb25zdCByZW5kZXJlciA9IG5ldyBXZWJHTFJlbmRlcmVyKHtcbiAgICAgIGFudGlhbGlhczogYW50aWFsaWFzLFxuICAgIH0pO1xuICAgIHJlbmRlcmVyLnNldENsZWFyQ29sb3IobmV3IENvbG9yKGNvbG9yKSk7XG4gICAgcmVuZGVyZXIuc2V0U2l6ZShXLCBIKTtcbiAgICByZW5kZXJlci5zZXRQaXhlbFJhdGlvKHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvKTtcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHJlbmRlcmVyLmRvbUVsZW1lbnQpO1xuICAgIHJldHVybiByZW5kZXJlcjtcbiAgfVxuXG4gIHN0YXRpYyBpbml0SGVscGVyKHNjZW5lKSB7XG4gICAgY29uc3QgYXhlc0hlbHBlciA9IG5ldyBBeGVzSGVscGVyKDMwKTtcbiAgICBzY2VuZS5hZGQoYXhlc0hlbHBlcik7XG4gIH1cblxuICBzdGF0aWMgaW5pdFNreShzY2VuZSwgZ3VpLCByZW5kZXJlcikge1xuICAgIHJlbmRlcmVyLnRvbmVNYXBwaW5nID0gQUNFU0ZpbG1pY1RvbmVNYXBwaW5nO1xuXG4gICAgY29uc3Qgc3VuU3BoZXJlID0gbmV3IE1lc2goXG4gICAgICBuZXcgU3BoZXJlQnVmZmVyR2VvbWV0cnkoMjAwMDAsIDE2LCA4KSxcbiAgICAgIG5ldyBNZXNoQmFzaWNNYXRlcmlhbCh7IGNvbG9yOiAweGZmZmZmZiB9KVxuICAgICk7XG4gICAgc3VuU3BoZXJlLnBvc2l0aW9uLnkgPSAtNzAwMDAwO1xuICAgIHN1blNwaGVyZS52aXNpYmxlID0gZmFsc2U7XG4gICAgc2NlbmUuYWRkKHN1blNwaGVyZSk7XG5cbiAgICBjb25zdCBza3kgPSBuZXcgU2t5KCk7XG4gICAgc2t5LnNjYWxlLnNldFNjYWxhcig0NTAwMCk7XG4gICAgc2NlbmUuYWRkKHNreSk7XG5cbiAgICBDb21tb25HVUkuaW5pdFNreUdVSShndWksIHNreSwgc3VuU3BoZXJlLCByZW5kZXJlcik7XG4gIH1cbn1cbiIsImltcG9ydCB7IERpcmVjdGlvbnMsIFNxdWFyZUdyaWRNYXRlcmlhbCB9IGZyb20gXCIuLlwiO1xuaW1wb3J0IHsgQ29tbW9uIH0gZnJvbSBcIi4vQ29tbW9uXCI7XG5pbXBvcnQgeyBDb21tb25HVUkgfSBmcm9tIFwiLi9Db21tb25HVUlcIjtcbmltcG9ydCB7IFJBRlRpY2tlciwgUkFGVGlja2VyRXZlbnRUeXBlIH0gZnJvbSBcIkBtYXNhdG9tYWtpbm8vcmFmLXRpY2tlclwiO1xuaW1wb3J0IEdVSSBmcm9tIFwibGlsLWd1aVwiO1xuaW1wb3J0IHtcbiAgQ29sb3IsXG4gIEZvZyxcbiAgTWVzaCxcbiAgUG9pbnRMaWdodCxcbiAgUG9pbnRMaWdodEhlbHBlcixcbiAgU3BoZXJlR2VvbWV0cnksXG59IGZyb20gXCJ0aHJlZVwiO1xuXG5leHBvcnQgY2xhc3MgU3R1ZHlTcXVhcmVHcmlkIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgY29uc3QgVyA9IDY0MDtcbiAgICBjb25zdCBIID0gNDgwO1xuXG4gICAgY29uc3Qgc2NlbmUgPSBDb21tb24uaW5pdFNjZW5lKCk7XG4gICAgc2NlbmUuZm9nID0gbmV3IEZvZygweDAwMDAwMCwgODAsIDE2MCk7XG4gICAgQ29tbW9uLmluaXRMaWdodChzY2VuZSk7XG4gICAgY29uc3QgY2FtZXJhID0gQ29tbW9uLmluaXRDYW1lcmEoc2NlbmUsIFcsIEgpO1xuICAgIGNvbnN0IHJlbmRlcmVyID0gQ29tbW9uLmluaXRSZW5kZXJlcihXLCBIKTtcbiAgICBjb25zdCBjb250cm9sID0gQ29tbW9uLmluaXRDb250cm9sKGNhbWVyYSwgcmVuZGVyZXIpO1xuICAgIENvbW1vbi5pbml0SGVscGVyKHNjZW5lKTtcbiAgICBjb25zdCBtYXQgPSB0aGlzLmluaXRPYmplY3Qoc2NlbmUpO1xuICAgIFJBRlRpY2tlci5hZGRFdmVudExpc3RlbmVyKFJBRlRpY2tlckV2ZW50VHlwZS50aWNrLCAoZSkgPT4ge1xuICAgICAgcmVuZGVyZXIucmVuZGVyKHNjZW5lLCBjYW1lcmEpO1xuICAgIH0pO1xuXG4gICAgdGhpcy5pbml0R1VJKG1hdCk7XG4gIH1cblxuICBpbml0T2JqZWN0KHNjZW5lKSB7XG4gICAgY29uc3Qgc3BvdCA9IG5ldyBQb2ludExpZ2h0KDB4ZmZmZmZmLCAxLCAwLCAyKTtcbiAgICBzcG90LnBvc2l0aW9uLnNldCgxMCwgMjAsIDMwKTtcbiAgICBzY2VuZS5hZGQoc3BvdCk7XG4gICAgY29uc3QgaGVscGVyID0gbmV3IFBvaW50TGlnaHRIZWxwZXIoc3BvdCk7XG4gICAgc2NlbmUuYWRkKGhlbHBlcik7XG5cbiAgICBjb25zdCBnZW8gPSBuZXcgU3BoZXJlR2VvbWV0cnkoMTAsIDY0LCA2NCk7XG5cbiAgICBjb25zdCBtYXQgPSBuZXcgU3F1YXJlR3JpZE1hdGVyaWFsKHtcbiAgICAgIC8vIHNpZGU6RG91YmxlU2lkZSxcbiAgICAgIGZvZzogc2NlbmUuZm9nICE9PSB1bmRlZmluZWQsXG4gICAgfSk7XG4gICAgbWF0LmNvbG9yID0gbmV3IENvbG9yKDB4ZmY2NjY2KTtcbiAgICBtYXQuZGlyZWN0aW9uID0gRGlyZWN0aW9ucy52ZXJ0aWNhbDtcbiAgICBjb25zdCBtZXNoID0gbmV3IE1lc2goZ2VvLCBtYXQpO1xuICAgIHNjZW5lLmFkZChtZXNoKTtcblxuICAgIHJldHVybiBtYXQ7XG4gIH1cblxuICBpbml0R1VJKG1hdCkge1xuICAgIGNvbnN0IGd1aSA9IG5ldyBHVUkoKTtcbiAgICBDb21tb25HVUkuaW5pdFdhdnlNYXRlcmlhbEdVSShndWksIG1hdCk7XG4gICAgdGhpcy5pbml0R1VJTWF0ZXJpYWwoZ3VpLCBtYXQpO1xuICB9XG5cbiAgaW5pdEdVSU1hdGVyaWFsKGd1aSwgbWF0KSB7XG4gICAgY29uc3QgZm9sZGVyID0gZ3VpLmFkZEZvbGRlcihcIlNxdWFyZUdyaWRcIik7XG4gICAgZm9sZGVyLmFkZChtYXQsIFwiZ3JpZFdlaWdodFwiLCAwLjAsIDAuNSk7XG4gICAgZm9sZGVyLm9wZW4oKTtcbiAgfVxufVxuXG53aW5kb3cub25sb2FkID0gKCkgPT4ge1xuICBjb25zdCBzdHVkeSA9IG5ldyBTdHVkeVNxdWFyZUdyaWQoKTtcbn07XG4iXSwibmFtZXMiOlsiU2hhZGVyQ2h1bmsiLCJHTFNMQ2h1bmsiLCJnZXRDaHVua05hbWUiLCJnZXRDaHVuayIsImdldERlZmluZXMiLCJyZWdpc3RlckNodW5rIiwiZ2V0VW5pZm9ybSIsIkFuaW1hdGlvbkNodW5rIiwiVGltZUFuaW1hdGlvblVuaWZvcm1DaHVuayIsInRpbWUiLCJ2YWx1ZSIsImlzQW5pbWF0ZSIsImFkZFRpbWUiLCJzZWxmIiwiZGVsdGEiLCJ1bmlmb3JtcyIsInNwZWVkIiwiRXhwYW5zaW9uQ2h1bmsiLCJFeHBhbnNpb25Vbmlmb3JtQ2h1bmsiLCJFeHBhbnNpb25WZXJ0ZXhDaHVuayIsIlVTRV9FWFBBTlNJT04iLCJleHBhbnNpb25TdHJlbmd0aCIsIlVuaWZvcm1zVXRpbHMiLCJNYXBDaHVuayIsIk1hcFVuaWZvcm1DaHVuayIsIk1hcEZyYWdtZW50Q2h1bmsiLCJNYXBGcmFnbWVudEJlZ2luQ2h1bmsiLCJtZXJnZSIsImhhc01hcCIsIm1hcCIsImdldE1hcCIsIl9zZWxmIiwic2V0TWFwIiwidmFsIiwiUmVwZWF0UGF0dGVybkNodW5rIiwiUmVwZWF0UGF0dGVyblVuaWZvcm1DaHVuayIsIlJlcGVhdFBhdHRlcm5GcmFnbWVudENodW5rIiwiZGl2aXNpb24iLCJkaXZpc2lvblNjYWxlWCIsIk1hc2tNYXBDaHVuayIsIk1hc2tNYXBVbmlmb3JtQ2h1bmsiLCJNYXNrTWFwRnJhZ21lbnRDaHVuayIsImhhc01hc2tUZXh0dXJlIiwibWFza1RleHR1cmUiLCJnZXRNYXNrVGV4dHVyZSIsInNldE1hc2tUZXh0dXJlIiwiTWVzaFBob25nQ2h1bmsiLCJNZXNoUGhvbmdVbmlmb3JtQ2h1bmsiLCJNZXNoUGhvbmdEaWZmdXNlQ29sb3JDaHVuayIsIk1lc2hQaG9uZ1N3aXRjaGluZ0FscGhhTWFwQ2h1bmsiLCJNZXNoUG9zaXRpb25WYXJ5aW5nQ2h1bmsiLCJNZXNoUG9zaXRpb25WZXJ0ZXhDaHVuayIsIlVTRV9NRVNIX1BPU0lUSU9OIiwiUmV2ZXJzaWJsZUNodW5rIiwiUmV2ZXJzaWJsZVVuaWZvcm1DaHVuayIsImlzUmV2ZXJzZWQiLCJTdXJmYWNlTm9ybWFsQ2h1bmsiLCJTdXJmYWNlTm9ybWFsVmFyeWluZ0NodW5rIiwiU3VyZmFjZU5vcm1hbFZlcnRleENodW5rIiwiVVNFX1NVUkZBQ0VfTk9STUFMIiwiV2F2eUFuaW1hdGlvbkNodW5rIiwiV2F2eUFuaW1hdGlvbkZyYWdtZW50Q2h1bmsiLCJXYXZ5QW5pbWF0aW9uVW5pZm9ybUNodW5rIiwicmFpc2VkQm90dG9tIiwid2F2ZUZyZXF1ZW5jeSIsIndhdmVQb3ciLCJkaXJlY3Rpb24iLCJEaXJlY3Rpb25zIiwidmVydGljYWwiLCJob3Jpem9udGFsIiwicmFkaWFsIiwiRnJhZ21lbnRTaGFkZXIiLCJWZXJ0ZXhTaGFkZXIiLCJBZGRpdGl2ZUJsZW5kaW5nIiwiQ29sb3IiLCJTaGFkZXJNYXRlcmlhbCIsIlVuaWZvcm1zTGliIiwiU2hhZGVyUGhvbmdNYXRlcmlhbCIsImNvbnN0cnVjdG9yIiwidmVydGV4U2hhZGVyIiwiZnJhZ21lbnRTaGFkZXIiLCJwYXJhbWV0ZXJzIiwiX29wYWNpdHkiLCJpbml0Q2h1bmtzIiwiaW5pdFVuaWZvcm1zIiwiaW5pdERlZmluZXMiLCJpbml0RGVmYXVsdFNldHRpbmciLCJnZXRCYXNpY1VuaWZvcm1zIiwiY29tbW9uIiwic3BlY3VsYXJtYXAiLCJlbnZtYXAiLCJhb21hcCIsImxpZ2h0bWFwIiwiZW1pc3NpdmVtYXAiLCJidW1wbWFwIiwibm9ybWFsbWFwIiwiZGlzcGxhY2VtZW50bWFwIiwiZ3JhZGllbnRtYXAiLCJmb2ciLCJsaWdodHMiLCJlbWlzc2l2ZSIsInNwZWN1bGFyIiwic2hpbmluZXNzIiwiaGFzQWxwaGFNYXAiLCJkZWZpbmVzIiwiT2JqZWN0IiwiYXNzaWduIiwidW5pZm9ybU9wYWNpdHkiLCJjb2xvciIsImRpZmZ1c2UiLCJvcGFjaXR5IiwiX2EiLCJvblNldE1hcCIsImFscGhhTWFwIiwib25TZXRBbHBoYU1hcCIsInN0YXJ0R2xvdyIsImFscGhhVGVzdCIsImRlcHRoV3JpdGUiLCJibGVuZGluZyIsIlNwcml0ZUNodW5rIiwiU2hhZGVyU3ByaXRlTWF0ZXJpYWwiLCJjZW50ZXIiLCJyb3RhdGlvbiIsInV2VHJhbnNmb3JtIiwiU2hhZGVyQmFzaWNNYXRlcmlhbCIsIkRvdWJsZVNpZGUiLCJUZXh0dXJlTG9hZGVyIiwiQ29udG91ck1hdGVyaWFsIiwiX21hcCIsImxvYWRNYXAiLCJ1cmwiLCJnZW8iLCJsb2FkIiwidGV4dHVyZSIsImNvbXB1dGVCb3VuZGluZ0JveCIsInRvcCIsImJvdW5kaW5nQm94IiwibWF4IiwieSIsImJvdHRvbSIsIm1pbiIsInRyYW5zcGFyZW50Iiwic2lkZSIsIkdyaWRNYXRlcmlhbCIsIlJBRlRpY2tlciIsIlJBRlRpY2tlckV2ZW50VHlwZSIsIldhdnlHcmlkTWF0ZXJpYWwiLCJzdGFydEFuaW1hdGlvbiIsInN0b3BBbmltYXRpb24iLCJhbmltYXRpb25MaXN0ZW5lciIsImUiLCJvbiIsIm9uQmVmb3JlVGljayIsIm9mZiIsIkNyb3NzR3JpZE1hdGVyaWFsIiwiZ3JpZFdlaWdodCIsInJhZGl1cyIsIkhhbGZ0b25lR3JpZE1hdGVyaWFsIiwiSGV4R3JpZENodW5rIiwiSGV4R3JpZE1hdGVyaWFsIiwiU3F1YXJlR3JpZE1hdGVyaWFsIiwiU2t5Q2xvdWRNYXRlcmlhbCIsInNjYWxlIiwic2t5Q29sb3IiLCJjbG91ZFZvbHVtZSIsImNsb3VkQm90dG9tVm9sdW1lIiwiY2xvdWRCb3R0b21TYXR1cmF0aW9uIiwiY2xvdWRUcmFuc2Zvcm1TcGVlZCIsIlRpbGluZ0ZCTUNodW5rIiwiRkJNRGlzc29sdmVNYXRlcmlhbCIsInRpbGVzIiwiaGFzaExvb3AiLCJhbXAiLCJwcm9ncmVzcyIsImVkZ2VXZWlnaHQiLCJlZGdlQ29sb3IiLCJGQk1GaXJlTWF0ZXJpYWwiLCJzdHJlbmd0aCIsImJsb29tIiwidHJhbnNmb3JtU3BlZWQiLCJyaW1Qb3ciLCJyaW1TdHJlbmd0aCIsIlJpbUJhc2ljTWF0ZXJpYWwiLCJyaW1Db2xvciIsImluc2lkZVBvdyIsImluc2lkZVN0cmVuZ3RoIiwiaW5zaWRlQ29sb3IiLCJwYXJhbSIsImdldFJpbVVuaWZvcm1zIiwiUmltRWZmZWN0TWF0ZXJpYWwiLCJVU0VfTElHSFQiLCJPdXRlckdsb3dNYXRlcmlhbCIsIkV4cGFuc2lvbk1hdGVyaWFsIiwiU3ByaXRlQ2xvdWRNYXRlcmlhbCIsImJvdHRvbVN0cmVuZ3RoIiwicmltQ2VudGVyIiwicmltUmFuZ2UiLCJFeHBhbnNpb25EaXNzb2x2ZU1hdGVyaWFsIiwic2NhbGVNYXgiLCJkaXNzb2x2ZUNvbG9yIiwiZGlzc29sdmVPdXRDb2xvciIsIlJlcGVhdFdyYXBwaW5nIiwiVmVjdG9yMiIsIlN3aXJsTWF0ZXJpYWwiLCJzZXRSZXBlYXQiLCJ3cmFwUyIsIndyYXBUIiwidXZSb3RhdGlvbiIsInN3aXJsUm90YXRpb24iLCJDZWxsdWxhck5vaXNlTWF0ZXJpYWwiLCJncmlkIiwiU29saWRDbGlwcGluZ01hdGVyaWFsIiwiY3V0U2VjdGlvbkNvbG9yIiwiY2xpcHBpbmciLCJIZXhEaXNzb2x2ZU1hdGVyaWFsIiwiZGVsYXkiLCJpc0FzY2VuZGluZyIsImdyaWRFbWlzc2l2ZSIsImdyaWRFbWlzc2l2ZVdlaWdodCIsIkNvbW1vbkdVSSIsImluaXRDb2xvckdVSSIsImZvbGRlciIsIm1hdCIsInByb3BOYW1lIiwicHJvcCIsInRhcmdldENvbG9yIiwiZ2V0SGV4IiwiYWRkQ29sb3IiLCJvbkNoYW5nZSIsInNldEhleCIsImluaXRCYXNpY01hdGVyaWFsR1VJIiwiZ3VpIiwiZm9sZGVyTmFtZSIsImFkZEZvbGRlciIsImluaXRNYXRlcmlhbEZvbGRlciIsIm9wZW4iLCJpbml0TWF0ZXJpYWxHVUkiLCJhZGQiLCJpbml0U3ByaXRlTWF0ZXJpYWxHVUkiLCJpbml0R3JpZE1hdGVyaWFsR1VJIiwibWFzayIsInN0ZXAiLCJub25lIiwiZWFydGgiLCJpbml0V2F2eU1hdGVyaWFsR1VJIiwiYW5pbWF0aW9uRm9sZGVyIiwiaW5pdEFuaW1hdGlvbkdVSSIsImluaXRSaW1HVUkiLCJpbml0RXhwYW5zaW9uR1VJIiwiYW1wUmFuZ2UiLCJpbml0RkJNVGlsaW5nR1VJIiwiaW5pdFNreUdVSSIsInNreSIsInN1blNwaGVyZSIsInJlbmRlcmVyIiwiZWZmZWN0Q29udHJvbGxlciIsInR1cmJpZGl0eSIsInJheWxlaWdoIiwibWllQ29lZmZpY2llbnQiLCJtaWVEaXJlY3Rpb25hbEciLCJpbmNsaW5hdGlvbiIsImF6aW11dGgiLCJleHBvc3VyZSIsImRpc3RhbmNlIiwiZ3VpQ2hhbmdlZCIsIm1hdGVyaWFsIiwidGhldGEiLCJNYXRoIiwiUEkiLCJwaGkiLCJwb3NpdGlvbiIsIngiLCJjb3MiLCJzaW4iLCJ6IiwiY29weSIsInRvbmVNYXBwaW5nRXhwb3N1cmUiLCJBQ0VTRmlsbWljVG9uZU1hcHBpbmciLCJBbWJpZW50TGlnaHQiLCJBeGVzSGVscGVyIiwiTWVzaCIsIk1lc2hCYXNpY01hdGVyaWFsIiwiUGVyc3BlY3RpdmVDYW1lcmEiLCJTY2VuZSIsIlNwaGVyZUJ1ZmZlckdlb21ldHJ5IiwiV2ViR0xSZW5kZXJlciIsIk9yYml0Q29udHJvbHMiLCJTa3kiLCJDb21tb24iLCJpbml0U2NlbmUiLCJzY2VuZSIsImluaXRMaWdodCIsImFtYmllbnRMaWdodCIsImluaXRDYW1lcmEiLCJXIiwiSCIsImZhciIsImNhbWVyYSIsInNldCIsInVwZGF0ZU1hdHJpeFdvcmxkIiwiaW5pdENvbnRyb2wiLCJyZW5kZXIiLCJkb21FbGVtZW50IiwiY29udHJvbCIsInVwZGF0ZSIsImluaXRSZW5kZXJlciIsImFudGlhbGlhcyIsInNldENsZWFyQ29sb3IiLCJzZXRTaXplIiwic2V0UGl4ZWxSYXRpbyIsIndpbmRvdyIsImRldmljZVBpeGVsUmF0aW8iLCJkb2N1bWVudCIsImJvZHkiLCJhcHBlbmRDaGlsZCIsImluaXRIZWxwZXIiLCJheGVzSGVscGVyIiwiaW5pdFNreSIsInRvbmVNYXBwaW5nIiwidmlzaWJsZSIsInNldFNjYWxhciIsIkdVSSIsIkZvZyIsIlBvaW50TGlnaHQiLCJQb2ludExpZ2h0SGVscGVyIiwiU3BoZXJlR2VvbWV0cnkiLCJTdHVkeVNxdWFyZUdyaWQiLCJpbml0T2JqZWN0IiwiYWRkRXZlbnRMaXN0ZW5lciIsInRpY2siLCJpbml0R1VJIiwic3BvdCIsImhlbHBlciIsInVuZGVmaW5lZCIsIm1lc2giLCJpbml0R1VJTWF0ZXJpYWwiLCJvbmxvYWQiLCJzdHVkeSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///21\n')}},__webpack_module_cache__={},deferred;function __webpack_require__(Q){var F=__webpack_module_cache__[Q];if(void 0!==F)return F.exports;var U=__webpack_module_cache__[Q]={exports:{}};return __webpack_modules__[Q](U,U.exports,__webpack_require__),U.exports}__webpack_require__.m=__webpack_modules__,deferred=[],__webpack_require__.O=(Q,F,U,B)=>{if(!F){var g=1/0;for(C=0;C<deferred.length;C++){for(var[F,U,B]=deferred[C],I=!0,s=0;s<F.length;s++)(!1&B||g>=B)&&Object.keys(__webpack_require__.O).every((Q=>__webpack_require__.O[Q](F[s])))?F.splice(s--,1):(I=!1,B<g&&(g=B));if(I){deferred.splice(C--,1);var n=U();void 0!==n&&(Q=n)}}return Q}B=B||0;for(var C=deferred.length;C>0&&deferred[C-1][2]>B;C--)deferred[C]=deferred[C-1];deferred[C]=[F,U,B]},__webpack_require__.n=Q=>{var F=Q&&Q.__esModule?()=>Q.default:()=>Q;return __webpack_require__.d(F,{a:F}),F},__webpack_require__.d=(Q,F)=>{for(var U in F)__webpack_require__.o(F,U)&&!__webpack_require__.o(Q,U)&&Object.defineProperty(Q,U,{enumerable:!0,get:F[U]})},__webpack_require__.o=(Q,F)=>Object.prototype.hasOwnProperty.call(Q,F),__webpack_require__.j=868,(()=>{var Q={868:0};__webpack_require__.O.j=F=>0===Q[F];var F=(F,U)=>{var B,g,[I,s,n]=U,C=0;if(I.some((F=>0!==Q[F]))){for(B in s)__webpack_require__.o(s,B)&&(__webpack_require__.m[B]=s[B]);if(n)var l=n(__webpack_require__)}for(F&&F(U);C<I.length;C++)g=I[C],__webpack_require__.o(Q,g)&&Q[g]&&Q[g][0](),Q[g]=0;return __webpack_require__.O(l)},U=self.webpackChunkthreejs_shader_materials=self.webpackChunkthreejs_shader_materials||[];U.forEach(F.bind(null,0)),U.push=F.bind(null,U.push.bind(U))})();var __webpack_exports__=__webpack_require__.O(void 0,[736],(()=>__webpack_require__(21)));__webpack_exports__=__webpack_require__.O(__webpack_exports__)})();